#pragma GCC optimize("O3","unroll-loops","omit-frame-pointer","inline") //Optimization flags
#pragma GCC option("arch=native","tune=native","no-zero-upper") //Enable AVX
#pragma GCC target("avx")  //Enable AVX
#include <x86intrin.h> //AVX/SSE Extensions
#include <bits/stdc++.h> //All main STD libraries

#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <list>
#include <stack>
#include <set>
#include <queue>
#include <algorithm>
#include <ctime>
#include <deque>
#include <cmath>
#include <climits>
#include <cstring>
#include <fstream>
#include <iterator>
#include <bitset>
#include <cmath>
#include <iomanip>
#include <chrono>
#include <cassert>

using namespace std;

//#define REDIRECT_INPUT
//#define OUTPUT_GAME_DATA
//#define TIME_MEASURERMENT
//#define DEBUG_ONE_TURN
//#define USE_UNIFORM_RANDOM

static const string INPUT_FILE_NAME = "input.txt";
static const string OUTPUT_FILE_NAME = "output.txt";
static const string EMPTY_STRING = "";
static constexpr char SPACE = ' ';
static constexpr char TAB = '\t';

static constexpr int INVALID_ID = -1;
static constexpr int INVALID_IDX = -1;
static constexpr int INVALID_NODE_DEPTH = -1;
static constexpr int TREE_ROOT_NODE_DEPTH = 1;
static constexpr int ZERO_CHAR = '0';
static constexpr int DIRECTIONS_COUNT = 8;
static constexpr int BYTE_SIZE = 8;
static constexpr int PAIR = 2;
static constexpr int TRIPLE = 3;
static constexpr int BASE_2 = 2;
static constexpr int BASE_10 = 10;
static constexpr int BASE_16 = 16;
static constexpr int STOP_INPUT = 10;
static constexpr int BOARD_DIM = 9;
static constexpr int ALL_SQUARES = BOARD_DIM * BOARD_DIM;
static constexpr int PLAYER_TOGGLE = 2;
static constexpr int MY_PLAYER_IDX = 0;
static constexpr int OPPONENT_PLAYER_IDX = 1;
static constexpr int MONTE_CARLO_ITERATIONS = 900;

static constexpr char MY_PLAYER_CHAR = 'X';
static constexpr char OPPONENT_PLAYER_CHAR = 'O';
static constexpr char EMPTY_CHAR = '_';

static constexpr size_t NODES_TO_RESERVE = 6'000'000;
static constexpr size_t MAX_CHILDREN_COUNT = 81;

static constexpr long long FIRST_TURN_MS = 1'000;
static constexpr long long TURN_MS = 100;
static constexpr long long BIAS_MS = 2;

static constexpr double WIN_VALUE = 10.0;

static constexpr unsigned short PLAYER_FLAG		= 0b0000'0000'0000'0001;
static constexpr unsigned short STATUS_MASK		= 0b0000'0000'0000'0110;
static constexpr unsigned short MOVE_ROW_MASK	= 0b0000'0000'0111'1000;
static constexpr unsigned short MOVE_COL_MASK	= 0b0000'0111'1000'0000;

static constexpr unsigned short STATUS_OFFSET = 1;
static constexpr unsigned short MOVE_ROW_OFFSET = 3;
static constexpr unsigned short MOVE_COL_OFFSET = 7;

static constexpr int X_SQUARE = 0;
static constexpr int O_SQUARE = 1;
static constexpr int SQUARE_TYPES = 2; // 'X'; 'O'
static constexpr short EMPTY_TICTACTOE_BOARD = 0; // 9 empty squares

static constexpr short FULL_BOARD_MASK = 0b0000'000'111'111'111;
static constexpr int WIN_MASKS_COUNT = 8;
static constexpr short WIN_MASKS[WIN_MASKS_COUNT] = {
	0b0000'000'000'000'111, // Top row win
	0b0000'000'000'111'000, // Middle row win
	0b0000'000'111'000'000, // Bottom row win

	0b0000'000'001'001'001, // Left column win
	0b0000'000'010'010'010, // Middle column win
	0b0000'000'100'100'100, // Right column win

	0b0000'000'100'010'001, // Main diagonal win
	0b0000'000'001'010'100, // Second diagonal win
};

static constexpr short SQUARE_MASKS_PRIORITY[BOARD_DIM] = {
	0b0000000'000'000'001,	// Upper left
	0b0000000'100'000'000,	// Down right
	0b0000000'000'000'100,	// Upper right
	0b0000000'001'000'000,	// Down left
	0b0000000'000'010'000,	// Center
	0b0000000'000'000'010,	// Upper middle
	0b0000000'000'001'000,	// Middle left
	0b0000000'010'000'000,	// Bottom middle
	0b0000000'000'100'000	// Middle right
};

static constexpr int MINIBOARDS_PRIORITY[BOARD_DIM] = {
	0,	// Upper left
	8,	// Down right
	2,	// Upper right
	6,	// Down left
	4,	// Center
	1,	// Upper middle
	3,	// Middle left
	7,	// Bottom middle
	5	// Middle right
};

enum class BoardStatus {
	INVALID = -1,
	IN_PROGRESS,
	DRAW,
	OPPONENT_WON,
	I_WON,
};

enum class MovePriority {
	INVALID,
	WINNING_BIG_BOARD,
	WINNING_MINI_BOARD,
	SAVING_MINI_BOARD,
	TAKING_CENTER,
	TAKING_CORNER,
	TAKING_SIDE,
};

static void printTabs(const int tabsCount, string& str) {
	for (int tabIdx = 0; tabIdx < tabsCount; ++tabIdx) {
		str += TAB;
	}
}

static unsigned int g_seed;

// Used to seed the generator.
inline void fast_srand(int seed) {
	g_seed = seed;
}

// Compute a pseudorandom integer.
// Output value in range [0, 32767]
inline int fast_rand(void) {
	g_seed = (214013 * g_seed + 2531011);
	return (g_seed >> 16) & 0x7FFF;
}

static const std::map<std::pair<short, short>, Coords> BEST_MOVES = {
{{0,0},{0,0}},{{1,0},{1,1}},{{1,2},{1,0}},{{1,4},{1,0}},{{1,8},{0,1}},{{1,16},{0,1}},{{1,32},{0,2}},{{1,64},{0,1}},{{1,128},{0,2}},{{1,256},{0,2}},{{2,0},{0,0}},{{2,1},{1,0}},{{2,4},{1,1}},{{2,8},{0,0}},{{2,16},{0,0}},{{2,32},{0,2}},{{2,64},{0,0}},{{2,128},{0,0}},{{2,256},{0,2}},{{3,4},{1,2}},{{3,8},{0,2}},{{3,12},{1,1}},{{3,16},{0,2}},{{3,20},{2,0}},{{3,24},{0,2}},{{3,32},{0,2}},{{3,36},{1,0}},{{3,40},{0,2}},{{3,48},{0,2}},{{3,64},{0,2}},{{3,68},{1,1}},{{3,72},{0,2}},{{3,80},{0,2}},{{3,96},{0,2}},{{3,128},{0,2}},{{3,132},{2,0}},{{3,136},{0,2}},{{3,144},{0,2}},{{3,160},{0,2}},{{3,192},{0,2}},{{3,256},{0,2}},{{3,260},{1,0}},{{3,264},{0,2}},{{3,272},{0,2}},{{3,288},{0,2}},{{3,320},{0,2}},{{3,384},{0,2}},{{4,0},{1,1}},{{4,1},{1,2}},{{4,2},{1,1}},{{4,8},{0,0}},{{4,16},{0,0}},{{4,32},{0,0}},{{4,64},{0,0}},{{4,128},{0,0}},{{4,256},{0,0}},{{5,2},{1,1}},{{5,8},{0,1}},{{5,10},{1,1}},{{5,16},{0,1}},{{5,18},{2,1}},{{5,24},{0,1}},{{5,32},{0,1}},{{5,34},{1,1}},{{5,40},{0,1}},{{5,48},{0,1}},{{5,64},{0,1}},{{5,66},{2,2}},{{5,72},{0,1}},{{5,80},{0,1}},{{5,96},{0,1}},{{5,128},{0,1}},{{5,130},{1,1}},{{5,136},{0,1}},{{5,144},{0,1}},{{5,160},{0,1}},{{5,192},{0,1}},{{5,256},{0,1}},{{5,258},{2,0}},{{5,264},{0,1}},{{5,272},{0,1}},{{5,288},{0,1}},{{5,320},{0,1}},{{5,384},{0,1}},{{6,1},{1,0}},{{6,8},{0,0}},{{6,9},{1,1}},{{6,16},{0,0}},{{6,17},{2,2}},{{6,24},{0,0}},{{6,32},{0,0}},{{6,33},{1,1}},{{6,40},{0,0}},{{6,48},{0,0}},{{6,64},{0,0}},{{6,65},{1,0}},{{6,72},{0,0}},{{6,80},{0,0}},{{6,96},{0,0}},{{6,128},{0,0}},{{6,129},{2,0}},
{{6,136},{0,0}},{{6,144},{0,0}},{{6,160},{0,0}},{{6,192},{0,0}},{{6,256},{0,0}},{{6,257},{1,1}},{{6,264},{0,0}},{{6,272},{0,0}},{{6,288},{0,0}},{{6,320},{0,0}},{{6,384},{0,0}},{{8,0},{0,0}},{{8,1},{0,1}},{{8,2},{0,0}},{{8,4},{0,0}},{{8,16},{0,0}},{{8,32},{0,0}},{{8,64},{0,2}},{{8,128},{1,1}},{{8,256},{2,0}},{{9,2},{0,2}},{{9,4},{0,1}},{{9,6},{1,1}},{{9,16},{2,0}},{{9,18},{2,0}},{{9,20},{2,0}},{{9,32},{2,0}},{{9,34},{1,1}},{{9,36},{2,0}},{{9,48},{0,1}},{{9,64},{2,1}},{{9,66},{1,1}},{{9,68},{1,1}},{{9,80},{0,2}},{{9,96},{0,2}},{{9,128},{2,0}},{{9,130},{1,1}},{{9,132},{1,1}},{{9,144},{0,1}},{{9,160},{0,1}},{{9,192},{0,1}},{{9,256},{2,0}},{{9,258},{1,1}},{{9,260},{1,2}},{{9,272},{0,1}},{{9,288},{0,2}},{{9,320},{0,1}},{{9,384},{2,0}},{{10,1},{1,1}},{{10,4},{2,2}},{{10,5},{1,1}},{{10,16},{0,0}},{{10,17},{2,2}},{{10,20},{2,0}},{{10,32},{0,0}},{{10,33},{0,2}},{{10,36},{2,2}},{{10,48},{0,0}},{{10,64},{2,2}},{{10,65},{1,1}},{{10,68},{1,1}},{{10,80},{0,2}},{{10,96},{0,2}},{{10,128},{0,0}},{{10,129},{1,1}},{{10,132},{1,1}},{{10,144},{0,0}},{{10,160},{0,0}},{{10,192},{2,2}},{{10,256},{0,2}},{{10,257},{1,1}},{{10,260},{0,0}},{{10,272},{0,0}},{{10,288},{0,2}},{{10,320},{0,0}},{{10,384},{2,0}},{{11,20},{2,0}},{{11,36},{2,0}},{{11,48},{0,2}},{{11,52},{2,0}},{{11,68},{1,1}},{{11,80},{0,2}},{{11,96},{0,2}},{{11,100},{1,1}},{{11,112},{0,2}},{{11,132},{2,0}},{{11,144},{0,2}},{{11,148},{2,0}},{{11,160},{0,2}},{{11,164},{2,0}},{{11,176},{0,2}},{{11,192},{0,2}},{{11,196},{1,1}},{{11,208},{0,2}},{{11,224},{0,2}},{{11,260},{1,2}},{{11,272},{0,2}},{{11,276},{2,0}},{{11,288},{0,2}},{{11,304},{0,2}},
{{11,320},{0,2}},{{11,324},{1,1}},{{11,336},{0,2}},{{11,352},{0,2}},{{11,384},{2,0}},{{11,388},{2,0}},{{11,400},{0,2}},{{11,416},{0,2}},{{12,1},{1,1}},{{12,2},{1,1}},{{12,3},{1,1}},{{12,16},{0,0}},{{12,17},{2,2}},{{12,18},{2,1}},{{12,32},{0,0}},{{12,33},{0,1}},{{12,34},{2,0}},{{12,48},{0,0}},{{12,64},{1,1}},{{12,65},{1,2}},{{12,66},{1,2}},{{12,80},{0,0}},{{12,96},{0,0}},{{12,128},{1,1}},{{12,129},{1,1}},{{12,130},{1,1}},{{12,144},{0,1}},{{12,160},{0,0}},{{12,192},{2,2}},{{12,256},{2,0}},{{12,257},{1,1}},{{12,258},{1,1}},{{12,272},{0,0}},{{12,288},{0,0}},{{12,320},{2,1}},{{12,384},{2,0}},{{13,18},{2,1}},{{13,34},{2,0}},{{13,48},{0,1}},{{13,50},{2,0}},{{13,66},{2,1}},{{13,80},{0,1}},{{13,82},{2,1}},{{13,96},{0,1}},{{13,98},{1,1}},{{13,112},{0,1}},{{13,130},{1,1}},{{13,144},{0,1}},{{13,160},{0,1}},{{13,162},{1,1}},{{13,176},{0,1}},{{13,192},{0,1}},{{13,194},{1,1}},{{13,208},{0,1}},{{13,224},{0,1}},{{13,258},{2,0}},{{13,272},{0,1}},{{13,274},{2,0}},{{13,288},{0,1}},{{13,290},{2,0}},{{13,304},{0,1}},{{13,320},{2,1}},{{13,322},{2,1}},{{13,336},{0,1}},{{13,352},{0,1}},{{13,384},{2,0}},{{13,386},{2,0}},{{13,400},{0,1}},{{13,416},{0,1}},{{14,17},{2,2}},{{14,33},{1,1}},{{14,48},{0,0}},{{14,49},{2,2}},{{14,65},{2,2}},{{14,80},{0,0}},{{14,81},{2,2}},{{14,96},{0,0}},{{14,97},{1,1}},{{14,112},{0,0}},{{14,129},{2,2}},{{14,144},{0,0}},{{14,145},{2,2}},{{14,160},{0,0}},{{14,161},{1,1}},{{14,176},{0,0}},{{14,192},{2,2}},{{14,193},{2,2}},{{14,208},{0,0}},{{14,224},{0,0}},{{14,257},{1,1}},{{14,272},{0,0}},{{14,288},{0,0}},{{14,289},{1,1}},{{14,304},{0,0}},{{14,320},{0,0}},{{14,321},{1,1}},{{14,336},{0,0}},{{14,352},{0,0}},{{14,384},{0,0}},{{14,385},{1,1}},
{{14,400},{0,0}},{{14,416},{0,0}},{{16,0},{0,0}},{{16,1},{0,1}},{{16,2},{0,0}},{{16,4},{0,0}},{{16,8},{0,0}},{{16,32},{0,0}},{{16,64},{0,0}},{{16,128},{0,0}},{{16,256},{0,0}},{{17,2},{0,2}},{{17,4},{2,2}},{{17,6},{1,0}},{{17,8},{0,1}},{{17,10},{0,2}},{{17,12},{0,1}},{{17,32},{0,1}},{{17,34},{0,2}},{{17,36},{2,2}},{{17,40},{0,1}},{{17,64},{2,2}},{{17,66},{1,0}},{{17,68},{0,1}},{{17,72},{0,1}},{{17,96},{0,1}},{{17,128},{0,1}},{{17,130},{0,2}},{{17,132},{1,0}},{{17,136},{0,1}},{{17,160},{0,1}},{{17,192},{2,2}},{{17,256},{0,2}},{{17,258},{1,0}},{{17,260},{1,2}},{{17,264},{0,1}},{{17,288},{0,2}},{{17,320},{2,1}},{{17,384},{2,0}},{{18,1},{2,1}},{{18,4},{2,1}},{{18,5},{1,0}},{{18,8},{0,0}},{{18,9},{2,0}},{{18,12},{0,0}},{{18,32},{0,0}},{{18,33},{0,2}},{{18,36},{2,1}},{{18,40},{0,0}},{{18,64},{2,1}},{{18,65},{1,0}},{{18,68},{0,0}},{{18,72},{0,0}},{{18,96},{0,0}},{{18,128},{0,0}},{{18,129},{1,0}},{{18,132},{1,0}},{{18,136},{0,0}},{{18,160},{0,0}},{{18,192},{2,2}},{{18,256},{2,1}},{{18,257},{0,2}},{{18,260},{1,2}},{{18,264},{0,0}},{{18,288},{0,2}},{{18,320},{2,1}},{{18,384},{2,0}},{{19,12},{1,2}},{{19,36},{2,2}},{{19,40},{0,2}},{{19,44},{2,1}},{{19,68},{1,0}},{{19,72},{0,2}},{{19,76},{1,2}},{{19,96},{0,2}},{{19,100},{2,1}},{{19,104},{0,2}},{{19,132},{2,2}},{{19,136},{0,2}},{{19,140},{2,2}},{{19,160},{0,2}},{{19,164},{2,2}},{{19,168},{0,2}},{{19,192},{2,2}},{{19,196},{2,2}},{{19,200},{0,2}},{{19,224},{0,2}},{{19,260},{1,2}},{{19,264},{0,2}},{{19,268},{2,1}},{{19,288},{0,2}},{{19,296},{0,2}},{{19,320},{2,1}},{{19,324},{2,1}},{{19,328},{0,2}},{{19,352},{0,2}},{{19,384},{0,2}},{{19,388},{1,0}},{{19,392},{0,2}},{{19,416},{0,2}},
{{20,1},{2,0}},{{20,2},{0,0}},{{20,3},{1,0}},{{20,8},{0,0}},{{20,9},{2,0}},{{20,10},{0,0}},{{20,32},{0,0}},{{20,33},{0,1}},{{20,34},{0,0}},{{20,40},{0,0}},{{20,64},{0,0}},{{20,65},{1,0}},{{20,66},{1,2}},{{20,72},{0,0}},{{20,96},{0,0}},{{20,128},{0,0}},{{20,129},{1,0}},{{20,130},{0,0}},{{20,136},{0,0}},{{20,160},{0,0}},{{20,192},{2,2}},{{20,256},{2,0}},{{20,257},{0,1}},{{20,258},{1,0}},{{20,264},{0,0}},{{20,288},{0,0}},{{20,320},{2,1}},{{20,384},{2,0}},{{21,10},{1,2}},{{21,34},{1,0}},{{21,40},{0,1}},{{21,42},{2,0}},{{21,66},{2,2}},{{21,72},{0,1}},{{21,74},{2,2}},{{21,96},{0,1}},{{21,98},{2,2}},{{21,104},{0,1}},{{21,130},{1,0}},{{21,136},{0,1}},{{21,138},{1,2}},{{21,160},{0,1}},{{21,162},{1,0}},{{21,168},{0,1}},{{21,192},{2,2}},{{21,194},{2,2}},{{21,200},{0,1}},{{21,224},{0,1}},{{21,258},{2,0}},{{21,264},{0,1}},{{21,266},{2,0}},{{21,288},{0,1}},{{21,290},{2,0}},{{21,296},{0,1}},{{21,320},{2,1}},{{21,322},{2,1}},{{21,328},{0,1}},{{21,352},{0,1}},{{21,384},{2,0}},{{21,386},{2,0}},{{21,392},{0,1}},{{21,416},{0,1}},{{22,9},{2,0}},{{22,33},{1,0}},{{22,40},{0,0}},{{22,41},{2,0}},{{22,65},{1,0}},{{22,72},{0,0}},{{22,96},{0,0}},{{22,97},{2,1}},{{22,104},{0,0}},{{22,129},{2,0}},{{22,136},{0,0}},{{22,137},{2,0}},{{22,160},{0,0}},{{22,161},{2,0}},{{22,168},{0,0}},{{22,192},{0,0}},{{22,193},{1,0}},{{22,200},{0,0}},{{22,224},{0,0}},{{22,257},{1,0}},{{22,264},{0,0}},{{22,265},{2,0}},{{22,288},{0,0}},{{22,289},{1,0}},{{22,296},{0,0}},{{22,320},{2,1}},{{22,321},{2,1}},{{22,328},{0,0}},{{22,352},{0,0}},{{22,384},{2,0}},{{22,385},{2,0}},{{22,392},{0,0}},{{22,416},{0,0}},{{24,1},{1,2}},{{24,2},{0,0}},{{24,3},{0,2}},{{24,4},{1,2}},{{24,5},{0,1}},
{{24,6},{0,0}},{{24,32},{0,0}},{{24,33},{0,1}},{{24,34},{0,0}},{{24,36},{2,2}},{{24,64},{1,2}},{{24,65},{0,1}},{{24,66},{0,0}},{{24,68},{0,0}},{{24,96},{0,1}},{{24,128},{0,0}},{{24,129},{0,2}},{{24,130},{0,0}},{{24,132},{0,0}},{{24,160},{0,0}},{{24,192},{1,2}},{{24,256},{1,2}},{{24,257},{0,1}},{{24,258},{0,0}},{{24,260},{1,2}},{{24,288},{0,2}},{{24,320},{1,2}},{{24,384},{1,2}},{{25,6},{1,2}},{{25,34},{0,2}},{{25,36},{2,2}},{{25,38},{2,0}},{{25,66},{0,2}},{{25,68},{0,1}},{{25,70},{1,2}},{{25,96},{2,2}},{{25,98},{2,2}},{{25,100},{2,2}},{{25,130},{0,2}},{{25,132},{0,1}},{{25,134},{1,2}},{{25,160},{0,1}},{{25,162},{0,2}},{{25,164},{2,0}},{{25,192},{2,2}},{{25,194},{1,2}},{{25,196},{1,2}},{{25,224},{2,2}},{{25,258},{0,2}},{{25,260},{1,2}},{{25,262},{1,2}},{{25,288},{0,2}},{{25,290},{2,0}},{{25,320},{1,2}},{{25,322},{1,2}},{{25,324},{1,2}},{{25,352},{0,1}},{{25,384},{2,0}},{{25,386},{1,2}},{{25,388},{1,2}},{{25,416},{2,0}},{{26,5},{1,2}},{{26,33},{2,1}},{{26,36},{2,2}},{{26,37},{2,1}},{{26,65},{0,2}},{{26,68},{0,0}},{{26,69},{1,2}},{{26,96},{2,1}},{{26,97},{2,1}},{{26,100},{2,1}},{{26,129},{1,2}},{{26,132},{1,2}},{{26,133},{1,2}},{{26,160},{2,2}},{{26,161},{0,2}},{{26,164},{2,2}},{{26,192},{2,2}},{{26,193},{1,2}},{{26,196},{1,2}},{{26,224},{2,2}},{{26,257},{0,2}},{{26,260},{1,2}},{{26,261},{1,2}},{{26,288},{0,2}},{{26,289},{0,2}},{{26,320},{2,1}},{{26,321},{1,2}},{{26,324},{1,2}},{{26,352},{2,1}},{{26,384},{1,2}},{{26,385},{1,2}},{{26,388},{1,2}},{{26,416},{0,0}},{{27,100},{2,2}},{{27,164},{2,2}},{{27,196},{2,2}},{{27,224},{2,2}},{{27,228},{2,2}},{{27,324},{1,2}},{{27,352},{0,2}},{{27,388},{1,2}},{{27,416},{0,2}},{{28,3},{1,2}},{{28,33},{2,0}},
{{28,34},{2,0}},{{28,35},{2,0}},{{28,65},{1,2}},{{28,66},{1,2}},{{28,67},{1,2}},{{28,96},{0,0}},{{28,97},{0,1}},{{28,98},{0,0}},{{28,129},{0,1}},{{28,130},{0,0}},{{28,131},{1,2}},{{28,160},{2,0}},{{28,161},{2,0}},{{28,162},{0,0}},{{28,192},{2,2}},{{28,193},{1,2}},{{28,194},{1,2}},{{28,224},{2,2}},{{28,257},{0,1}},{{28,258},{0,0}},{{28,259},{1,2}},{{28,288},{2,0}},{{28,289},{0,1}},{{28,290},{2,0}},{{28,320},{2,1}},{{28,321},{1,2}},{{28,322},{1,2}},{{28,352},{2,1}},{{28,384},{2,0}},{{28,385},{1,2}},{{28,386},{1,2}},{{28,416},{2,0}},{{29,98},{2,2}},{{29,162},{2,0}},{{29,194},{2,2}},{{29,224},{2,2}},{{29,226},{2,2}},{{29,290},{2,0}},{{29,322},{2,1}},{{29,352},{2,1}},{{29,354},{2,1}},{{29,386},{2,0}},{{29,416},{2,0}},{{29,418},{2,0}},{{30,97},{2,1}},{{30,161},{2,0}},{{30,193},{2,2}},{{30,224},{2,2}},{{30,225},{2,2}},{{30,289},{2,0}},{{30,321},{2,1}},{{30,352},{2,1}},{{30,353},{2,1}},{{30,385},{2,0}},{{30,416},{2,0}},{{30,417},{2,0}},{{32,0},{0,2}},{{32,1},{0,2}},{{32,2},{0,2}},{{32,4},{0,0}},{{32,8},{0,0}},{{32,16},{0,0}},{{32,64},{2,2}},{{32,128},{1,1}},{{32,256},{0,0}},{{33,2},{1,1}},{{33,4},{1,0}},{{33,6},{1,0}},{{33,8},{0,2}},{{33,10},{2,2}},{{33,12},{0,1}},{{33,16},{0,1}},{{33,18},{2,1}},{{33,20},{2,0}},{{33,24},{0,2}},{{33,64},{2,2}},{{33,66},{1,1}},{{33,68},{1,1}},{{33,72},{0,1}},{{33,80},{0,2}},{{33,128},{1,1}},{{33,130},{1,1}},{{33,132},{1,0}},{{33,136},{0,2}},{{33,144},{0,1}},{{33,192},{2,2}},{{33,256},{1,0}},{{33,258},{1,0}},{{33,260},{1,0}},{{33,264},{0,1}},{{33,272},{0,1}},{{33,320},{2,1}},{{33,384},{2,0}},{{34,1},{2,0}},{{34,4},{1,0}},{{34,5},{1,1}},{{34,8},{0,2}},{{34,9},{2,0}},{{34,12},{0,0}},{{34,16},{0,0}},
{{34,17},{2,2}},{{34,20},{2,0}},{{34,24},{0,2}},{{34,64},{0,0}},{{34,65},{0,2}},{{34,68},{1,1}},{{34,72},{0,0}},{{34,80},{0,2}},{{34,128},{0,0}},{{34,129},{1,0}},{{34,132},{1,0}},{{34,136},{0,2}},{{34,144},{0,2}},{{34,192},{2,2}},{{34,256},{2,0}},{{34,257},{1,1}},{{34,260},{1,1}},{{34,264},{0,0}},{{34,272},{0,0}},{{34,320},{0,0}},{{34,384},{2,0}},{{35,12},{1,1}},{{35,20},{2,0}},{{35,24},{0,2}},{{35,28},{2,0}},{{35,68},{1,1}},{{35,72},{0,2}},{{35,76},{1,1}},{{35,80},{0,2}},{{35,88},{0,2}},{{35,132},{2,0}},{{35,136},{0,2}},{{35,140},{1,1}},{{35,144},{0,2}},{{35,148},{2,0}},{{35,152},{0,2}},{{35,192},{0,2}},{{35,196},{1,0}},{{35,200},{0,2}},{{35,208},{0,2}},{{35,260},{2,0}},{{35,264},{0,2}},{{35,268},{1,1}},{{35,272},{0,2}},{{35,276},{2,0}},{{35,280},{0,2}},{{35,320},{0,2}},{{35,324},{1,0}},{{35,328},{0,2}},{{35,336},{0,2}},{{35,384},{2,0}},{{35,388},{2,0}},{{35,392},{0,2}},{{35,400},{0,2}},{{36,1},{0,1}},{{36,2},{0,0}},{{36,3},{1,0}},{{36,8},{2,2}},{{36,9},{2,0}},{{36,10},{1,1}},{{36,16},{2,2}},{{36,17},{2,2}},{{36,18},{2,2}},{{36,24},{0,0}},{{36,64},{2,2}},{{36,65},{1,0}},{{36,66},{1,0}},{{36,72},{0,0}},{{36,80},{0,0}},{{36,128},{2,2}},{{36,129},{1,0}},{{36,130},{1,1}},{{36,136},{0,0}},{{36,144},{0,1}},{{36,192},{2,2}},{{36,256},{2,0}},{{36,257},{1,1}},{{36,258},{1,1}},{{36,264},{0,0}},{{36,272},{0,0}},{{36,320},{0,0}},{{36,384},{0,0}},{{37,10},{2,2}},{{37,18},{2,1}},{{37,24},{0,1}},{{37,26},{2,2}},{{37,66},{2,2}},{{37,72},{0,1}},{{37,74},{2,2}},{{37,80},{0,1}},{{37,82},{2,2}},{{37,88},{0,1}},{{37,130},{1,1}},{{37,136},{0,1}},{{37,138},{1,1}},{{37,144},{0,1}},{{37,152},{0,1}},{{37,192},{2,2}},{{37,194},{2,2}},{{37,200},{0,1}},
{{37,208},{0,1}},{{37,258},{2,1}},{{37,264},{0,1}},{{37,266},{1,1}},{{37,272},{0,1}},{{37,274},{2,1}},{{37,280},{0,1}},{{37,320},{2,1}},{{37,322},{2,1}},{{37,328},{0,1}},{{37,336},{0,1}},{{37,384},{0,1}},{{37,386},{1,0}},{{37,392},{0,1}},{{37,400},{0,1}},{{38,9},{2,0}},{{38,17},{2,2}},{{38,24},{0,0}},{{38,25},{2,2}},{{38,65},{1,0}},{{38,72},{0,0}},{{38,80},{0,0}},{{38,81},{2,2}},{{38,88},{0,0}},{{38,129},{2,2}},{{38,136},{0,0}},{{38,137},{2,0}},{{38,144},{0,0}},{{38,145},{2,2}},{{38,152},{0,0}},{{38,192},{2,2}},{{38,193},{2,2}},{{38,200},{0,0}},{{38,208},{0,0}},{{38,257},{1,0}},{{38,264},{0,0}},{{38,265},{1,1}},{{38,272},{0,0}},{{38,280},{0,0}},{{38,320},{0,0}},{{38,321},{1,0}},{{38,328},{0,0}},{{38,336},{0,0}},{{38,384},{0,0}},{{38,385},{1,0}},{{38,392},{0,0}},{{38,400},{0,0}},{{40,1},{1,1}},{{40,2},{1,1}},{{40,3},{0,2}},{{40,4},{1,1}},{{40,5},{1,1}},{{40,6},{0,0}},{{40,16},{0,0}},{{40,17},{0,1}},{{40,18},{0,0}},{{40,20},{0,0}},{{40,64},{1,1}},{{40,65},{0,2}},{{40,66},{0,2}},{{40,68},{1,1}},{{40,80},{0,0}},{{40,128},{1,1}},{{40,129},{0,2}},{{40,130},{1,1}},{{40,132},{0,0}},{{40,144},{0,0}},{{40,192},{1,1}},{{40,256},{1,1}},{{40,257},{1,1}},{{40,258},{0,0}},{{40,260},{0,0}},{{40,272},{0,0}},{{40,320},{1,1}},{{40,384},{1,1}},{{41,6},{1,1}},{{41,18},{2,0}},{{41,20},{2,0}},{{41,22},{2,0}},{{41,66},{1,1}},{{41,68},{1,1}},{{41,70},{1,1}},{{41,80},{0,1}},{{41,82},{0,2}},{{41,130},{1,1}},{{41,132},{0,1}},{{41,134},{1,1}},{{41,144},{0,1}},{{41,148},{2,0}},{{41,192},{1,1}},{{41,194},{1,1}},{{41,196},{1,1}},{{41,208},{0,1}},{{41,258},{0,2}},{{41,260},{0,1}},{{41,262},{1,1}},{{41,272},{2,0}},{{41,274},{2,0}},{{41,276},{2,0}},{{41,320},{1,1}},
{{41,322},{1,1}},{{41,324},{1,1}},{{41,336},{0,1}},{{41,384},{2,0}},{{41,386},{1,1}},{{41,388},{1,1}},{{41,400},{2,0}},{{42,5},{1,1}},{{42,17},{0,2}},{{42,20},{0,0}},{{42,21},{2,0}},{{42,65},{1,1}},{{42,68},{1,1}},{{42,69},{1,1}},{{42,80},{0,0}},{{42,81},{0,2}},{{42,129},{1,1}},{{42,132},{1,1}},{{42,133},{1,1}},{{42,144},{2,0}},{{42,145},{2,2}},{{42,148},{2,0}},{{42,192},{1,1}},{{42,193},{1,1}},{{42,196},{1,1}},{{42,208},{0,0}},{{42,257},{1,1}},{{42,260},{1,1}},{{42,261},{1,1}},{{42,272},{0,0}},{{42,276},{0,0}},{{42,320},{1,1}},{{42,321},{1,1}},{{42,324},{1,1}},{{42,336},{0,0}},{{42,384},{1,1}},{{42,385},{1,1}},{{42,388},{1,1}},{{42,400},{0,0}},{{43,148},{2,0}},{{43,196},{1,1}},{{43,208},{0,2}},{{43,276},{2,0}},{{43,324},{1,1}},{{43,336},{0,2}},{{43,388},{2,0}},{{43,400},{2,0}},{{43,404},{2,0}},{{44,3},{1,1}},{{44,17},{2,2}},{{44,18},{2,1}},{{44,19},{2,2}},{{44,65},{0,1}},{{44,66},{0,0}},{{44,67},{1,1}},{{44,80},{2,2}},{{44,81},{2,2}},{{44,82},{2,2}},{{44,129},{0,1}},{{44,130},{1,1}},{{44,131},{1,1}},{{44,144},{0,1}},{{44,145},{2,2}},{{44,192},{2,2}},{{44,193},{1,1}},{{44,194},{1,1}},{{44,208},{2,2}},{{44,257},{1,1}},{{44,258},{1,1}},{{44,259},{1,1}},{{44,272},{0,0}},{{44,274},{0,0}},{{44,320},{1,1}},{{44,321},{1,1}},{{44,322},{1,1}},{{44,336},{0,0}},{{44,384},{1,1}},{{44,385},{1,1}},{{44,386},{1,1}},{{44,400},{0,0}},{{45,82},{2,1}},{{45,194},{1,1}},{{45,208},{0,1}},{{45,274},{2,1}},{{45,322},{2,1}},{{45,336},{2,1}},{{45,338},{2,1}},{{45,386},{1,1}},{{45,400},{0,1}},{{46,81},{2,2}},{{46,145},{2,2}},{{46,193},{2,2}},{{46,208},{2,2}},{{46,209},{2,2}},{{46,321},{1,1}},{{46,336},{0,0}},{{46,385},{1,1}},{{46,400},{0,0}},{{48,1},{1,0}},{{48,2},{0,0}},
{{48,3},{0,2}},{{48,4},{1,0}},{{48,5},{0,1}},{{48,6},{0,0}},{{48,8},{0,0}},{{48,9},{2,0}},{{48,10},{0,2}},{{48,12},{0,0}},{{48,64},{1,0}},{{48,65},{1,0}},{{48,66},{0,0}},{{48,68},{0,0}},{{48,72},{0,0}},{{48,128},{0,0}},{{48,129},{0,2}},{{48,130},{0,0}},{{48,132},{0,0}},{{48,136},{0,2}},{{48,192},{1,0}},{{48,256},{1,0}},{{48,257},{0,1}},{{48,258},{0,2}},{{48,260},{0,1}},{{48,264},{0,0}},{{48,320},{1,0}},{{48,384},{1,0}},{{49,6},{1,0}},{{49,10},{2,2}},{{49,12},{2,2}},{{49,14},{2,2}},{{49,66},{0,2}},{{49,68},{0,1}},{{49,70},{1,0}},{{49,72},{2,2}},{{49,74},{2,2}},{{49,76},{0,1}},{{49,130},{0,2}},{{49,132},{0,1}},{{49,134},{1,0}},{{49,136},{2,2}},{{49,138},{0,2}},{{49,140},{2,2}},{{49,192},{2,2}},{{49,194},{1,0}},{{49,196},{1,0}},{{49,200},{2,2}},{{49,258},{1,0}},{{49,260},{1,0}},{{49,262},{1,0}},{{49,264},{0,1}},{{49,266},{0,2}},{{49,268},{0,1}},{{49,320},{2,1}},{{49,322},{1,0}},{{49,324},{1,0}},{{49,328},{2,1}},{{49,384},{2,0}},{{49,386},{1,0}},{{49,388},{1,0}},{{49,392},{2,0}},{{50,5},{1,0}},{{50,9},{2,0}},{{50,12},{2,1}},{{50,13},{2,1}},{{50,65},{1,0}},{{50,68},{0,0}},{{50,69},{1,0}},{{50,72},{0,0}},{{50,76},{0,0}},{{50,129},{1,0}},{{50,132},{1,0}},{{50,133},{1,0}},{{50,136},{2,0}},{{50,137},{2,0}},{{50,140},{0,0}},{{50,192},{1,0}},{{50,193},{1,0}},{{50,196},{1,0}},{{50,200},{0,0}},{{50,257},{0,2}},{{50,260},{0,0}},{{50,261},{1,0}},{{50,264},{2,1}},{{50,265},{2,0}},{{50,268},{2,1}},{{50,320},{2,1}},{{50,321},{1,0}},{{50,324},{1,0}},{{50,328},{2,1}},{{50,384},{2,0}},{{50,385},{1,0}},{{50,388},{1,0}},{{50,392},{2,0}},{{51,76},{2,1}},{{51,140},{2,2}},{{51,196},{2,2}},{{51,200},{2,2}},{{51,204},{2,2}},{{51,268},{2,1}},{{51,324},{2,1}},
{{51,328},{2,1}},{{51,332},{2,1}},{{51,388},{2,0}},{{51,392},{2,0}},{{51,396},{2,0}},{{52,3},{1,0}},{{52,9},{2,0}},{{52,10},{0,0}},{{52,11},{2,0}},{{52,65},{1,0}},{{52,66},{0,0}},{{52,67},{1,0}},{{52,72},{0,0}},{{52,74},{2,2}},{{52,129},{0,1}},{{52,130},{0,0}},{{52,131},{1,0}},{{52,136},{0,0}},{{52,137},{2,0}},{{52,138},{0,0}},{{52,192},{2,2}},{{52,193},{1,0}},{{52,194},{1,0}},{{52,200},{2,2}},{{52,257},{0,1}},{{52,258},{0,0}},{{52,259},{1,0}},{{52,264},{2,0}},{{52,265},{2,0}},{{52,266},{2,0}},{{52,320},{1,0}},{{52,321},{1,0}},{{52,322},{1,0}},{{52,328},{0,0}},{{52,384},{2,0}},{{52,385},{1,0}},{{52,386},{1,0}},{{52,392},{2,0}},{{53,74},{2,2}},{{53,138},{2,0}},{{53,194},{2,2}},{{53,200},{2,2}},{{53,202},{2,2}},{{53,266},{2,0}},{{53,322},{2,1}},{{53,328},{2,1}},{{53,330},{2,1}},{{53,386},{2,0}},{{53,392},{2,0}},{{53,394},{2,0}},{{54,137},{2,0}},{{54,193},{1,0}},{{54,200},{0,0}},{{54,265},{2,0}},{{54,321},{1,0}},{{54,328},{0,0}},{{54,385},{2,0}},{{54,392},{2,0}},{{54,393},{2,0}},{{64,0},{1,1}},{{64,1},{0,2}},{{64,2},{0,0}},{{64,4},{0,0}},{{64,8},{1,1}},{{64,16},{0,0}},{{64,32},{0,0}},{{64,128},{0,0}},{{64,256},{0,0}},{{65,2},{0,2}},{{65,4},{0,1}},{{65,6},{1,0}},{{65,8},{1,1}},{{65,10},{1,1}},{{65,12},{2,2}},{{65,16},{1,0}},{{65,18},{1,0}},{{65,20},{1,0}},{{65,24},{1,2}},{{65,32},{0,1}},{{65,34},{0,2}},{{65,36},{1,0}},{{65,40},{1,1}},{{65,48},{1,0}},{{65,128},{0,1}},{{65,130},{1,0}},{{65,132},{1,0}},{{65,136},{0,2}},{{65,144},{0,1}},{{65,160},{0,1}},{{65,256},{0,1}},{{65,258},{0,2}},{{65,260},{1,0}},{{65,264},{0,2}},{{65,272},{0,1}},{{65,288},{0,2}},{{65,384},{0,1}},{{66,1},{1,1}},{{66,4},{1,1}},{{66,5},{2,1}},{{66,8},{1,1}},
{{66,9},{1,1}},{{66,12},{2,1}},{{66,16},{0,0}},{{66,17},{2,2}},{{66,20},{0,0}},{{66,24},{1,2}},{{66,32},{1,1}},{{66,33},{1,1}},{{66,36},{2,2}},{{66,40},{1,1}},{{66,48},{1,0}},{{66,128},{0,0}},{{66,129},{0,2}},{{66,132},{0,0}},{{66,136},{0,2}},{{66,144},{0,0}},{{66,160},{0,0}},{{66,256},{0,2}},{{66,257},{1,1}},{{66,260},{1,2}},{{66,264},{0,2}},{{66,272},{0,0}},{{66,288},{0,2}},{{66,384},{0,0}},{{67,12},{1,2}},{{67,20},{1,0}},{{67,24},{1,2}},{{67,28},{1,2}},{{67,36},{1,0}},{{67,40},{0,2}},{{67,44},{1,1}},{{67,48},{1,0}},{{67,52},{1,0}},{{67,132},{1,0}},{{67,136},{0,2}},{{67,140},{1,1}},{{67,144},{0,2}},{{67,148},{1,0}},{{67,152},{0,2}},{{67,160},{0,2}},{{67,164},{1,0}},{{67,168},{0,2}},{{67,176},{0,2}},{{67,260},{1,2}},{{67,264},{0,2}},{{67,268},{1,2}},{{67,272},{0,2}},{{67,276},{1,0}},{{67,280},{0,2}},{{67,288},{0,2}},{{67,296},{0,2}},{{67,304},{0,2}},{{67,384},{0,2}},{{67,388},{1,0}},{{67,392},{0,2}},{{67,400},{0,2}},{{67,416},{0,2}},{{68,1},{0,1}},{{68,2},{1,1}},{{68,3},{1,1}},{{68,8},{1,1}},{{68,9},{1,1}},{{68,10},{1,1}},{{68,16},{0,1}},{{68,17},{2,2}},{{68,18},{2,1}},{{68,24},{1,2}},{{68,32},{1,1}},{{68,33},{1,1}},{{68,34},{0,0}},{{68,40},{1,1}},{{68,48},{1,0}},{{68,128},{1,1}},{{68,129},{1,1}},{{68,130},{1,1}},{{68,136},{0,0}},{{68,144},{0,1}},{{68,160},{0,0}},{{68,256},{0,0}},{{68,257},{1,1}},{{68,258},{0,0}},{{68,264},{0,0}},{{68,272},{0,0}},{{68,288},{0,0}},{{68,384},{0,0}},{{69,10},{1,1}},{{69,18},{1,0}},{{69,24},{0,1}},{{69,26},{1,2}},{{69,34},{1,0}},{{69,40},{1,1}},{{69,42},{1,1}},{{69,48},{1,0}},{{69,50},{1,0}},{{69,130},{1,1}},{{69,136},{0,1}},{{69,138},{1,1}},{{69,144},{0,1}},{{69,152},{0,1}},{{69,160},{0,1}},
{{69,162},{1,0}},{{69,168},{0,1}},{{69,176},{0,1}},{{69,258},{1,0}},{{69,264},{0,1}},{{69,266},{1,1}},{{69,272},{0,1}},{{69,274},{1,0}},{{69,280},{0,1}},{{69,288},{0,1}},{{69,290},{1,0}},{{69,296},{0,1}},{{69,304},{0,1}},{{69,384},{0,1}},{{69,386},{1,0}},{{69,392},{0,1}},{{69,400},{0,1}},{{69,416},{0,1}},{{70,9},{1,1}},{{70,17},{1,0}},{{70,24},{0,0}},{{70,25},{1,2}},{{70,33},{1,1}},{{70,40},{1,1}},{{70,41},{1,1}},{{70,48},{0,0}},{{70,49},{1,0}},{{70,129},{1,1}},{{70,136},{0,0}},{{70,137},{1,1}},{{70,144},{0,0}},{{70,145},{2,2}},{{70,152},{0,0}},{{70,160},{0,0}},{{70,161},{1,1}},{{70,168},{0,0}},{{70,176},{0,0}},{{70,257},{1,1}},{{70,264},{0,0}},{{70,265},{1,1}},{{70,272},{0,0}},{{70,280},{0,0}},{{70,288},{0,0}},{{70,289},{1,1}},{{70,296},{0,0}},{{70,304},{0,0}},{{70,384},{0,0}},{{70,385},{1,1}},{{70,392},{0,0}},{{70,400},{0,0}},{{70,416},{0,0}},{{72,1},{0,1}},{{72,2},{0,0}},{{72,3},{0,2}},{{72,4},{0,0}},{{72,5},{0,1}},{{72,6},{0,0}},{{72,16},{0,0}},{{72,17},{2,2}},{{72,18},{0,0}},{{72,20},{0,0}},{{72,32},{0,0}},{{72,33},{0,2}},{{72,34},{0,0}},{{72,36},{0,0}},{{72,48},{0,0}},{{72,128},{0,0}},{{72,129},{1,1}},{{72,130},{0,0}},{{72,132},{0,0}},{{72,144},{0,0}},{{72,160},{0,0}},{{72,256},{0,0}},{{72,257},{1,1}},{{72,258},{0,0}},{{72,260},{0,0}},{{72,272},{0,0}},{{72,288},{0,0}},{{72,384},{0,0}},{{74,5},{2,2}},{{74,17},{2,2}},{{74,20},{0,0}},{{74,21},{2,2}},{{74,33},{2,2}},{{74,36},{2,2}},{{74,37},{2,2}},{{74,48},{0,0}},{{74,49},{2,2}},{{74,52},{0,0}},{{74,129},{0,2}},{{74,132},{0,0}},{{74,133},{1,1}},{{74,144},{0,0}},{{74,145},{2,2}},{{74,148},{0,0}},{{74,160},{0,0}},{{74,161},{0,2}},{{74,164},{0,0}},{{74,176},{0,0}},{{74,257},{0,2}},
{{74,260},{0,0}},{{74,261},{1,1}},{{74,272},{0,0}},{{74,276},{0,0}},{{74,288},{0,0}},{{74,289},{0,2}},{{74,304},{0,0}},{{74,384},{0,0}},{{74,385},{1,1}},{{74,388},{0,0}},{{74,400},{0,0}},{{74,416},{0,0}},{{76,3},{1,1}},{{76,17},{0,1}},{{76,18},{0,0}},{{76,19},{1,2}},{{76,33},{1,1}},{{76,34},{0,0}},{{76,35},{1,1}},{{76,48},{0,0}},{{76,49},{2,2}},{{76,50},{0,0}},{{76,129},{1,1}},{{76,130},{1,1}},{{76,131},{1,1}},{{76,144},{0,0}},{{76,145},{0,1}},{{76,160},{0,0}},{{76,161},{1,1}},{{76,162},{0,0}},{{76,176},{0,0}},{{76,257},{1,1}},{{76,258},{0,0}},{{76,259},{1,1}},{{76,272},{0,0}},{{76,274},{0,0}},{{76,288},{0,0}},{{76,289},{1,1}},{{76,290},{0,0}},{{76,304},{0,0}},{{76,384},{0,0}},{{76,385},{1,1}},{{76,386},{0,0}},{{76,400},{0,0}},{{76,416},{0,0}},{{78,49},{2,2}},{{78,145},{2,2}},{{78,161},{1,1}},{{78,176},{0,0}},{{78,177},{2,2}},{{78,289},{1,1}},{{78,304},{0,0}},{{78,385},{1,1}},{{78,400},{0,0}},{{78,416},{0,0}},{{78,417},{1,1}},{{78,432},{0,0}},{{80,1},{0,2}},{{80,2},{0,0}},{{80,3},{0,2}},{{80,4},{0,0}},{{80,5},{0,1}},{{80,6},{0,0}},{{80,8},{0,0}},{{80,9},{0,1}},{{80,10},{0,0}},{{80,12},{2,1}},{{80,32},{0,0}},{{80,33},{0,1}},{{80,34},{0,0}},{{80,36},{2,2}},{{80,40},{0,0}},{{80,128},{0,0}},{{80,129},{0,2}},{{80,130},{0,0}},{{80,132},{0,0}},{{80,136},{0,0}},{{80,160},{0,0}},{{80,256},{0,2}},{{80,257},{0,1}},{{80,258},{0,0}},{{80,260},{1,2}},{{80,264},{0,1}},{{80,288},{0,2}},{{80,384},{0,0}},{{81,6},{1,0}},{{81,10},{0,2}},{{81,12},{2,2}},{{81,14},{2,2}},{{81,34},{0,2}},{{81,36},{2,2}},{{81,38},{1,0}},{{81,40},{0,1}},{{81,42},{0,2}},{{81,44},{2,2}},{{81,130},{0,2}},{{81,132},{0,1}},{{81,134},{1,0}},{{81,136},{0,1}},{{81,138},{0,2}},
{{81,140},{2,2}},{{81,160},{0,1}},{{81,162},{0,2}},{{81,164},{1,0}},{{81,168},{0,1}},{{81,258},{0,2}},{{81,260},{1,2}},{{81,262},{1,0}},{{81,264},{0,2}},{{81,266},{0,2}},{{81,268},{1,2}},{{81,288},{0,2}},{{81,290},{0,2}},{{81,296},{0,2}},{{81,384},{0,1}},{{81,386},{0,2}},{{81,388},{1,0}},{{81,392},{0,2}},{{81,416},{0,2}},{{82,5},{2,1}},{{82,9},{0,2}},{{82,12},{2,1}},{{82,13},{2,1}},{{82,33},{0,2}},{{82,36},{2,2}},{{82,37},{2,1}},{{82,40},{0,0}},{{82,41},{0,2}},{{82,44},{2,1}},{{82,129},{0,2}},{{82,132},{0,0}},{{82,133},{1,0}},{{82,136},{0,2}},{{82,137},{0,2}},{{82,140},{0,0}},{{82,160},{0,2}},{{82,161},{0,2}},{{82,164},{2,2}},{{82,168},{0,0}},{{82,257},{0,2}},{{82,260},{1,2}},{{82,261},{1,2}},{{82,264},{0,0}},{{82,265},{0,2}},{{82,268},{2,1}},{{82,288},{0,2}},{{82,289},{0,2}},{{82,296},{0,2}},{{82,384},{0,2}},{{82,385},{0,2}},{{82,388},{1,2}},{{82,392},{0,2}},{{82,416},{0,2}},{{83,44},{2,2}},{{83,140},{2,2}},{{83,164},{2,2}},{{83,168},{0,2}},{{83,172},{2,2}},{{83,268},{1,2}},{{83,296},{0,2}},{{83,388},{1,2}},{{83,392},{0,2}},{{83,396},{1,2}},{{83,416},{0,2}},{{83,424},{0,2}},{{88,3},{0,2}},{{88,5},{0,1}},{{88,6},{0,0}},{{88,33},{0,2}},{{88,34},{0,0}},{{88,35},{0,2}},{{88,36},{0,0}},{{88,37},{0,1}},{{88,38},{0,0}},{{88,129},{0,1}},{{88,130},{0,0}},{{88,131},{0,2}},{{88,132},{0,0}},{{88,133},{1,2}},{{88,134},{0,0}},{{88,160},{0,0}},{{88,161},{0,2}},{{88,162},{0,0}},{{88,164},{0,0}},{{88,257},{0,1}},{{88,258},{0,0}},{{88,259},{0,2}},{{88,260},{1,2}},{{88,261},{1,2}},{{88,262},{0,0}},{{88,288},{0,2}},{{88,289},{0,2}},{{88,290},{0,0}},{{88,384},{0,0}},{{88,385},{0,1}},{{88,386},{0,0}},{{88,388},{0,0}},{{88,416},{0,0}},{{90,37},{2,2}},{{90,133},{1,2}},
{{90,161},{0,2}},{{90,164},{2,2}},{{90,165},{2,2}},{{90,261},{1,2}},{{90,289},{0,2}},{{90,385},{0,2}},{{90,388},{1,2}},{{90,389},{1,2}},{{90,416},{0,2}},{{90,417},{0,2}},{{96,1},{0,2}},{{96,2},{1,1}},{{96,3},{0,2}},{{96,4},{0,0}},{{96,5},{0,1}},{{96,6},{0,0}},{{96,8},{0,2}},{{96,9},{0,1}},{{96,10},{0,2}},{{96,12},{0,0}},{{96,16},{0,1}},{{96,17},{2,2}},{{96,18},{2,1}},{{96,20},{0,0}},{{96,24},{2,2}},{{96,128},{1,1}},{{96,129},{0,2}},{{96,130},{1,1}},{{96,132},{1,0}},{{96,136},{0,2}},{{96,144},{0,1}},{{96,256},{1,0}},{{96,257},{1,1}},{{96,258},{1,0}},{{96,260},{1,0}},{{96,264},{0,0}},{{96,272},{0,0}},{{96,384},{0,0}},{{97,6},{1,0}},{{97,10},{1,1}},{{97,12},{1,1}},{{97,14},{2,2}},{{97,18},{2,1}},{{97,20},{1,0}},{{97,22},{1,0}},{{97,24},{0,1}},{{97,26},{2,1}},{{97,28},{0,1}},{{97,130},{1,1}},{{97,132},{1,0}},{{97,134},{1,0}},{{97,136},{0,2}},{{97,138},{1,1}},{{97,140},{0,1}},{{97,144},{0,1}},{{97,148},{1,0}},{{97,152},{0,1}},{{97,258},{1,0}},{{97,260},{1,0}},{{97,262},{1,0}},{{97,264},{0,1}},{{97,266},{0,2}},{{97,268},{0,1}},{{97,272},{1,0}},{{97,274},{1,0}},{{97,276},{1,0}},{{97,280},{0,1}},{{97,384},{0,1}},{{97,386},{1,0}},{{97,388},{1,0}},{{97,392},{0,2}},{{97,400},{0,1}},{{98,5},{1,1}},{{98,9},{0,2}},{{98,12},{1,1}},{{98,13},{2,1}},{{98,17},{2,2}},{{98,20},{0,0}},{{98,21},{2,2}},{{98,24},{0,2}},{{98,25},{2,2}},{{98,28},{0,0}},{{98,129},{0,2}},{{98,132},{0,0}},{{98,133},{1,0}},{{98,136},{0,2}},{{98,137},{0,2}},{{98,140},{0,0}},{{98,144},{0,0}},{{98,145},{2,2}},{{98,148},{0,0}},{{98,152},{0,2}},{{98,257},{1,1}},{{98,260},{1,0}},{{98,261},{1,1}},{{98,264},{0,2}},{{98,265},{1,1}},{{98,268},{0,0}},{{98,272},{0,0}},{{98,276},{0,0}},
{{98,280},{0,0}},{{98,384},{0,0}},{{98,385},{1,1}},{{98,388},{1,0}},{{98,392},{0,2}},{{98,400},{0,0}},{{99,28},{2,1}},{{99,140},{1,1}},{{99,148},{1,0}},{{99,152},{0,2}},{{99,156},{2,2}},{{99,268},{1,1}},{{99,276},{1,0}},{{99,280},{0,2}},{{99,284},{2,1}},{{99,388},{1,0}},{{99,392},{0,2}},{{99,396},{1,1}},{{99,400},{0,2}},{{99,404},{1,0}},{{99,408},{0,2}},{{100,3},{1,0}},{{100,9},{0,1}},{{100,10},{0,0}},{{100,11},{1,1}},{{100,17},{2,2}},{{100,18},{2,1}},{{100,19},{2,2}},{{100,24},{2,2}},{{100,25},{2,2}},{{100,26},{2,2}},{{100,129},{0,1}},{{100,130},{1,1}},{{100,131},{1,1}},{{100,136},{0,0}},{{100,137},{0,1}},{{100,138},{1,1}},{{100,144},{0,1}},{{100,145},{2,2}},{{100,152},{0,1}},{{100,257},{1,1}},{{100,258},{1,1}},{{100,259},{1,1}},{{100,264},{1,1}},{{100,265},{1,1}},{{100,266},{1,1}},{{100,272},{0,0}},{{100,274},{0,0}},{{100,280},{0,0}},{{100,384},{1,1}},{{100,385},{1,1}},{{100,386},{1,1}},{{100,392},{0,0}},{{100,400},{0,0}},{{101,26},{2,1}},{{101,138},{1,1}},{{101,152},{0,1}},{{101,266},{1,1}},{{101,274},{2,1}},{{101,280},{0,1}},{{101,282},{2,1}},{{101,386},{1,1}},{{101,392},{0,1}},{{101,394},{1,1}},{{101,400},{0,1}},{{101,408},{0,1}},{{102,25},{2,2}},{{102,137},{1,1}},{{102,145},{2,2}},{{102,152},{0,0}},{{102,153},{2,2}},{{102,265},{1,1}},{{102,280},{0,0}},{{102,385},{1,1}},{{102,392},{0,0}},{{102,393},{1,1}},{{102,400},{0,0}},{{102,408},{0,0}},{{104,3},{0,2}},{{104,5},{0,1}},{{104,6},{0,0}},{{104,17},{0,1}},{{104,18},{0,0}},{{104,19},{0,2}},{{104,20},{0,0}},{{104,21},{0,1}},{{104,22},{0,0}},{{104,129},{1,1}},{{104,130},{1,1}},{{104,131},{1,1}},{{104,132},{0,0}},{{104,133},{1,1}},{{104,134},{0,0}},{{104,144},{0,0}},{{104,145},{0,1}},{{104,148},{0,0}},{{104,257},{1,1}},{{104,258},{0,0}},{{104,259},{1,1}},{{104,260},{0,0}},
{{104,261},{1,1}},{{104,262},{0,0}},{{104,272},{0,0}},{{104,274},{0,0}},{{104,276},{0,0}},{{104,384},{0,0}},{{104,385},{1,1}},{{104,386},{0,0}},{{104,388},{0,0}},{{104,400},{0,0}},{{106,21},{2,2}},{{106,133},{1,1}},{{106,145},{2,2}},{{106,148},{0,0}},{{106,149},{2,2}},{{106,261},{1,1}},{{106,276},{0,0}},{{106,385},{1,1}},{{106,388},{0,0}},{{106,389},{1,1}},{{106,400},{0,0}},{{106,404},{0,0}},{{108,19},{2,1}},{{108,131},{1,1}},{{108,145},{0,1}},{{108,259},{1,1}},{{108,274},{0,0}},{{108,385},{1,1}},{{108,386},{1,1}},{{108,387},{1,1}},{{108,400},{0,0}},{{112,3},{0,2}},{{112,5},{0,1}},{{112,6},{0,0}},{{112,9},{0,2}},{{112,10},{0,2}},{{112,11},{0,2}},{{112,12},{0,0}},{{112,13},{0,1}},{{112,14},{0,0}},{{112,129},{0,1}},{{112,130},{0,0}},{{112,131},{0,2}},{{112,132},{1,0}},{{112,133},{1,0}},{{112,134},{0,0}},{{112,136},{0,2}},{{112,137},{0,2}},{{112,138},{0,0}},{{112,140},{0,0}},{{112,257},{0,1}},{{112,258},{0,0}},{{112,259},{0,2}},{{112,260},{1,0}},{{112,261},{0,1}},{{112,262},{1,0}},{{112,264},{0,2}},{{112,265},{0,1}},{{112,266},{0,2}},{{112,268},{0,0}},{{112,384},{0,0}},{{112,385},{0,1}},{{112,386},{0,0}},{{112,388},{1,0}},{{112,392},{0,2}},{{113,14},{2,2}},{{113,134},{1,0}},{{113,138},{0,2}},{{113,140},{2,2}},{{113,142},{2,2}},{{113,262},{1,0}},{{113,266},{0,2}},{{113,268},{0,1}},{{113,270},{2,1}},{{113,386},{0,2}},{{113,388},{1,0}},{{113,390},{1,0}},{{113,392},{0,2}},{{113,394},{0,2}},{{113,396},{0,1}},{{114,13},{2,1}},{{114,133},{1,0}},{{114,137},{0,2}},{{114,140},{0,0}},{{114,141},{2,2}},{{114,261},{1,0}},{{114,265},{0,2}},{{114,268},{2,1}},{{114,269},{2,1}},{{114,385},{0,2}},{{114,388},{1,0}},{{114,389},{1,0}},{{114,392},{0,2}},{{114,393},{0,2}},{{114,396},{0,0}},{{128,0},{0,1}},{{128,1},{2,0}},{{128,2},{0,0}},{{128,4},{2,2}},{{128,8},{1,1}},
{{128,16},{0,0}},{{128,32},{1,1}},{{128,64},{0,0}},{{128,256},{0,0}},{{129,2},{2,0}},{{129,4},{2,2}},{{129,6},{1,0}},{{129,8},{1,1}},{{129,10},{2,2}},{{129,12},{1,1}},{{129,16},{1,0}},{{129,18},{2,0}},{{129,20},{2,0}},{{129,24},{1,2}},{{129,32},{1,1}},{{129,34},{2,0}},{{129,36},{2,2}},{{129,40},{1,1}},{{129,48},{1,0}},{{129,64},{0,1}},{{129,66},{0,2}},{{129,68},{1,1}},{{129,72},{0,1}},{{129,80},{0,2}},{{129,96},{0,1}},{{129,256},{0,1}},{{129,258},{0,2}},{{129,260},{1,2}},{{129,264},{0,1}},{{129,272},{0,2}},{{129,288},{0,2}},{{129,320},{0,1}},{{130,1},{1,1}},{{130,4},{1,1}},{{130,5},{1,1}},{{130,8},{1,1}},{{130,9},{1,1}},{{130,12},{1,1}},{{130,16},{0,0}},{{130,17},{0,2}},{{130,20},{0,0}},{{130,24},{0,0}},{{130,32},{1,1}},{{130,33},{1,1}},{{130,36},{1,1}},{{130,40},{1,1}},{{130,48},{0,0}},{{130,64},{1,1}},{{130,65},{1,1}},{{130,68},{1,1}},{{130,72},{0,0}},{{130,80},{0,0}},{{130,96},{0,0}},{{130,256},{1,1}},{{130,257},{1,1}},{{130,260},{1,1}},{{130,264},{0,0}},{{130,272},{0,0}},{{130,288},{0,2}},{{130,320},{0,0}},{{131,12},{1,1}},{{131,20},{1,0}},{{131,24},{0,2}},{{131,28},{1,2}},{{131,36},{1,1}},{{131,40},{1,1}},{{131,44},{1,1}},{{131,48},{0,2}},{{131,52},{1,0}},{{131,68},{1,1}},{{131,72},{0,2}},{{131,76},{1,1}},{{131,80},{0,2}},{{131,88},{0,2}},{{131,96},{0,2}},{{131,100},{1,1}},{{131,104},{0,2}},{{131,112},{0,2}},{{131,260},{1,1}},{{131,264},{0,2}},{{131,268},{1,1}},{{131,272},{0,2}},{{131,276},{1,0}},{{131,280},{0,2}},{{131,288},{0,2}},{{131,296},{0,2}},{{131,304},{0,2}},{{131,320},{0,2}},{{131,324},{1,1}},{{131,328},{0,2}},{{131,336},{0,2}},{{131,352},{0,2}},{{132,1},{2,0}},{{132,2},{2,0}},{{132,3},{1,0}},{{132,8},{1,1}},{{132,9},{2,0}},{{132,10},{2,0}},{{132,16},{1,0}},{{132,17},{2,2}},
{{132,18},{2,2}},{{132,24},{1,2}},{{132,32},{1,1}},{{132,33},{1,1}},{{132,34},{2,0}},{{132,40},{1,1}},{{132,48},{1,0}},{{132,64},{0,0}},{{132,65},{1,0}},{{132,66},{0,0}},{{132,72},{0,0}},{{132,80},{0,0}},{{132,96},{0,1}},{{132,256},{0,1}},{{132,257},{1,1}},{{132,258},{0,0}},{{132,264},{0,1}},{{132,272},{0,0}},{{132,288},{0,0}},{{132,320},{0,1}},{{133,10},{1,1}},{{133,18},{1,0}},{{133,24},{1,2}},{{133,26},{1,2}},{{133,34},{1,1}},{{133,40},{1,1}},{{133,42},{1,1}},{{133,48},{1,0}},{{133,50},{1,0}},{{133,66},{1,1}},{{133,72},{0,1}},{{133,74},{2,2}},{{133,80},{0,1}},{{133,82},{1,0}},{{133,88},{0,1}},{{133,96},{0,1}},{{133,98},{1,0}},{{133,104},{0,1}},{{133,112},{0,1}},{{133,258},{1,0}},{{133,264},{0,1}},{{133,266},{1,1}},{{133,272},{0,1}},{{133,274},{1,0}},{{133,280},{0,1}},{{133,288},{0,1}},{{133,290},{2,0}},{{133,296},{0,1}},{{133,304},{0,1}},{{133,320},{0,1}},{{133,322},{1,0}},{{133,328},{0,1}},{{133,336},{0,1}},{{133,352},{0,1}},{{134,9},{1,1}},{{134,17},{1,0}},{{134,24},{0,0}},{{134,25},{1,2}},{{134,33},{1,1}},{{134,40},{1,1}},{{134,41},{1,1}},{{134,48},{0,0}},{{134,49},{1,0}},{{134,65},{1,0}},{{134,72},{0,0}},{{134,80},{0,0}},{{134,81},{1,0}},{{134,88},{0,0}},{{134,96},{0,0}},{{134,97},{1,1}},{{134,104},{0,0}},{{134,112},{0,0}},{{134,257},{1,1}},{{134,264},{0,0}},{{134,265},{1,1}},{{134,272},{0,0}},{{134,280},{0,0}},{{134,288},{0,0}},{{134,289},{1,1}},{{134,296},{0,0}},{{134,304},{0,0}},{{134,320},{0,0}},{{134,321},{1,1}},{{134,328},{0,0}},{{134,336},{0,0}},{{134,352},{0,0}},{{136,1},{0,2}},{{136,2},{2,0}},{{136,3},{0,2}},{{136,4},{0,0}},{{136,5},{0,1}},{{136,6},{0,0}},{{136,16},{0,0}},{{136,17},{2,2}},{{136,18},{2,0}},{{136,20},{2,0}},{{136,32},{0,0}},{{136,33},{0,1}},{{136,34},{2,0}},{{136,36},{2,2}},
{{136,48},{2,0}},{{136,64},{0,1}},{{136,65},{1,1}},{{136,66},{0,0}},{{136,68},{1,1}},{{136,80},{0,2}},{{136,96},{0,1}},{{136,256},{0,2}},{{136,257},{1,1}},{{136,258},{0,0}},{{136,260},{0,0}},{{136,272},{0,0}},{{136,288},{0,2}},{{136,320},{1,1}},{{137,6},{1,1}},{{137,18},{2,0}},{{137,20},{2,0}},{{137,22},{2,0}},{{137,34},{2,0}},{{137,36},{2,0}},{{137,38},{2,0}},{{137,48},{2,0}},{{137,50},{2,0}},{{137,52},{2,0}},{{137,66},{1,1}},{{137,68},{1,1}},{{137,70},{1,1}},{{137,80},{0,2}},{{137,82},{0,2}},{{137,96},{0,2}},{{137,98},{0,2}},{{137,100},{0,1}},{{137,112},{0,2}},{{137,258},{2,0}},{{137,260},{1,2}},{{137,262},{1,2}},{{137,272},{2,0}},{{137,274},{2,0}},{{137,276},{2,0}},{{137,288},{0,2}},{{137,290},{2,0}},{{137,304},{0,2}},{{137,320},{0,2}},{{137,322},{0,2}},{{137,324},{0,1}},{{137,336},{0,2}},{{137,352},{0,2}},{{138,5},{1,1}},{{138,17},{0,2}},{{138,20},{0,0}},{{138,21},{1,2}},{{138,33},{1,1}},{{138,36},{1,1}},{{138,37},{1,1}},{{138,48},{0,2}},{{138,49},{2,2}},{{138,52},{0,0}},{{138,65},{1,1}},{{138,68},{1,1}},{{138,69},{1,1}},{{138,80},{0,0}},{{138,81},{0,2}},{{138,96},{1,1}},{{138,97},{1,1}},{{138,100},{1,1}},{{138,112},{0,2}},{{138,257},{1,1}},{{138,260},{1,1}},{{138,261},{1,1}},{{138,272},{0,0}},{{138,276},{0,0}},{{138,288},{0,2}},{{138,289},{1,1}},{{138,304},{0,0}},{{138,320},{1,1}},{{138,321},{1,1}},{{138,324},{1,1}},{{138,336},{0,0}},{{138,352},{0,2}},{{139,52},{2,0}},{{139,100},{1,1}},{{139,112},{0,2}},{{139,276},{1,2}},{{139,304},{0,2}},{{139,324},{1,1}},{{139,336},{0,2}},{{139,352},{0,2}},{{139,368},{0,2}},{{140,3},{1,1}},{{140,17},{2,2}},{{140,18},{2,0}},{{140,19},{2,2}},{{140,33},{1,1}},{{140,34},{2,0}},{{140,35},{2,0}},{{140,48},{0,0}},{{140,49},{2,2}},{{140,50},{2,0}},{{140,65},{1,1}},{{140,66},{1,1}},
{{140,67},{1,2}},{{140,80},{0,0}},{{140,81},{2,2}},{{140,82},{0,0}},{{140,96},{0,0}},{{140,97},{0,1}},{{140,98},{0,0}},{{140,112},{0,0}},{{140,257},{1,1}},{{140,258},{1,1}},{{140,259},{1,1}},{{140,272},{0,0}},{{140,274},{0,0}},{{140,288},{0,0}},{{140,289},{1,1}},{{140,290},{2,0}},{{140,304},{0,0}},{{140,320},{0,1}},{{140,321},{1,1}},{{140,322},{0,0}},{{140,336},{0,0}},{{140,352},{0,1}},{{141,50},{2,0}},{{141,82},{1,2}},{{141,98},{1,1}},{{141,112},{0,1}},{{141,114},{2,2}},{{141,274},{2,0}},{{141,290},{2,0}},{{141,304},{0,1}},{{141,306},{2,0}},{{141,322},{1,1}},{{141,336},{0,1}},{{141,338},{1,2}},{{141,352},{0,1}},{{141,354},{1,1}},{{141,368},{0,1}},{{142,49},{2,2}},{{142,81},{2,2}},{{142,97},{1,1}},{{142,112},{0,0}},{{142,113},{2,2}},{{142,289},{1,1}},{{142,304},{0,0}},{{142,321},{1,1}},{{142,336},{0,0}},{{142,352},{0,0}},{{142,353},{1,1}},{{142,368},{0,0}},{{144,1},{0,1}},{{144,2},{0,0}},{{144,3},{0,2}},{{144,4},{0,1}},{{144,5},{0,1}},{{144,6},{0,0}},{{144,8},{0,0}},{{144,9},{0,1}},{{144,10},{2,0}},{{144,12},{0,0}},{{144,32},{0,0}},{{144,33},{0,1}},{{144,34},{2,0}},{{144,36},{0,1}},{{144,40},{0,0}},{{144,64},{0,1}},{{144,65},{0,1}},{{144,66},{0,0}},{{144,68},{0,0}},{{144,72},{0,0}},{{144,96},{0,0}},{{144,256},{0,1}},{{144,257},{0,1}},{{144,258},{0,0}},{{144,260},{0,1}},{{144,264},{0,1}},{{144,288},{0,1}},{{144,320},{0,1}},{{145,6},{2,2}},{{145,10},{2,2}},{{145,12},{0,1}},{{145,14},{2,2}},{{145,34},{2,2}},{{145,36},{2,2}},{{145,38},{2,2}},{{145,40},{0,1}},{{145,42},{0,2}},{{145,44},{0,1}},{{145,66},{2,2}},{{145,68},{0,1}},{{145,70},{1,0}},{{145,72},{0,1}},{{145,74},{2,2}},{{145,76},{0,1}},{{145,96},{0,1}},{{145,98},{2,2}},{{145,100},{0,1}},{{145,104},{0,1}},{{145,258},{0,2}},{{145,260},{1,2}},{{145,262},{1,2}},
{{145,264},{0,1}},{{145,266},{0,2}},{{145,268},{0,1}},{{145,288},{0,2}},{{145,290},{0,2}},{{145,296},{0,1}},{{145,320},{0,1}},{{145,322},{0,2}},{{145,324},{0,1}},{{145,328},{0,1}},{{145,352},{0,1}},{{148,3},{2,0}},{{148,9},{2,0}},{{148,10},{2,0}},{{148,11},{2,0}},{{148,33},{0,1}},{{148,34},{2,0}},{{148,35},{2,0}},{{148,40},{0,0}},{{148,41},{0,1}},{{148,42},{0,0}},{{148,65},{1,0}},{{148,66},{0,0}},{{148,67},{1,0}},{{148,72},{0,0}},{{148,74},{0,0}},{{148,96},{0,1}},{{148,97},{0,1}},{{148,98},{0,0}},{{148,104},{0,0}},{{148,257},{0,1}},{{148,258},{2,0}},{{148,259},{1,0}},{{148,264},{0,0}},{{148,265},{0,1}},{{148,266},{2,0}},{{148,288},{0,0}},{{148,289},{0,1}},{{148,290},{2,0}},{{148,296},{0,0}},{{148,320},{0,1}},{{148,321},{0,1}},{{148,322},{0,0}},{{148,328},{0,1}},{{148,352},{0,1}},{{149,42},{2,0}},{{149,74},{2,2}},{{149,98},{2,2}},{{149,104},{0,1}},{{149,106},{2,2}},{{149,266},{2,0}},{{149,290},{2,0}},{{149,296},{0,1}},{{149,298},{2,0}},{{149,322},{1,0}},{{149,328},{0,1}},{{149,330},{1,2}},{{149,352},{0,1}},{{149,354},{1,0}},{{149,360},{0,1}},{{152,3},{0,2}},{{152,5},{0,1}},{{152,6},{0,0}},{{152,33},{0,1}},{{152,34},{0,2}},{{152,35},{0,2}},{{152,36},{0,1}},{{152,37},{0,1}},{{152,38},{0,0}},{{152,65},{0,1}},{{152,66},{1,2}},{{152,67},{1,2}},{{152,68},{0,0}},{{152,69},{0,1}},{{152,70},{0,0}},{{152,96},{0,1}},{{152,97},{0,1}},{{152,98},{0,0}},{{152,100},{0,1}},{{152,257},{0,1}},{{152,258},{1,2}},{{152,259},{0,2}},{{152,260},{1,2}},{{152,261},{0,1}},{{152,262},{1,2}},{{152,288},{0,2}},{{152,289},{0,1}},{{152,290},{0,2}},{{152,320},{0,0}},{{152,321},{0,1}},{{152,322},{1,2}},{{152,324},{0,1}},{{152,352},{0,1}},{{153,38},{2,2}},{{153,70},{1,2}},{{153,98},{2,2}},{{153,100},{2,2}},{{153,102},{2,2}},{{153,262},{1,2}},{{153,290},{0,2}},
{{153,322},{1,2}},{{153,324},{1,2}},{{153,326},{1,2}},{{153,352},{0,2}},{{153,354},{0,2}},{{156,35},{2,0}},{{156,67},{1,2}},{{156,97},{0,1}},{{156,98},{0,0}},{{156,99},{2,2}},{{156,259},{1,2}},{{156,289},{0,1}},{{156,290},{2,0}},{{156,291},{2,0}},{{156,321},{0,1}},{{156,322},{1,2}},{{156,323},{1,2}},{{156,352},{0,1}},{{156,353},{0,1}},{{156,354},{0,0}},{{160,1},{0,2}},{{160,2},{2,0}},{{160,3},{0,2}},{{160,4},{0,0}},{{160,5},{0,1}},{{160,6},{0,0}},{{160,8},{0,2}},{{160,9},{2,0}},{{160,10},{2,2}},{{160,12},{0,0}},{{160,16},{0,2}},{{160,17},{2,2}},{{160,18},{2,2}},{{160,20},{2,0}},{{160,24},{2,2}},{{160,64},{0,0}},{{160,65},{0,1}},{{160,66},{0,0}},{{160,68},{1,1}},{{160,72},{0,0}},{{160,80},{0,2}},{{160,256},{0,1}},{{160,257},{1,1}},{{160,258},{0,0}},{{160,260},{1,1}},{{160,264},{0,0}},{{160,272},{0,0}},{{160,320},{1,1}},{{161,6},{1,0}},{{161,10},{2,2}},{{161,12},{1,1}},{{161,14},{2,2}},{{161,18},{2,0}},{{161,20},{2,0}},{{161,22},{2,0}},{{161,24},{0,2}},{{161,26},{2,2}},{{161,28},{2,0}},{{161,66},{1,1}},{{161,68},{1,1}},{{161,70},{1,1}},{{161,72},{0,1}},{{161,74},{2,2}},{{161,76},{1,1}},{{161,80},{0,2}},{{161,82},{0,2}},{{161,88},{0,2}},{{161,258},{1,0}},{{161,260},{1,0}},{{161,262},{1,0}},{{161,264},{0,1}},{{161,266},{0,2}},{{161,268},{0,1}},{{161,272},{0,1}},{{161,274},{0,2}},{{161,276},{2,0}},{{161,280},{0,1}},{{161,320},{0,1}},{{161,322},{0,2}},{{161,324},{1,1}},{{161,328},{0,1}},{{161,336},{0,2}},{{162,5},{1,1}},{{162,9},{1,1}},{{162,12},{1,1}},{{162,13},{1,1}},{{162,17},{0,2}},{{162,20},{0,0}},{{162,21},{1,0}},{{162,24},{0,0}},{{162,25},{0,2}},{{162,28},{2,0}},{{162,65},{1,0}},{{162,68},{1,1}},{{162,69},{1,1}},{{162,72},{0,0}},{{162,76},{1,1}},{{162,80},{0,0}},{{162,81},{0,2}},{{162,88},{0,0}},
{{162,257},{1,1}},{{162,260},{1,1}},{{162,261},{1,1}},{{162,264},{1,1}},{{162,265},{1,1}},{{162,268},{1,1}},{{162,272},{0,0}},{{162,276},{0,0}},{{162,280},{0,0}},{{162,320},{1,1}},{{162,321},{1,1}},{{162,324},{1,1}},{{162,328},{0,0}},{{162,336},{0,0}},{{163,28},{2,0}},{{163,76},{1,1}},{{163,88},{0,2}},{{163,268},{1,1}},{{163,276},{2,0}},{{163,280},{0,2}},{{163,284},{2,0}},{{163,324},{1,1}},{{163,328},{0,2}},{{163,332},{1,1}},{{163,336},{0,2}},{{163,344},{0,2}},{{164,3},{1,0}},{{164,9},{2,0}},{{164,10},{2,2}},{{164,11},{2,0}},{{164,17},{2,2}},{{164,18},{2,2}},{{164,19},{2,2}},{{164,24},{2,2}},{{164,25},{2,2}},{{164,26},{2,2}},{{164,65},{1,0}},{{164,66},{2,2}},{{164,67},{1,0}},{{164,72},{0,0}},{{164,74},{2,2}},{{164,80},{2,2}},{{164,81},{2,2}},{{164,82},{2,2}},{{164,88},{0,0}},{{164,257},{1,0}},{{164,258},{1,0}},{{164,259},{1,1}},{{164,264},{0,0}},{{164,265},{0,1}},{{164,266},{0,0}},{{164,272},{0,0}},{{164,274},{0,0}},{{164,280},{0,0}},{{164,320},{0,0}},{{164,321},{0,1}},{{164,322},{0,0}},{{164,328},{0,0}},{{164,336},{0,0}},{{165,26},{2,2}},{{165,74},{2,2}},{{165,82},{2,2}},{{165,88},{0,1}},{{165,90},{2,2}},{{165,266},{1,1}},{{165,274},{1,0}},{{165,280},{0,1}},{{165,282},{2,0}},{{165,322},{1,0}},{{165,328},{0,1}},{{165,330},{1,1}},{{165,336},{0,1}},{{165,338},{1,0}},{{165,344},{0,1}},{{166,25},{2,0}},{{166,81},{1,0}},{{166,88},{0,0}},{{166,265},{1,1}},{{166,280},{0,0}},{{166,321},{1,0}},{{166,328},{0,0}},{{166,336},{0,0}},{{166,344},{0,0}},{{168,3},{0,2}},{{168,5},{0,1}},{{168,6},{0,0}},{{168,17},{0,1}},{{168,18},{0,0}},{{168,19},{0,2}},{{168,20},{0,0}},{{168,21},{0,1}},{{168,22},{0,0}},{{168,65},{1,1}},{{168,66},{1,1}},{{168,67},{0,2}},{{168,68},{1,1}},{{168,69},{1,1}},{{168,70},{1,1}},{{168,80},{0,0}},{{168,81},{0,1}},
{{168,82},{0,2}},{{168,257},{1,1}},{{168,258},{1,1}},{{168,259},{1,1}},{{168,260},{1,1}},{{168,261},{1,1}},{{168,262},{0,0}},{{168,272},{0,0}},{{168,274},{0,0}},{{168,276},{0,0}},{{168,320},{1,1}},{{168,321},{1,1}},{{168,322},{1,1}},{{168,324},{1,1}},{{168,336},{0,0}},{{169,22},{2,0}},{{169,70},{1,1}},{{169,82},{0,2}},{{169,262},{1,1}},{{169,274},{2,0}},{{169,276},{2,0}},{{169,278},{2,0}},{{169,322},{1,1}},{{169,324},{1,1}},{{169,326},{1,1}},{{169,336},{0,2}},{{169,338},{0,2}},{{170,21},{2,0}},{{170,69},{1,1}},{{170,81},{0,2}},{{170,261},{1,1}},{{170,276},{0,0}},{{170,321},{1,1}},{{170,324},{1,1}},{{170,325},{1,1}},{{170,336},{0,0}},{{172,19},{2,2}},{{172,67},{1,1}},{{172,81},{2,2}},{{172,82},{2,2}},{{172,83},{2,2}},{{172,259},{1,1}},{{172,274},{0,0}},{{172,321},{1,1}},{{172,322},{1,1}},{{172,323},{1,1}},{{172,336},{0,0}},{{172,338},{0,0}},{{176,3},{0,2}},{{176,5},{0,1}},{{176,6},{0,0}},{{176,9},{0,1}},{{176,10},{0,0}},{{176,11},{0,2}},{{176,12},{0,1}},{{176,13},{0,1}},{{176,14},{0,0}},{{176,65},{1,0}},{{176,66},{1,0}},{{176,67},{1,0}},{{176,68},{0,0}},{{176,69},{0,1}},{{176,70},{0,0}},{{176,72},{0,0}},{{176,74},{0,0}},{{176,76},{0,0}},{{176,257},{0,1}},{{176,258},{1,0}},{{176,259},{0,2}},{{176,260},{0,0}},{{176,261},{0,1}},{{176,262},{1,0}},{{176,264},{0,1}},{{176,265},{0,1}},{{176,266},{0,0}},{{176,268},{0,1}},{{176,320},{0,0}},{{176,321},{0,1}},{{176,322},{1,0}},{{176,324},{0,0}},{{176,328},{0,1}},{{177,14},{2,2}},{{177,70},{1,0}},{{177,74},{2,2}},{{177,76},{0,1}},{{177,78},{2,2}},{{177,262},{1,0}},{{177,266},{0,2}},{{177,268},{0,1}},{{177,270},{2,0}},{{177,322},{1,0}},{{177,324},{0,1}},{{177,326},{1,0}},{{177,328},{0,1}},{{177,330},{0,2}},{{177,332},{0,1}},{{180,11},{2,0}},{{180,67},{1,0}},{{180,74},{0,0}},{{180,259},{1,0}},
{{180,265},{2,0}},{{180,266},{2,0}},{{180,267},{2,0}},{{180,321},{1,0}},{{180,322},{1,0}},{{180,323},{1,0}},{{180,328},{0,0}},{{180,330},{0,0}},{{192,1},{0,1}},{{192,2},{2,2}},{{192,3},{0,2}},{{192,4},{2,2}},{{192,5},{0,1}},{{192,6},{0,0}},{{192,8},{0,0}},{{192,9},{0,1}},{{192,10},{0,2}},{{192,12},{0,1}},{{192,16},{2,2}},{{192,17},{2,2}},{{192,18},{0,0}},{{192,20},{0,0}},{{192,24},{2,2}},{{192,32},{2,2}},{{192,33},{0,1}},{{192,34},{0,0}},{{192,36},{2,2}},{{192,40},{1,1}},{{192,48},{1,0}},{{192,256},{0,2}},{{192,257},{1,1}},{{192,258},{0,0}},{{192,260},{0,0}},{{192,264},{1,1}},{{192,272},{0,0}},{{192,288},{0,0}},{{193,6},{1,0}},{{193,10},{2,2}},{{193,12},{2,2}},{{193,14},{2,2}},{{193,18},{0,2}},{{193,20},{0,1}},{{193,22},{1,0}},{{193,24},{1,2}},{{193,26},{2,2}},{{193,28},{2,2}},{{193,34},{0,2}},{{193,36},{2,2}},{{193,38},{1,0}},{{193,40},{1,1}},{{193,42},{1,1}},{{193,44},{2,2}},{{193,48},{1,0}},{{193,50},{1,0}},{{193,52},{1,0}},{{193,258},{1,0}},{{193,260},{1,2}},{{193,262},{1,0}},{{193,264},{1,2}},{{193,266},{0,2}},{{193,268},{1,2}},{{193,272},{1,0}},{{193,274},{1,0}},{{193,276},{1,0}},{{193,280},{1,2}},{{193,288},{0,2}},{{193,290},{0,2}},{{193,296},{0,1}},{{193,304},{1,0}},{{194,5},{1,0}},{{194,9},{0,2}},{{194,12},{0,0}},{{194,13},{1,1}},{{194,17},{2,2}},{{194,20},{2,2}},{{194,21},{2,2}},{{194,24},{1,2}},{{194,25},{2,2}},{{194,28},{2,2}},{{194,33},{0,2}},{{194,36},{2,2}},{{194,37},{1,1}},{{194,40},{1,1}},{{194,41},{1,1}},{{194,44},{1,1}},{{194,48},{1,0}},{{194,49},{2,2}},{{194,52},{2,2}},{{194,257},{1,1}},{{194,260},{1,1}},{{194,261},{1,1}},{{194,264},{1,1}},{{194,265},{1,1}},{{194,268},{1,1}},{{194,272},{0,0}},{{194,276},{0,0}},{{194,280},{0,0}},{{194,288},{0,2}},{{194,289},{1,1}},{{194,296},{1,1}},
{{194,304},{0,0}},{{195,28},{1,2}},{{195,44},{1,1}},{{195,52},{1,0}},{{195,268},{1,2}},{{195,276},{1,2}},{{195,280},{1,2}},{{195,284},{1,2}},{{195,296},{0,2}},{{195,304},{0,2}},{{196,3},{1,0}},{{196,9},{0,1}},{{196,10},{0,0}},{{196,11},{1,1}},{{196,17},{2,2}},{{196,18},{2,2}},{{196,19},{2,2}},{{196,24},{1,2}},{{196,25},{2,2}},{{196,26},{2,2}},{{196,33},{0,1}},{{196,34},{0,0}},{{196,35},{1,0}},{{196,40},{1,1}},{{196,41},{1,1}},{{196,42},{1,1}},{{196,48},{1,0}},{{196,49},{2,2}},{{196,50},{1,0}},{{196,257},{1,1}},{{196,258},{1,1}},{{196,259},{1,1}},{{196,264},{1,1}},{{196,265},{1,1}},{{196,266},{1,1}},{{196,272},{0,0}},{{196,274},{0,0}},{{196,280},{0,0}},{{196,288},{1,1}},{{196,289},{1,1}},{{196,290},{0,0}},{{196,296},{1,1}},{{196,304},{0,0}},{{197,26},{1,2}},{{197,42},{1,1}},{{197,50},{1,0}},{{197,266},{1,1}},{{197,274},{1,0}},{{197,280},{1,2}},{{197,282},{1,2}},{{197,290},{1,0}},{{197,296},{1,1}},{{197,298},{1,1}},{{197,304},{1,0}},{{197,306},{1,0}},{{198,25},{1,2}},{{198,41},{1,1}},{{198,49},{1,0}},{{198,265},{1,1}},{{198,280},{0,0}},{{198,289},{1,1}},{{198,296},{1,1}},{{198,297},{1,1}},{{198,304},{0,0}},{{200,3},{0,2}},{{200,5},{0,1}},{{200,6},{0,0}},{{200,17},{2,2}},{{200,18},{0,0}},{{200,19},{2,2}},{{200,20},{0,0}},{{200,21},{2,2}},{{200,22},{0,0}},{{200,33},{2,2}},{{200,34},{0,0}},{{200,35},{0,2}},{{200,36},{2,2}},{{200,37},{2,2}},{{200,38},{0,0}},{{200,48},{0,0}},{{200,49},{2,2}},{{200,50},{0,0}},{{200,52},{0,0}},{{200,257},{0,1}},{{200,258},{0,0}},{{200,259},{0,2}},{{200,260},{0,0}},{{200,261},{0,1}},{{200,262},{0,0}},{{200,272},{0,0}},{{200,274},{0,0}},{{200,276},{0,0}},{{200,288},{0,0}},{{200,289},{0,1}},{{200,290},{0,0}},{{200,304},{0,0}},{{202,21},{2,2}},{{202,37},{2,2}},{{202,49},{2,2}},{{202,52},{2,2}},
{{202,53},{2,2}},{{202,261},{1,1}},{{202,276},{0,0}},{{202,289},{0,2}},{{202,304},{0,0}},{{204,19},{2,2}},{{204,35},{1,1}},{{204,49},{2,2}},{{204,50},{0,0}},{{204,51},{2,2}},{{204,259},{1,1}},{{204,274},{0,0}},{{204,289},{1,1}},{{204,290},{0,0}},{{204,291},{1,1}},{{204,304},{0,0}},{{204,306},{0,0}},{{208,3},{0,2}},{{208,5},{0,1}},{{208,6},{0,0}},{{208,9},{0,1}},{{208,10},{0,0}},{{208,11},{0,2}},{{208,12},{0,0}},{{208,13},{0,1}},{{208,14},{2,2}},{{208,33},{0,1}},{{208,34},{0,0}},{{208,35},{0,2}},{{208,36},{2,2}},{{208,37},{0,1}},{{208,38},{2,2}},{{208,40},{0,0}},{{208,41},{0,1}},{{208,42},{0,0}},{{208,44},{0,1}},{{208,257},{0,1}},{{208,258},{0,2}},{{208,259},{0,2}},{{208,260},{0,1}},{{208,261},{0,1}},{{208,262},{0,0}},{{208,264},{0,0}},{{208,265},{0,1}},{{208,266},{0,2}},{{208,268},{0,1}},{{208,288},{0,2}},{{208,289},{0,1}},{{208,290},{0,2}},{{208,296},{0,1}},{{209,14},{2,2}},{{209,38},{2,2}},{{209,42},{0,2}},{{209,44},{2,2}},{{209,46},{2,2}},{{209,262},{1,2}},{{209,266},{0,2}},{{209,268},{1,2}},{{209,270},{1,2}},{{209,290},{0,2}},{{209,296},{0,2}},{{209,298},{0,2}},{{216,35},{0,2}},{{216,37},{0,1}},{{216,38},{0,0}},{{216,259},{0,2}},{{216,261},{0,1}},{{216,262},{0,0}},{{216,289},{0,2}},{{216,290},{0,2}},{{216,291},{0,2}},{{224,3},{0,2}},{{224,5},{0,1}},{{224,6},{0,0}},{{224,9},{0,1}},{{224,10},{2,2}},{{224,11},{0,2}},{{224,12},{2,2}},{{224,13},{0,1}},{{224,14},{2,2}},{{224,17},{2,2}},{{224,18},{2,2}},{{224,19},{2,2}},{{224,20},{2,2}},{{224,21},{2,2}},{{224,22},{0,0}},{{224,24},{2,2}},{{224,25},{2,2}},{{224,26},{2,2}},{{224,28},{2,2}},{{224,257},{0,1}},{{224,258},{0,0}},{{224,259},{0,2}},{{224,260},{0,0}},{{224,261},{0,1}},{{224,262},{0,0}},{{224,264},{0,1}},{{224,265},{1,1}},{{224,266},{0,0}},{{224,268},{0,0}},
{{224,272},{0,0}},{{224,274},{0,0}},{{224,276},{0,0}},{{224,280},{0,0}},{{225,14},{2,2}},{{225,22},{1,0}},{{225,26},{2,2}},{{225,28},{2,2}},{{225,30},{2,2}},{{225,262},{1,0}},{{225,266},{0,2}},{{225,268},{0,1}},{{225,270},{1,1}},{{225,274},{1,0}},{{225,276},{1,0}},{{225,278},{1,0}},{{225,280},{0,1}},{{225,282},{0,2}},{{225,284},{0,1}},{{226,13},{1,1}},{{226,21},{2,2}},{{226,25},{2,2}},{{226,28},{2,2}},{{226,29},{2,2}},{{226,261},{1,1}},{{226,265},{1,1}},{{226,268},{1,1}},{{226,269},{1,1}},{{226,276},{0,0}},{{226,280},{0,0}},{{226,284},{0,0}},{{228,11},{1,1}},{{228,19},{2,2}},{{228,25},{2,2}},{{228,26},{2,2}},{{228,27},{2,2}},{{228,259},{1,1}},{{228,265},{1,1}},{{228,266},{1,1}},{{228,267},{1,1}},{{228,274},{0,0}},{{228,280},{0,0}},{{228,282},{0,0}},{{232,19},{0,2}},{{232,21},{0,1}},{{232,22},{0,0}},{{232,259},{0,2}},{{232,261},{0,1}},{{232,262},{0,0}},{{232,274},{0,0}},{{232,276},{0,0}},{{232,278},{0,0}},{{240,11},{0,2}},{{240,13},{0,1}},{{240,14},{0,0}},{{240,259},{0,2}},{{240,261},{0,1}},{{240,262},{0,0}},{{240,265},{0,1}},{{240,266},{0,2}},{{240,267},{0,2}},{{240,268},{0,1}},{{240,269},{0,1}},{{240,270},{0,0}},{{256,0},{1,1}},{{256,1},{0,2}},{{256,2},{0,2}},{{256,4},{0,0}},{{256,8},{0,2}},{{256,16},{0,0}},{{256,32},{1,1}},{{256,64},{0,0}},{{256,128},{0,2}},{{257,2},{1,1}},{{257,4},{0,1}},{{257,6},{1,0}},{{257,8},{1,1}},{{257,10},{0,2}},{{257,12},{1,1}},{{257,16},{0,1}},{{257,18},{2,1}},{{257,20},{2,0}},{{257,24},{1,2}},{{257,32},{1,1}},{{257,34},{1,0}},{{257,36},{1,0}},{{257,40},{1,1}},{{257,48},{1,0}},{{257,64},{0,1}},{{257,66},{0,2}},{{257,68},{1,1}},{{257,72},{0,1}},{{257,80},{0,2}},{{257,96},{0,1}},{{257,128},{1,1}},{{257,130},{1,1}},{{257,132},{1,0}},{{257,136},{0,1}},{{257,144},{0,1}},{{257,160},{0,1}},
{{257,192},{0,1}},{{258,1},{1,1}},{{258,4},{1,1}},{{258,5},{2,1}},{{258,8},{1,1}},{{258,9},{2,0}},{{258,12},{1,1}},{{258,16},{0,0}},{{258,17},{0,2}},{{258,20},{2,0}},{{258,24},{1,2}},{{258,32},{1,1}},{{258,33},{2,1}},{{258,36},{1,0}},{{258,40},{1,1}},{{258,48},{1,0}},{{258,64},{0,0}},{{258,65},{1,0}},{{258,68},{1,1}},{{258,72},{0,0}},{{258,80},{0,2}},{{258,96},{0,0}},{{258,128},{0,0}},{{258,129},{0,2}},{{258,132},{0,0}},{{258,136},{0,0}},{{258,144},{0,2}},{{258,160},{0,0}},{{258,192},{0,0}},{{259,12},{1,1}},{{259,20},{1,0}},{{259,24},{0,2}},{{259,28},{1,2}},{{259,36},{1,1}},{{259,40},{1,1}},{{259,44},{1,1}},{{259,48},{0,2}},{{259,52},{1,0}},{{259,68},{1,1}},{{259,72},{0,2}},{{259,76},{1,1}},{{259,80},{0,2}},{{259,88},{0,2}},{{259,96},{0,2}},{{259,100},{1,1}},{{259,104},{0,2}},{{259,112},{0,2}},{{259,132},{1,1}},{{259,136},{0,2}},{{259,140},{1,1}},{{259,144},{0,2}},{{259,148},{2,0}},{{259,152},{0,2}},{{259,160},{0,2}},{{259,164},{1,0}},{{259,168},{0,2}},{{259,176},{0,2}},{{259,192},{0,2}},{{259,196},{1,1}},{{259,200},{0,2}},{{259,208},{0,2}},{{259,224},{0,2}},{{260,1},{0,1}},{{260,2},{0,0}},{{260,3},{1,0}},{{260,8},{0,0}},{{260,9},{1,2}},{{260,10},{0,0}},{{260,16},{1,2}},{{260,17},{1,2}},{{260,18},{1,2}},{{260,24},{1,2}},{{260,32},{1,1}},{{260,33},{2,0}},{{260,34},{1,1}},{{260,40},{1,1}},{{260,48},{1,0}},{{260,64},{0,0}},{{260,65},{1,2}},{{260,66},{0,0}},{{260,72},{0,0}},{{260,80},{0,0}},{{260,96},{0,0}},{{260,128},{0,0}},{{260,129},{1,1}},{{260,130},{1,1}},{{260,136},{0,0}},{{260,144},{0,1}},{{260,160},{0,0}},{{260,192},{0,0}},{{261,10},{1,1}},{{261,18},{1,2}},{{261,24},{1,2}},{{261,26},{1,2}},{{261,34},{1,1}},{{261,40},{1,1}},{{261,42},{1,1}},{{261,48},{0,1}},{{261,50},{1,0}},{{261,66},{1,0}},
{{261,72},{0,1}},{{261,74},{1,1}},{{261,80},{0,1}},{{261,82},{1,2}},{{261,88},{0,1}},{{261,96},{0,1}},{{261,98},{1,1}},{{261,104},{0,1}},{{261,112},{0,1}},{{261,130},{1,1}},{{261,136},{0,1}},{{261,138},{1,1}},{{261,144},{0,1}},{{261,152},{0,1}},{{261,160},{0,1}},{{261,162},{1,1}},{{261,168},{0,1}},{{261,176},{0,1}},{{261,192},{0,1}},{{261,194},{1,1}},{{261,200},{0,1}},{{261,208},{0,1}},{{261,224},{0,1}},{{262,9},{1,2}},{{262,17},{1,2}},{{262,24},{1,2}},{{262,25},{1,2}},{{262,33},{1,0}},{{262,40},{0,0}},{{262,41},{1,1}},{{262,48},{1,0}},{{262,49},{1,0}},{{262,65},{1,0}},{{262,72},{0,0}},{{262,80},{0,0}},{{262,81},{1,2}},{{262,88},{0,0}},{{262,96},{0,0}},{{262,97},{1,0}},{{262,104},{0,0}},{{262,112},{0,0}},{{262,129},{1,2}},{{262,136},{0,0}},{{262,137},{1,2}},{{262,144},{0,0}},{{262,145},{1,2}},{{262,152},{0,0}},{{262,160},{0,0}},{{262,161},{1,0}},{{262,168},{0,0}},{{262,176},{0,0}},{{262,192},{0,0}},{{262,193},{1,2}},{{262,200},{0,0}},{{262,208},{0,0}},{{262,224},{0,0}},{{264,1},{0,2}},{{264,2},{1,1}},{{264,3},{0,2}},{{264,4},{0,0}},{{264,5},{0,1}},{{264,6},{0,0}},{{264,16},{0,0}},{{264,17},{0,1}},{{264,18},{2,1}},{{264,20},{2,0}},{{264,32},{0,0}},{{264,33},{0,1}},{{264,34},{0,0}},{{264,36},{0,0}},{{264,48},{2,0}},{{264,64},{1,1}},{{264,65},{1,2}},{{264,66},{1,1}},{{264,68},{1,1}},{{264,80},{0,2}},{{264,96},{0,0}},{{264,128},{1,1}},{{264,129},{1,2}},{{264,130},{1,1}},{{264,132},{0,0}},{{264,144},{0,1}},{{264,160},{0,0}},{{264,192},{0,1}},{{265,6},{1,1}},{{265,18},{2,0}},{{265,20},{2,0}},{{265,22},{2,0}},{{265,34},{0,2}},{{265,36},{0,1}},{{265,38},{1,1}},{{265,48},{2,0}},{{265,50},{2,0}},{{265,52},{2,0}},{{265,66},{1,1}},{{265,68},{1,1}},{{265,70},{1,1}},{{265,80},{0,1}},{{265,82},{0,2}},{{265,96},{1,1}},
{{265,98},{1,1}},{{265,100},{1,1}},{{265,112},{0,2}},{{265,130},{1,1}},{{265,132},{0,1}},{{265,134},{1,1}},{{265,144},{0,1}},{{265,148},{2,0}},{{265,160},{0,1}},{{265,162},{1,1}},{{265,164},{0,1}},{{265,176},{0,1}},{{265,192},{1,1}},{{265,194},{1,1}},{{265,196},{1,1}},{{265,208},{0,1}},{{265,224},{0,1}},{{266,5},{1,1}},{{266,17},{0,2}},{{266,20},{2,0}},{{266,21},{2,0}},{{266,33},{1,1}},{{266,36},{0,0}},{{266,37},{2,1}},{{266,48},{0,0}},{{266,49},{0,2}},{{266,52},{2,0}},{{266,65},{1,1}},{{266,68},{1,1}},{{266,69},{1,1}},{{266,80},{0,2}},{{266,81},{0,2}},{{266,96},{0,0}},{{266,97},{0,2}},{{266,100},{1,1}},{{266,112},{0,2}},{{266,129},{0,2}},{{266,132},{0,0}},{{266,133},{1,1}},{{266,144},{0,0}},{{266,145},{0,2}},{{266,148},{2,0}},{{266,160},{0,0}},{{266,161},{0,2}},{{266,164},{0,0}},{{266,176},{0,0}},{{266,192},{0,0}},{{266,193},{1,2}},{{266,196},{1,1}},{{266,208},{0,2}},{{266,224},{0,0}},{{267,52},{2,0}},{{267,100},{1,1}},{{267,112},{0,2}},{{267,148},{2,0}},{{267,164},{1,1}},{{267,176},{0,2}},{{267,180},{2,0}},{{267,196},{1,1}},{{267,208},{0,2}},{{267,224},{0,2}},{{267,228},{1,1}},{{267,240},{0,2}},{{268,3},{1,1}},{{268,17},{1,2}},{{268,18},{2,1}},{{268,19},{1,2}},{{268,33},{1,1}},{{268,34},{1,1}},{{268,35},{2,0}},{{268,48},{0,0}},{{268,49},{0,1}},{{268,50},{2,1}},{{268,65},{1,2}},{{268,66},{1,2}},{{268,67},{1,2}},{{268,80},{1,2}},{{268,81},{1,2}},{{268,82},{1,2}},{{268,96},{0,0}},{{268,97},{0,1}},{{268,98},{0,0}},{{268,112},{0,0}},{{268,129},{1,2}},{{268,130},{1,1}},{{268,131},{1,1}},{{268,144},{0,1}},{{268,145},{1,2}},{{268,160},{0,0}},{{268,161},{0,1}},{{268,162},{1,1}},{{268,176},{0,1}},{{268,192},{0,0}},{{268,193},{1,2}},{{268,194},{1,1}},{{268,208},{0,1}},{{268,224},{0,0}},{{269,50},{2,1}},{{269,82},{2,1}},{{269,98},{1,1}},
{{269,112},{0,1}},{{269,114},{2,1}},{{269,162},{1,1}},{{269,176},{0,1}},{{269,194},{1,1}},{{269,208},{0,1}},{{269,224},{0,1}},{{269,226},{1,1}},{{269,240},{0,1}},{{270,49},{2,0}},{{270,81},{1,2}},{{270,97},{1,1}},{{270,112},{0,0}},{{270,113},{2,1}},{{270,145},{1,2}},{{270,161},{1,1}},{{270,176},{0,0}},{{270,177},{2,0}},{{270,193},{1,2}},{{270,208},{0,0}},{{270,209},{1,2}},{{270,224},{0,0}},{{270,225},{1,1}},{{270,240},{0,0}},{{272,1},{0,2}},{{272,2},{0,0}},{{272,3},{0,2}},{{272,4},{0,0}},{{272,5},{0,1}},{{272,6},{0,0}},{{272,8},{0,0}},{{272,9},{2,0}},{{272,10},{0,0}},{{272,12},{0,0}},{{272,32},{0,0}},{{272,33},{2,0}},{{272,34},{0,0}},{{272,36},{0,0}},{{272,40},{0,0}},{{272,64},{0,0}},{{272,65},{1,0}},{{272,66},{0,0}},{{272,68},{0,0}},{{272,72},{0,0}},{{272,96},{0,0}},{{272,128},{0,0}},{{272,129},{0,2}},{{272,130},{0,0}},{{272,132},{0,0}},{{272,136},{0,0}},{{272,160},{0,0}},{{272,192},{0,0}},{{274,5},{2,1}},{{274,9},{2,0}},{{274,12},{0,0}},{{274,13},{2,1}},{{274,33},{2,1}},{{274,36},{0,0}},{{274,37},{2,1}},{{274,40},{0,0}},{{274,41},{2,0}},{{274,44},{0,0}},{{274,65},{1,0}},{{274,68},{0,0}},{{274,69},{1,0}},{{274,72},{0,0}},{{274,76},{0,0}},{{274,96},{0,0}},{{274,97},{2,1}},{{274,100},{0,0}},{{274,104},{0,0}},{{274,129},{0,2}},{{274,132},{0,0}},{{274,133},{1,0}},{{274,136},{0,0}},{{274,137},{2,0}},{{274,140},{0,0}},{{274,160},{0,0}},{{274,161},{0,2}},{{274,164},{0,0}},{{274,168},{0,0}},{{274,192},{0,0}},{{274,193},{1,0}},{{274,196},{0,0}},{{274,200},{0,0}},{{274,224},{0,0}},{{276,3},{1,0}},{{276,9},{2,0}},{{276,10},{0,0}},{{276,11},{1,2}},{{276,33},{2,0}},{{276,34},{0,0}},{{276,35},{2,0}},{{276,40},{0,0}},{{276,41},{2,0}},{{276,42},{0,0}},{{276,65},{1,0}},{{276,66},{0,0}},{{276,67},{1,2}},{{276,72},{0,0}},
{{276,74},{0,0}},{{276,96},{0,0}},{{276,97},{1,0}},{{276,98},{0,0}},{{276,104},{0,0}},{{276,129},{0,1}},{{276,130},{0,0}},{{276,131},{1,0}},{{276,136},{0,0}},{{276,137},{1,2}},{{276,138},{0,0}},{{276,160},{0,0}},{{276,161},{2,0}},{{276,162},{0,0}},{{276,168},{0,0}},{{276,192},{0,0}},{{276,193},{1,2}},{{276,194},{0,0}},{{276,200},{0,0}},{{276,224},{0,0}},{{278,41},{2,0}},{{278,97},{1,0}},{{278,104},{0,0}},{{278,137},{2,0}},{{278,161},{2,0}},{{278,168},{0,0}},{{278,169},{2,0}},{{278,193},{1,0}},{{278,200},{0,0}},{{278,224},{0,0}},{{278,225},{1,0}},{{278,232},{0,0}},{{280,3},{0,2}},{{280,5},{0,1}},{{280,6},{0,0}},{{280,33},{0,1}},{{280,34},{0,0}},{{280,35},{0,2}},{{280,36},{0,0}},{{280,37},{0,1}},{{280,38},{0,0}},{{280,65},{1,2}},{{280,66},{0,0}},{{280,67},{1,2}},{{280,68},{0,0}},{{280,69},{0,1}},{{280,70},{0,0}},{{280,96},{0,0}},{{280,97},{0,1}},{{280,98},{0,0}},{{280,100},{0,0}},{{280,129},{1,2}},{{280,130},{0,0}},{{280,131},{0,2}},{{280,132},{0,0}},{{280,133},{1,2}},{{280,134},{0,0}},{{280,160},{0,0}},{{280,161},{0,1}},{{280,162},{0,0}},{{280,164},{0,0}},{{280,192},{0,0}},{{280,193},{1,2}},{{280,194},{0,0}},{{280,196},{0,0}},{{280,224},{0,0}},{{282,37},{2,1}},{{282,69},{1,2}},{{282,97},{2,1}},{{282,100},{0,0}},{{282,101},{2,1}},{{282,133},{1,2}},{{282,161},{0,2}},{{282,164},{0,0}},{{282,165},{2,0}},{{282,193},{1,2}},{{282,196},{0,0}},{{282,197},{1,2}},{{282,224},{0,0}},{{282,225},{0,2}},{{282,228},{0,0}},{{284,35},{2,0}},{{284,67},{1,2}},{{284,97},{0,1}},{{284,98},{0,0}},{{284,99},{2,1}},{{284,131},{1,2}},{{284,161},{2,0}},{{284,162},{0,0}},{{284,163},{2,0}},{{284,193},{1,2}},{{284,194},{0,0}},{{284,195},{1,2}},{{284,224},{0,0}},{{284,225},{0,1}},{{284,226},{0,0}},{{288,1},{0,2}},{{288,2},{0,2}},{{288,3},{0,2}},{{288,4},{0,0}},
{{288,5},{0,1}},{{288,6},{0,0}},{{288,8},{0,2}},{{288,9},{0,2}},{{288,10},{0,0}},{{288,12},{0,0}},{{288,16},{0,2}},{{288,17},{0,2}},{{288,18},{0,2}},{{288,20},{2,0}},{{288,24},{0,2}},{{288,64},{0,0}},{{288,65},{0,2}},{{288,66},{0,0}},{{288,68},{1,1}},{{288,72},{0,0}},{{288,80},{0,2}},{{288,128},{0,0}},{{288,129},{0,2}},{{288,130},{0,2}},{{288,132},{1,1}},{{288,136},{0,0}},{{288,144},{0,2}},{{288,192},{0,0}},{{289,6},{1,1}},{{289,10},{0,2}},{{289,12},{1,1}},{{289,14},{1,1}},{{289,18},{0,2}},{{289,20},{0,1}},{{289,22},{1,0}},{{289,24},{0,2}},{{289,26},{0,2}},{{289,28},{2,0}},{{289,66},{0,2}},{{289,68},{1,1}},{{289,70},{1,1}},{{289,72},{0,1}},{{289,74},{0,2}},{{289,76},{1,1}},{{289,80},{0,2}},{{289,82},{0,2}},{{289,88},{0,2}},{{289,130},{1,1}},{{289,132},{1,1}},{{289,134},{1,1}},{{289,136},{0,1}},{{289,138},{0,2}},{{289,140},{1,1}},{{289,144},{0,1}},{{289,148},{0,1}},{{289,152},{0,2}},{{289,192},{0,1}},{{289,194},{0,2}},{{289,196},{1,1}},{{289,200},{0,1}},{{289,208},{0,2}},{{290,5},{2,0}},{{290,9},{2,0}},{{290,12},{2,0}},{{290,13},{2,0}},{{290,17},{0,2}},{{290,20},{2,0}},{{290,21},{2,0}},{{290,24},{0,2}},{{290,25},{0,2}},{{290,28},{2,0}},{{290,65},{0,2}},{{290,68},{0,0}},{{290,69},{1,0}},{{290,72},{0,0}},{{290,76},{0,0}},{{290,80},{0,2}},{{290,81},{0,2}},{{290,88},{0,2}},{{290,129},{0,2}},{{290,132},{0,0}},{{290,133},{1,0}},{{290,136},{0,2}},{{290,137},{0,2}},{{290,140},{0,0}},{{290,144},{0,2}},{{290,145},{0,2}},{{290,148},{2,0}},{{290,152},{0,2}},{{290,192},{0,0}},{{290,193},{0,2}},{{290,196},{1,1}},{{290,200},{0,0}},{{290,208},{0,2}},{{291,28},{2,0}},{{291,76},{1,1}},{{291,88},{0,2}},{{291,140},{1,1}},{{291,148},{2,0}},{{291,152},{0,2}},{{291,156},{2,0}},{{291,196},{1,1}},{{291,200},{0,2}},{{291,204},{1,1}},
{{291,208},{0,2}},{{291,216},{0,2}},{{296,3},{0,2}},{{296,5},{0,1}},{{296,6},{0,0}},{{296,17},{0,2}},{{296,18},{0,2}},{{296,19},{0,2}},{{296,20},{0,0}},{{296,21},{0,1}},{{296,22},{0,0}},{{296,65},{0,1}},{{296,66},{0,0}},{{296,67},{0,2}},{{296,68},{1,1}},{{296,69},{1,1}},{{296,70},{1,1}},{{296,80},{0,2}},{{296,81},{0,2}},{{296,82},{0,2}},{{296,129},{0,1}},{{296,130},{1,1}},{{296,131},{0,2}},{{296,132},{1,1}},{{296,133},{1,1}},{{296,134},{1,1}},{{296,144},{0,1}},{{296,145},{0,2}},{{296,148},{0,0}},{{296,192},{0,0}},{{296,193},{0,1}},{{296,194},{0,2}},{{296,196},{1,1}},{{296,208},{0,2}},{{297,22},{2,0}},{{297,70},{1,1}},{{297,82},{0,2}},{{297,134},{1,1}},{{297,148},{0,1}},{{297,194},{1,1}},{{297,196},{1,1}},{{297,198},{1,1}},{{297,208},{0,1}},{{298,21},{2,0}},{{298,69},{1,1}},{{298,81},{0,2}},{{298,133},{1,1}},{{298,145},{0,2}},{{298,148},{2,0}},{{298,149},{2,0}},{{298,193},{0,2}},{{298,196},{1,1}},{{298,197},{1,1}},{{298,208},{0,2}},{{298,209},{0,2}},{{304,3},{0,2}},{{304,5},{0,1}},{{304,6},{0,0}},{{304,9},{0,2}},{{304,10},{0,0}},{{304,11},{0,2}},{{304,12},{0,0}},{{304,13},{0,1}},{{304,14},{0,0}},{{304,65},{1,0}},{{304,66},{0,0}},{{304,67},{0,2}},{{304,68},{0,0}},{{304,69},{1,0}},{{304,70},{0,0}},{{304,72},{0,0}},{{304,74},{0,0}},{{304,76},{0,0}},{{304,129},{0,1}},{{304,130},{0,0}},{{304,131},{0,2}},{{304,132},{0,0}},{{304,133},{1,0}},{{304,134},{0,0}},{{304,136},{0,0}},{{304,137},{0,2}},{{304,138},{0,0}},{{304,140},{0,0}},{{304,192},{0,0}},{{304,193},{0,2}},{{304,194},{0,0}},{{304,196},{0,0}},{{304,200},{0,0}},{{306,13},{2,0}},{{306,69},{1,0}},{{306,76},{0,0}},{{306,133},{1,0}},{{306,137},{2,0}},{{306,140},{0,0}},{{306,141},{2,0}},{{306,193},{1,0}},{{306,196},{0,0}},{{306,197},{1,0}},{{306,200},{0,0}},{{306,204},{0,0}},
{{320,1},{0,1}},{{320,2},{0,0}},{{320,3},{0,2}},{{320,4},{0,0}},{{320,5},{2,1}},{{320,6},{0,0}},{{320,8},{0,0}},{{320,9},{0,1}},{{320,10},{0,0}},{{320,12},{0,0}},{{320,16},{2,1}},{{320,17},{0,2}},{{320,18},{2,1}},{{320,20},{0,0}},{{320,24},{1,2}},{{320,32},{0,0}},{{320,33},{0,2}},{{320,34},{0,0}},{{320,36},{0,0}},{{320,40},{1,1}},{{320,48},{1,0}},{{320,128},{1,1}},{{320,129},{0,2}},{{320,130},{1,1}},{{320,132},{0,0}},{{320,136},{0,2}},{{320,144},{0,1}},{{320,160},{0,0}},{{321,6},{1,0}},{{321,10},{0,2}},{{321,12},{0,1}},{{321,14},{1,1}},{{321,18},{2,1}},{{321,20},{0,1}},{{321,22},{1,0}},{{321,24},{1,2}},{{321,26},{2,1}},{{321,28},{2,1}},{{321,34},{0,2}},{{321,36},{0,1}},{{321,38},{1,0}},{{321,40},{1,1}},{{321,42},{1,1}},{{321,44},{1,1}},{{321,48},{1,0}},{{321,50},{1,0}},{{321,52},{1,0}},{{321,130},{1,1}},{{321,132},{0,1}},{{321,134},{1,0}},{{321,136},{1,1}},{{321,138},{1,1}},{{321,140},{1,1}},{{321,144},{0,1}},{{321,148},{1,0}},{{321,152},{0,1}},{{321,160},{0,1}},{{321,162},{1,0}},{{321,164},{0,1}},{{321,168},{1,1}},{{321,176},{1,0}},{{322,5},{2,1}},{{322,9},{0,2}},{{322,12},{2,1}},{{322,13},{2,1}},{{322,17},{2,1}},{{322,20},{2,1}},{{322,21},{2,1}},{{322,24},{1,2}},{{322,25},{1,2}},{{322,28},{2,1}},{{322,33},{2,1}},{{322,36},{0,0}},{{322,37},{2,1}},{{322,40},{1,1}},{{322,41},{1,1}},{{322,44},{1,1}},{{322,48},{1,0}},{{322,49},{2,1}},{{322,52},{1,0}},{{322,129},{0,2}},{{322,132},{0,0}},{{322,133},{1,0}},{{322,136},{0,2}},{{322,137},{0,2}},{{322,140},{0,0}},{{322,144},{0,0}},{{322,145},{0,2}},{{322,148},{0,0}},{{322,152},{1,2}},{{322,160},{0,0}},{{322,161},{0,2}},{{322,164},{0,0}},{{322,168},{1,1}},{{322,176},{1,0}},{{323,28},{1,2}},{{323,44},{1,1}},{{323,52},{1,0}},{{323,140},{1,1}},{{323,148},{1,0}},
{{323,152},{1,2}},{{323,156},{1,2}},{{323,164},{1,0}},{{323,168},{1,1}},{{323,172},{1,1}},{{323,176},{1,0}},{{323,180},{1,0}},{{324,3},{1,0}},{{324,9},{0,1}},{{324,10},{0,0}},{{324,11},{1,1}},{{324,17},{0,1}},{{324,18},{2,1}},{{324,19},{1,2}},{{324,24},{1,2}},{{324,25},{1,2}},{{324,26},{1,2}},{{324,33},{0,1}},{{324,34},{0,0}},{{324,35},{1,0}},{{324,40},{1,1}},{{324,41},{1,1}},{{324,42},{1,1}},{{324,48},{1,0}},{{324,49},{2,1}},{{324,50},{2,1}},{{324,129},{0,1}},{{324,130},{1,1}},{{324,131},{1,1}},{{324,136},{0,0}},{{324,137},{0,1}},{{324,138},{1,1}},{{324,144},{0,1}},{{324,145},{1,2}},{{324,152},{1,2}},{{324,160},{1,1}},{{324,161},{1,1}},{{324,162},{1,1}},{{324,168},{1,1}},{{324,176},{0,0}},{{325,26},{1,2}},{{325,42},{1,1}},{{325,50},{1,0}},{{325,138},{1,1}},{{325,152},{0,1}},{{325,162},{1,1}},{{325,168},{1,1}},{{325,170},{1,1}},{{325,176},{0,1}},{{326,25},{1,2}},{{326,41},{1,1}},{{326,49},{1,0}},{{326,137},{1,1}},{{326,145},{1,2}},{{326,152},{1,2}},{{326,153},{1,2}},{{326,161},{1,1}},{{326,168},{1,1}},{{326,169},{1,1}},{{326,176},{1,0}},{{326,177},{1,0}},{{328,3},{0,2}},{{328,5},{0,1}},{{328,6},{0,0}},{{328,17},{2,1}},{{328,18},{2,1}},{{328,19},{2,1}},{{328,20},{0,0}},{{328,21},{2,1}},{{328,22},{0,0}},{{328,33},{2,1}},{{328,34},{0,0}},{{328,35},{0,2}},{{328,36},{0,0}},{{328,37},{2,1}},{{328,38},{0,0}},{{328,48},{0,0}},{{328,49},{2,1}},{{328,50},{0,0}},{{328,52},{0,0}},{{328,129},{0,1}},{{328,130},{0,0}},{{328,131},{0,2}},{{328,132},{0,0}},{{328,133},{0,1}},{{328,134},{0,0}},{{328,144},{0,1}},{{328,145},{0,1}},{{328,148},{0,0}},{{328,160},{0,0}},{{328,161},{0,1}},{{328,162},{0,0}},{{328,164},{0,0}},{{328,176},{0,0}},{{330,21},{2,1}},{{330,37},{2,1}},{{330,49},{2,1}},{{330,52},{0,0}},{{330,53},{2,1}},{{330,133},{1,1}},
{{330,145},{0,2}},{{330,148},{0,0}},{{330,149},{1,2}},{{330,161},{0,2}},{{330,164},{0,0}},{{330,165},{1,1}},{{330,176},{0,0}},{{330,177},{0,2}},{{330,180},{0,0}},{{332,19},{2,1}},{{332,35},{1,1}},{{332,49},{2,1}},{{332,50},{2,1}},{{332,51},{2,1}},{{332,131},{1,1}},{{332,145},{0,1}},{{332,161},{1,1}},{{332,162},{1,1}},{{332,163},{1,1}},{{332,176},{0,1}},{{332,177},{0,1}},{{336,3},{0,2}},{{336,5},{0,1}},{{336,6},{0,0}},{{336,9},{0,1}},{{336,10},{0,0}},{{336,11},{0,2}},{{336,12},{0,0}},{{336,13},{2,1}},{{336,14},{0,0}},{{336,33},{0,1}},{{336,34},{0,0}},{{336,35},{0,2}},{{336,36},{0,0}},{{336,37},{2,1}},{{336,38},{0,0}},{{336,40},{0,0}},{{336,41},{0,1}},{{336,42},{0,0}},{{336,44},{0,0}},{{336,129},{0,2}},{{336,130},{0,0}},{{336,131},{0,2}},{{336,132},{0,0}},{{336,133},{0,1}},{{336,134},{0,0}},{{336,136},{0,0}},{{336,137},{0,2}},{{336,138},{0,0}},{{336,140},{0,0}},{{336,160},{0,0}},{{336,161},{0,2}},{{336,162},{0,0}},{{336,164},{0,0}},{{336,168},{0,0}},{{338,13},{2,1}},{{338,37},{2,1}},{{338,41},{0,2}},{{338,44},{0,0}},{{338,45},{2,1}},{{338,133},{1,0}},{{338,137},{0,2}},{{338,140},{0,0}},{{338,141},{1,2}},{{338,161},{0,2}},{{338,164},{0,0}},{{338,165},{1,0}},{{338,168},{0,0}},{{338,169},{0,2}},{{338,172},{0,0}},{{344,35},{0,2}},{{344,37},{0,1}},{{344,38},{0,0}},{{344,131},{0,2}},{{344,133},{0,1}},{{344,134},{0,0}},{{344,161},{0,2}},{{344,162},{0,0}},{{344,163},{0,2}},{{344,164},{0,0}},{{344,165},{0,1}},{{344,166},{0,0}},{{352,3},{0,2}},{{352,5},{0,1}},{{352,6},{0,0}},{{352,9},{0,1}},{{352,10},{0,0}},{{352,11},{0,2}},{{352,12},{2,1}},{{352,13},{2,1}},{{352,14},{0,0}},{{352,17},{0,1}},{{352,18},{2,1}},{{352,19},{0,2}},{{352,20},{2,1}},{{352,21},{2,1}},{{352,22},{2,1}},{{352,24},{0,0}},{{352,25},{0,1}},{{352,26},{0,2}},
{{352,28},{2,1}},{{352,129},{0,2}},{{352,130},{0,2}},{{352,131},{0,2}},{{352,132},{0,1}},{{352,133},{0,1}},{{352,134},{0,0}},{{352,136},{0,2}},{{352,137},{0,2}},{{352,138},{0,2}},{{352,140},{0,0}},{{352,144},{0,1}},{{352,145},{0,2}},{{352,148},{0,1}},{{352,152},{0,2}},{{353,14},{1,1}},{{353,22},{2,1}},{{353,26},{2,1}},{{353,28},{2,1}},{{353,30},{2,1}},{{353,134},{1,1}},{{353,138},{1,1}},{{353,140},{1,1}},{{353,142},{1,1}},{{353,148},{0,1}},{{353,152},{0,1}},{{353,156},{0,1}},{{354,13},{2,1}},{{354,21},{2,1}},{{354,25},{0,2}},{{354,28},{2,1}},{{354,29},{2,1}},{{354,133},{1,0}},{{354,137},{0,2}},{{354,140},{0,0}},{{354,141},{1,1}},{{354,145},{0,2}},{{354,148},{0,0}},{{354,149},{1,0}},{{354,152},{0,2}},{{354,153},{0,2}},{{354,156},{0,0}},{{360,19},{0,2}},{{360,21},{0,1}},{{360,22},{0,0}},{{360,131},{0,2}},{{360,133},{0,1}},{{360,134},{0,0}},{{360,145},{0,1}},{{360,148},{0,1}},{{360,149},{0,1}},{{368,11},{0,2}},{{368,13},{0,1}},{{368,14},{0,0}},{{368,131},{0,2}},{{368,133},{0,1}},{{368,134},{0,0}},{{368,137},{0,2}},{{368,138},{0,0}},{{368,139},{0,2}},{{368,140},{0,0}},{{368,141},{0,1}},{{368,142},{0,0}},{{384,1},{2,0}},{{384,2},{2,0}},{{384,3},{0,2}},{{384,4},{0,0}},{{384,5},{0,1}},{{384,6},{0,0}},{{384,8},{2,0}},{{384,9},{2,0}},{{384,10},{0,0}},{{384,12},{0,0}},{{384,16},{2,0}},{{384,17},{0,2}},{{384,18},{0,2}},{{384,20},{2,0}},{{384,24},{1,2}},{{384,32},{0,0}},{{384,33},{0,1}},{{384,34},{0,0}},{{384,36},{0,0}},{{384,40},{1,1}},{{384,48},{2,0}},{{384,64},{0,0}},{{384,65},{0,1}},{{384,66},{0,0}},{{384,68},{1,1}},{{384,72},{0,0}},{{384,80},{0,2}},{{384,96},{1,1}},{{385,6},{1,0}},{{385,10},{0,2}},{{385,12},{0,1}},{{385,14},{1,1}},{{385,18},{2,0}},{{385,20},{2,0}},{{385,22},{2,0}},{{385,24},{1,2}},{{385,26},{1,2}},
{{385,28},{2,0}},{{385,34},{0,2}},{{385,36},{0,1}},{{385,38},{1,0}},{{385,40},{1,1}},{{385,42},{1,1}},{{385,44},{1,1}},{{385,48},{1,0}},{{385,50},{2,0}},{{385,52},{2,0}},{{385,66},{1,1}},{{385,68},{1,1}},{{385,70},{1,1}},{{385,72},{1,1}},{{385,74},{0,2}},{{385,76},{1,1}},{{385,80},{0,2}},{{385,82},{0,2}},{{385,88},{0,1}},{{385,96},{1,1}},{{385,98},{1,1}},{{385,100},{1,1}},{{385,104},{1,1}},{{385,112},{0,1}},{{386,5},{1,0}},{{386,9},{2,0}},{{386,12},{0,0}},{{386,13},{1,1}},{{386,17},{2,0}},{{386,20},{2,0}},{{386,21},{2,0}},{{386,24},{1,2}},{{386,25},{2,0}},{{386,28},{2,0}},{{386,33},{0,2}},{{386,36},{0,0}},{{386,37},{1,0}},{{386,40},{1,1}},{{386,41},{1,1}},{{386,44},{1,1}},{{386,48},{1,0}},{{386,49},{2,0}},{{386,52},{2,0}},{{386,65},{1,0}},{{386,68},{1,1}},{{386,69},{1,1}},{{386,72},{0,0}},{{386,76},{1,1}},{{386,80},{0,0}},{{386,81},{0,2}},{{386,88},{0,0}},{{386,96},{1,1}},{{386,97},{1,1}},{{386,100},{1,1}},{{386,104},{1,1}},{{386,112},{0,0}},{{387,28},{1,2}},{{387,44},{1,1}},{{387,52},{1,0}},{{387,76},{1,1}},{{387,88},{0,2}},{{387,100},{1,1}},{{387,104},{1,1}},{{387,108},{1,1}},{{387,112},{0,2}},{{388,3},{1,0}},{{388,9},{2,0}},{{388,10},{0,0}},{{388,11},{1,2}},{{388,17},{0,1}},{{388,18},{0,0}},{{388,19},{1,0}},{{388,24},{1,2}},{{388,25},{1,2}},{{388,26},{1,2}},{{388,33},{2,0}},{{388,34},{2,0}},{{388,35},{2,0}},{{388,40},{1,1}},{{388,41},{2,0}},{{388,42},{1,1}},{{388,48},{1,0}},{{388,49},{2,0}},{{388,50},{2,0}},{{388,65},{1,0}},{{388,66},{1,2}},{{388,67},{1,2}},{{388,72},{0,0}},{{388,74},{0,0}},{{388,80},{1,2}},{{388,81},{1,2}},{{388,82},{1,2}},{{388,88},{1,2}},{{388,96},{1,0}},{{388,97},{1,0}},{{388,98},{0,0}},{{388,104},{0,0}},{{388,112},{1,0}},{{389,26},{1,2}},{{389,42},{1,1}},
{{389,50},{1,0}},{{389,74},{1,1}},{{389,82},{1,2}},{{389,88},{1,2}},{{389,90},{1,2}},{{389,98},{1,1}},{{389,104},{1,1}},{{389,106},{1,1}},{{389,112},{1,0}},{{389,114},{1,0}},{{390,25},{1,2}},{{390,41},{1,1}},{{390,49},{1,0}},{{390,81},{1,0}},{{390,88},{0,0}},{{390,97},{1,0}},{{390,104},{0,0}},{{390,112},{1,0}},{{390,113},{1,0}},{{392,3},{0,2}},{{392,5},{0,1}},{{392,6},{0,0}},{{392,17},{2,0}},{{392,18},{2,0}},{{392,19},{0,2}},{{392,20},{2,0}},{{392,21},{2,0}},{{392,22},{2,0}},{{392,33},{2,0}},{{392,34},{2,0}},{{392,35},{2,0}},{{392,36},{0,0}},{{392,37},{0,1}},{{392,38},{0,0}},{{392,48},{2,0}},{{392,49},{2,0}},{{392,50},{2,0}},{{392,52},{2,0}},{{392,65},{0,2}},{{392,66},{0,2}},{{392,67},{0,2}},{{392,68},{0,0}},{{392,69},{0,1}},{{392,70},{0,0}},{{392,80},{0,2}},{{392,81},{0,2}},{{392,82},{0,2}},{{392,96},{0,0}},{{392,97},{0,1}},{{392,98},{0,0}},{{392,100},{1,1}},{{392,112},{0,2}},{{393,22},{2,0}},{{393,38},{1,1}},{{393,50},{2,0}},{{393,52},{2,0}},{{393,54},{2,0}},{{393,70},{1,1}},{{393,82},{0,2}},{{393,98},{1,1}},{{393,100},{1,1}},{{393,102},{1,1}},{{393,112},{0,2}},{{393,114},{0,2}},{{394,21},{2,0}},{{394,37},{1,1}},{{394,49},{2,0}},{{394,52},{2,0}},{{394,53},{2,0}},{{394,69},{1,1}},{{394,81},{0,2}},{{394,97},{1,1}},{{394,100},{1,1}},{{394,101},{1,1}},{{394,112},{0,2}},{{394,113},{0,2}},{{396,19},{1,2}},{{396,35},{2,0}},{{396,49},{2,0}},{{396,50},{2,0}},{{396,51},{2,0}},{{396,67},{1,2}},{{396,81},{1,2}},{{396,82},{1,2}},{{396,83},{1,2}},{{396,97},{0,1}},{{396,98},{0,0}},{{396,99},{1,1}},{{396,112},{0,0}},{{396,113},{0,1}},{{396,114},{0,0}},{{400,3},{0,2}},{{400,5},{0,1}},{{400,6},{0,0}},{{400,9},{2,0}},{{400,10},{0,0}},{{400,11},{2,0}},{{400,12},{0,0}},{{400,13},{0,1}},{{400,14},{0,0}},
{{400,33},{0,1}},{{400,34},{0,0}},{{400,35},{2,0}},{{400,36},{0,0}},{{400,37},{0,1}},{{400,38},{0,0}},{{400,40},{0,0}},{{400,41},{0,1}},{{400,42},{0,0}},{{400,44},{0,0}},{{400,65},{0,1}},{{400,66},{0,0}},{{400,67},{0,2}},{{400,68},{0,0}},{{400,69},{0,1}},{{400,70},{0,0}},{{400,72},{0,0}},{{400,74},{0,0}},{{400,76},{0,0}},{{400,96},{0,0}},{{400,97},{0,1}},{{400,98},{0,0}},{{400,100},{0,0}},{{400,104},{0,0}},{{404,11},{2,0}},{{404,35},{2,0}},{{404,41},{2,0}},{{404,42},{0,0}},{{404,43},{2,0}},{{404,67},{1,0}},{{404,74},{0,0}},{{404,97},{1,0}},{{404,98},{0,0}},{{404,99},{1,0}},{{404,104},{0,0}},{{404,106},{0,0}},{{408,35},{0,2}},{{408,37},{0,1}},{{408,38},{0,0}},{{408,67},{0,2}},{{408,69},{0,1}},{{408,70},{0,0}},{{408,97},{0,1}},{{408,98},{0,0}},{{408,99},{0,2}},{{408,100},{0,0}},{{408,101},{0,1}},{{408,102},{0,0}},{{416,3},{0,2}},{{416,5},{0,1}},{{416,6},{0,0}},{{416,9},{2,0}},{{416,10},{0,0}},{{416,11},{0,2}},{{416,12},{2,0}},{{416,13},{2,0}},{{416,14},{0,0}},{{416,17},{0,1}},{{416,18},{0,0}},{{416,19},{0,2}},{{416,20},{2,0}},{{416,21},{2,0}},{{416,22},{2,0}},{{416,24},{0,0}},{{416,25},{0,2}},{{416,26},{0,0}},{{416,28},{2,0}},{{416,65},{0,2}},{{416,66},{0,2}},{{416,67},{0,2}},{{416,68},{0,0}},{{416,69},{0,1}},{{416,70},{0,0}},{{416,72},{0,0}},{{416,74},{0,0}},{{416,76},{0,0}},{{416,80},{0,2}},{{416,81},{0,2}},{{416,82},{0,2}},{{416,88},{0,2}},{{417,14},{1,1}},{{417,22},{2,0}},{{417,26},{0,2}},{{417,28},{2,0}},{{417,30},{2,0}},{{417,70},{1,1}},{{417,74},{0,2}},{{417,76},{1,1}},{{417,78},{1,1}},{{417,82},{0,2}},{{417,88},{0,2}},{{417,90},{0,2}},{{418,13},{2,0}},{{418,21},{2,0}},{{418,25},{2,0}},{{418,28},{2,0}},{{418,29},{2,0}},{{418,69},{1,0}},{{418,76},{0,0}},{{418,81},{0,2}},
{{418,88},{0,0}},{{424,19},{0,2}},{{424,21},{0,1}},{{424,22},{0,0}},{{424,67},{0,2}},{{424,69},{0,1}},{{424,70},{0,0}},{{424,81},{0,2}},{{424,82},{0,2}},{{424,83},{0,2}},{{432,11},{0,2}},{{432,13},{0,1}},{{432,14},{0,0}},{{432,67},{0,2}},{{432,69},{0,1}},{{432,70},{0,0}},{{432,74},{0,0}},{{432,76},{0,0}},{{432,78},{0,0}}
};

typedef int Coord;
const Coord INVALID_COORD = -1;

/// Y is row
/// X is column
class Coords {
public:
	Coords();
	Coords(const Coords& rhs);
	Coords(Coord rowCoord, Coord colCoord);

	Coord getRowCoord() const { return rowCoord; }
	Coord getColCoord() const { return colCoord; }

	void setRowCoord(Coord rowCoord) { this->rowCoord = rowCoord; }
	void setColCoord(Coord colCoord) { this->colCoord = colCoord; }

	Coords& operator=(const Coords& rhs);
	bool operator==(const Coords& rhs);
	Coords operator+(const Coords& rhs);
	Coords& operator+=(const Coords& rhs);
	Coords operator-(const Coords& rhs);
	Coords& operator-=(const Coords& rhs);
	Coords operator*(const Coords& rhs);
	Coords& operator*=(const Coords& rhs);

	bool isValid() const;

	Coord distance(const Coords& coords) const;
	void roundCoords();

	friend Coord distance(const Coords& point0, const Coords& point1);
	friend ostream& operator<<(ostream& stream, const Coords& coords);
private:
	Coord rowCoord;
	Coord colCoord;
};

Coords::Coords() :
	rowCoord{ INVALID_COORD },
	colCoord{ INVALID_COORD }
{
}

Coords::Coords(const Coords& rhs) :
	rowCoord{ rhs.rowCoord },
	colCoord{ rhs.colCoord }
{
}

Coords::Coords(
	Coord rowCoord,
	Coord colCoord
) :
	rowCoord{ rowCoord },
	colCoord{ colCoord }
{
}

Coords& Coords::operator=(const Coords& rhs) {
	rowCoord = rhs.rowCoord;
	colCoord = rhs.colCoord;

	return *this;
}

bool Coords::operator==(const Coords& rhs) {
	return (rowCoord == rhs.rowCoord) && (colCoord == rhs.colCoord);
}

Coords Coords::operator+(const Coords& rhs) {
	return Coords(rowCoord + rhs.rowCoord, colCoord + rhs.colCoord);
}

Coords& Coords::operator+=(const Coords& rhs) {
	rowCoord += rhs.rowCoord;
	colCoord += rhs.colCoord;

	return *this;
}

Coords Coords::operator-(const Coords& rhs) {
	return Coords(rowCoord - rhs.rowCoord, colCoord - rhs.colCoord);
}

Coords& Coords::operator-=(const Coords& rhs) {
	rowCoord -= rhs.rowCoord;
	colCoord -= rhs.colCoord;

	return *this;
}

Coords Coords::operator*(const Coords& rhs) {
	return Coords(rowCoord * rhs.rowCoord, colCoord * rhs.colCoord);
}

Coords& Coords::operator*=(const Coords& rhs) {
	rowCoord *= rhs.rowCoord;
	colCoord *= rhs.colCoord;

	return *this;
}

bool Coords::isValid() const {
	return INVALID_COORD != rowCoord && INVALID_COORD != colCoord;
}

Coord Coords::distance(const Coords& coords) const {
	Coord kat0 = coords.rowCoord - rowCoord;
	Coord kat1 = coords.colCoord - colCoord;

	Coord hip = (Coord)sqrt((kat0 * kat0) + (kat1 * kat1));
	return hip;
}

void Coords::roundCoords() {
	rowCoord = static_cast<Coord>(round(rowCoord));
	colCoord = static_cast<Coord>(round(colCoord));
}

Coord distance(const Coords& point0, const Coords& point1) {
	Coord lineXLenght = static_cast<Coord>(abs(point0.rowCoord - point1.rowCoord));
	Coord lineYLenght = static_cast<Coord>(abs(point0.colCoord - point1.colCoord));

	Coord distance = static_cast<Coord>(sqrt((lineXLenght * lineXLenght) + (lineYLenght * lineYLenght)));

	return distance;
}

ostream& operator<<(ostream& stream, const Coords& coords) {
	stream << coords.rowCoord << SPACE << coords.colCoord;
	return stream;
}

enum Direction {
	DIR_INVALID = -1,
	DIR_N = 0,
	DIR_NE,
	DIR_E,
	DIR_SE,
	DIR_S,
	DIR_SW,
	DIR_W,
	DIR_NW,
};

Coords DIRECTIONS[DIRECTIONS_COUNT] = {
	Coords(0, -1), // N
	Coords(1, -1), // NE
	Coords(1,  0), // E
	Coords(1,  1), // SE
	Coords(0,  1), // S
	Coords(-1,  1), // SW
	Coords(-1,  0), // W
	Coords(-1, -1)  // NW
};

/// Represents the board with the played turns
class Board {
public:
	Board();
	Board(const Board& rhs);

	void setStatus(const BoardStatus status);
	void setPlayer(const int player);
	void setMove(const Coords move);

	BoardStatus getStatus() const;
	int getPlayer() const;
	Coords getMove() const;

	/// Initialize the board empty squares
	void init();

	/// Copy rhs board into this board
	void copy(const Board& rhs);

	/// Determine the mini board index by the given global position
	/// @param[in] pos the position on the big board
	/// @return the index of the mini board in the big board
	int getMiniBoardIdx(const Coords pos) const;

	/// Determine the mini board inner index by the given global position
	/// @param[in] pos the position on the big board
	/// @return the inner index of the mini board in the big board
	short getMiniBoardInnerIdx(const Coords pos) const;

	/// Determine the gloabal board postion by given the mini board index and inner mini board index
	/// @param[in] miniBoardIdx the index ofthe miniboard
	/// @param[in] miniBoardInnerIdx the index of the element in the mini board
	/// @return the position in the global big board
	Coords getBigBoardPosition(const int miniBoardIdx, const int miniBoardInnerIdx) const;

	/// Return the player index, played in the given position
	int getPlayerIdx(const Coords pos) const;

	/// Set the given player index in the given position
	void setPlayerIdx(const Coords pos, const int playerIdx);

	/// Check if the given move could be performed
	/// @param[in] move the coordinates on which the player plays
	/// @param[in] previousMove the coordinates on which the last player played
	/// return true if the given move could be performed
	bool validMove(const Coords move, const Coords previousMove);

	/// Appply the given move for the given player and chage the player
	/// @param[in] move the coordinates on which the player plays
	bool playMove(const Coords move);

	/// Return list of all playable coordinates
	vector<Coords> getAllPossibleMoves() const;

	/// Fill all possible moves in the given array
	/// @param[in] allMoves the array tp be filled
	/// @param[in] allMovesCount the count to be set for all moves
	void getAllPossibleMoves(Coords (&allMoves)[ALL_SQUARES], int& allMovesCount) const;

	/// Toggle player
	int togglePlayer(const int playerToToggle) const;

	/// Play game with random moves until end of the game is reached
	/// @param[in] allMoves the array tp be filled
	/// @param[in] allMovesCount the count to be set for all moves
	/// @return the result of the game
	int simulateRandomGame(Coords(&allMoves)[ALL_SQUARES], int& allMovesCount);

	Board& operator=(const Board& board);
	friend ostream& operator<<(std::ostream& stream, const Board& board);

	/// Debug the Board online
	void debug() const;

private:
	/// Return possible moves for the given mini board
	vector<Coords> getAllPossibleMovesForMiniBoard(const int miniBoardIdx) const;

	/// Fill all possible moves, for the given board, in the given array
	/// @param[in] miniBoardIdx the moves for the this board
	/// @param[in] allMoves the array tp be filled
	/// @param[in] allMovesCount the count to be set for all moves
	void getAllPossibleMovesForMiniBoard(const int miniBoardIdx, Coords(&allMoves)[ALL_SQUARES], int& allMovesCount) const;

	/// Return possible moves in all mini boards
	vector<Coords> getAllPossibleMovesForAllMiniBoards() const;

	/// Fill all possible moves, for the big board, in the given array
	/// @param[in] allMoves the array tp be filled
	/// @param[in] allMovesCount the count to be set for all moves
	void getAllPossibleMovesForAllMiniBoards(Coords(&allMoves)[ALL_SQUARES], int& allMovesCount) const;

	/// Return true if the player wins on the given board
	bool checkForWin(const short boardToCheck) const;

	/// Return true if the given board is full
	bool boardFull(const short boardToCheck) const;

	/// Return true if the given mini board is playable
	bool playableMiniBoard(const int miniBoardIdx) const;

	/// Detemine which player wins when the board is full
	BoardStatus resolveDraw() const;

	/// Return true if the mini board could be used for play
	bool miniBoardPlayable(const int miniBoardIdx) const;

	short board[SQUARE_TYPES][BOARD_DIM]; /// Board for each player, each short representa a tictactoe board
	short bigBoard[SQUARE_TYPES]; /// Big Board for each player, each short representa a tictactoe board
	unsigned short flags; ///< Flags and masks for the board
	short bigBoardDraw; ///< Flags indicating which mini boards ended in draw
};

Board::Board() {
	init();
}

Board::Board(const Board& rhs) {
	copy(rhs);
}

void Board::setStatus(const BoardStatus status) {
	unsigned statusToSet = static_cast<unsigned>(status);
	statusToSet <<= STATUS_OFFSET;

	flags &= ~STATUS_MASK; // First zero out the current status
	flags |= statusToSet;
}

void Board::setPlayer(const int player) {
	flags &= ~PLAYER_FLAG; // First zero out the player flag
	flags |= player;
}

void Board::setMove(Coords move) {
	unsigned rowToSet = static_cast<unsigned>(move.getRowCoord());
	unsigned colToSet = static_cast<unsigned>(move.getColCoord());

	rowToSet <<= MOVE_ROW_OFFSET;
	colToSet <<= MOVE_COL_OFFSET;

	flags &= ~MOVE_ROW_MASK; // Zero out the row
	flags &= ~MOVE_COL_MASK; // Zero out the col

	flags |= rowToSet;
	flags |= colToSet;
}

BoardStatus Board::getStatus() const {
	return static_cast<BoardStatus>((STATUS_MASK & flags) >> STATUS_OFFSET);
}

int Board::getPlayer() const {
	return static_cast<int>(PLAYER_FLAG & flags);
}

Coords Board::getMove() const {
	Coords res;

	res.setRowCoord((flags & MOVE_ROW_MASK) >> MOVE_ROW_OFFSET);
	res.setColCoord((flags & MOVE_COL_MASK) >> MOVE_COL_OFFSET);

	return res;
}

void Board::init() {
	for (int sqType = 0; sqType < SQUARE_TYPES; ++sqType) {
		for (int miniBoardIdx = 0; miniBoardIdx < BOARD_DIM; ++miniBoardIdx) {
			board[sqType][miniBoardIdx] = EMPTY_TICTACTOE_BOARD;
		}
	}

	for (int miniBoardIdx = 0; miniBoardIdx < BOARD_DIM; ++miniBoardIdx) {
		bigBoard[miniBoardIdx] = EMPTY_TICTACTOE_BOARD;
	}

	flags = 0;
	setStatus(BoardStatus::IN_PROGRESS);
	bigBoardDraw = EMPTY_TICTACTOE_BOARD;
}

void Board::copy(const Board& rhs) {
	this->flags = rhs.flags;
	this->bigBoardDraw = rhs.bigBoardDraw;

	for (int sqTypeIdx = 0; sqTypeIdx < SQUARE_TYPES; ++sqTypeIdx) {
		for (int miniBoardIdx = 0; miniBoardIdx < BOARD_DIM; ++miniBoardIdx) {
			this->board[sqTypeIdx][miniBoardIdx] = rhs.board[sqTypeIdx][miniBoardIdx];
		}

		this->bigBoard[sqTypeIdx] = rhs.bigBoard[sqTypeIdx];
	}
}

int Board::getMiniBoardIdx(const Coords pos) const {
	const int bigBoardRowIdx = pos.getRowCoord() / TRIPLE;
	const int bigBoardColIdx = pos.getColCoord() / TRIPLE;
	const int miniBoardIdx = (bigBoardRowIdx * TRIPLE) + bigBoardColIdx;

	return miniBoardIdx;
}

short Board::getMiniBoardInnerIdx(const Coords pos) const {
	const int miniBoardRowIdx = pos.getRowCoord() % TRIPLE;
	const int miniBoardColIdx = pos.getColCoord() % TRIPLE;
	const short miniBoardInnerIdx = (miniBoardRowIdx * TRIPLE) + miniBoardColIdx;

	return miniBoardInnerIdx;
}

Coords Board::getBigBoardPosition(const int miniBoardIdx, const int miniBoardInnerIdx) const {
	const int miniBoardRowIdx = miniBoardIdx / TRIPLE;
	const int miniBoardColIdx = miniBoardIdx % TRIPLE;

	const int miniBoardInnerRowIdx = miniBoardInnerIdx / TRIPLE;
	const int miniBoardInnerColIdx = miniBoardInnerIdx % TRIPLE;

	const int gloabalRowIdx = miniBoardInnerRowIdx + (miniBoardRowIdx * TRIPLE);
	const int gloabalColIdx = miniBoardInnerColIdx + (miniBoardColIdx * TRIPLE);

	return { gloabalRowIdx, gloabalColIdx };
}

int Board::getPlayerIdx(const Coords pos) const {
	int playerIdx = INVALID_IDX;

	const int miniBoardIdx = getMiniBoardIdx(pos);
	const short miniBoardInnerIdx = getMiniBoardInnerIdx(pos);

	const short miniBoardXes = board[0][miniBoardIdx];
	const short miniBoardOs = board[1][miniBoardIdx];

	if (miniBoardXes & (1 << miniBoardInnerIdx)) {
		playerIdx = MY_PLAYER_IDX;
	}
	else if (miniBoardOs & (1 << miniBoardInnerIdx)) {
		playerIdx = OPPONENT_PLAYER_IDX;
	}

	return playerIdx;
}

void Board::setPlayerIdx(const Coords pos, const int playerIdx) {
	const int miniBoardIdx = getMiniBoardIdx(pos);
	const short miniBoardInnerIdx = getMiniBoardInnerIdx(pos);

	board[playerIdx][miniBoardIdx] |= 1 << miniBoardInnerIdx;
}

bool Board::validMove(const Coords move, const Coords previousMove) {
	bool valid = true;

	const short miniBoardIdx = static_cast<short>(getMiniBoardIdx(move));
	const short miniBoardIdxFromPrevMove = getMiniBoardInnerIdx(previousMove);

	if (!miniBoardPlayable(miniBoardIdxFromPrevMove) || miniBoardIdx == miniBoardIdxFromPrevMove) {
		if (miniBoardPlayable(miniBoardIdx)) {
			const short miniBoardInnerIdx = getMiniBoardInnerIdx(move);

			const bool iPlayedOnSquare = board[MY_PLAYER_IDX][miniBoardIdx] & (1 << miniBoardInnerIdx);
			const bool opponentPlayedOnSquare = board[OPPONENT_PLAYER_IDX][miniBoardIdx] & (1 << miniBoardInnerIdx);
			valid = !iPlayedOnSquare && !opponentPlayedOnSquare;
		}
		else {
			valid = false;
		}
	}
	else {
		valid = false;
	}

	return valid;
}

bool Board::playMove(const Coords move) {
	bool movePlayed = false;
	const int player = getPlayer();

	//if (validMove(move)) {
		setMove(move);
		setPlayerIdx(move, player);

		const int miniBoardIdx = getMiniBoardIdx(move);
		const short miniBoard = board[player][miniBoardIdx];
		if (checkForWin(miniBoard)) {
			bigBoard[player] |= (1 << miniBoardIdx);
		}
		else if (boardFull(board[MY_PLAYER_IDX][miniBoardIdx] | board[OPPONENT_PLAYER_IDX][miniBoardIdx])) {
			bigBoardDraw |= (1 << miniBoardIdx);
		}

		if (checkForWin(bigBoard[player])) {
			setStatus((MY_PLAYER_IDX == player) ? BoardStatus::I_WON : BoardStatus::OPPONENT_WON);
		}
		else if (boardFull(bigBoard[MY_PLAYER_IDX] | bigBoard[OPPONENT_PLAYER_IDX] | bigBoardDraw)) {
			setStatus(resolveDraw());
		}

		setPlayer(togglePlayer(player));
		movePlayed = true;
	//}

	return movePlayed;
}

vector<Coords> Board::getAllPossibleMoves() const {
	const int activeMiniBoardIdx = getMiniBoardInnerIdx(getMove()); // Current moves detemine the next mini board
	vector<Coords> miniBoardEmptyPositions = getAllPossibleMovesForMiniBoard(activeMiniBoardIdx);

	if (0 == miniBoardEmptyPositions.size()) {
		miniBoardEmptyPositions = getAllPossibleMovesForAllMiniBoards();
	}

	return miniBoardEmptyPositions;
}

int Board::simulateRandomGame(Coords(&allMoves)[ALL_SQUARES], int& allMovesCount) {
	while (BoardStatus::IN_PROGRESS == getStatus()) {
		getAllPossibleMoves(allMoves, allMovesCount);
		playMove(allMoves[fast_rand() % allMovesCount]);
	}

	return BoardStatus::I_WON == getStatus() ? MY_PLAYER_IDX : OPPONENT_PLAYER_IDX;
}

Board& Board::operator=(const Board& rhs) {
	copy(rhs);
	return *this;
}

void Board::debug() const {
}

void Board::getAllPossibleMoves(Coords (&allMoves)[ALL_SQUARES], int& allMovesCount) const {
	allMovesCount = 0;

	const int activeMiniBoardIdx = getMiniBoardInnerIdx(getMove()); // Current moves detemine the next mini board
	getAllPossibleMovesForMiniBoard(activeMiniBoardIdx, allMoves, allMovesCount);

	if (0 == allMovesCount) {
		getAllPossibleMovesForAllMiniBoards(allMoves, allMovesCount);
	}
}

int Board::togglePlayer(const int playerToToggle) const {
	return PLAYER_TOGGLE - (playerToToggle + 1);
}

vector<Coords> Board::getAllPossibleMovesForMiniBoard(const int miniBoardIdx) const {
	vector<Coords> moves;
	moves.reserve(BOARD_DIM);

	if (playableMiniBoard(miniBoardIdx)) {
		const short opponentBoard = board[OPPONENT_PLAYER_IDX][miniBoardIdx];
		const short myBoard = board[MY_PLAYER_IDX][miniBoardIdx];

		for (int sqIdx = 0; sqIdx < BOARD_DIM; ++sqIdx) {
			const short squareMask = 1 << sqIdx;
			if (!(opponentBoard & squareMask) && !(myBoard & squareMask)) {
				Coords squarePosition = getBigBoardPosition(miniBoardIdx, sqIdx);
				moves.push_back(squarePosition);
			}
		}
	}

	return moves;
}

void Board::getAllPossibleMovesForMiniBoard(const int miniBoardIdx, Coords(&allMoves)[ALL_SQUARES], int& allMovesCount) const {
	if (playableMiniBoard(miniBoardIdx)) {
		const short opponentBoard = board[OPPONENT_PLAYER_IDX][miniBoardIdx];
		const short myBoard = board[MY_PLAYER_IDX][miniBoardIdx];

		for (int sqIdx = 0; sqIdx < BOARD_DIM; ++sqIdx) {
			const short squareMask = 1 << sqIdx;
			//const short squareMask = SQUARE_MASKS_PRIORITY[sqIdx];
			if (!(opponentBoard & squareMask) && !(myBoard & squareMask)) {
				allMoves[allMovesCount] = getBigBoardPosition(miniBoardIdx, sqIdx);
				//allMoves[allMovesCount] = getBigBoardPosition(miniBoardIdx, MINIBOARDS_PRIORITY[sqIdx]);
				++allMovesCount;
			}
		}
	}
}

vector<Coords> Board::getAllPossibleMovesForAllMiniBoards() const {
	vector<Coords> allMoves;
	allMoves.reserve(BOARD_DIM * BOARD_DIM);
	
	for (int miniBoardIdx = 0; miniBoardIdx < BOARD_DIM; ++miniBoardIdx) {
		vector<Coords> miniBoardMoves = getAllPossibleMovesForMiniBoard(miniBoardIdx);
		allMoves.insert(allMoves.end(), miniBoardMoves.begin(), miniBoardMoves.end());
	}

	return allMoves;
}

void Board::getAllPossibleMovesForAllMiniBoards(Coords (&allMoves)[ALL_SQUARES], int& allMovesCount) const {
	for (int miniBoardIdx = 0; miniBoardIdx < BOARD_DIM; ++miniBoardIdx) {
		getAllPossibleMovesForMiniBoard(miniBoardIdx, allMoves, allMovesCount);
		//getAllPossibleMovesForMiniBoard(MINIBOARDS_PRIORITY[miniBoardIdx], allMoves, allMovesCount);
	}
}

bool Board::checkForWin(const short boardToCheck) const {
	bool playerWon = false;

	for (int winMaskIdx = 0; winMaskIdx < WIN_MASKS_COUNT; ++winMaskIdx) {
		if (WIN_MASKS[winMaskIdx] == (WIN_MASKS[winMaskIdx] & boardToCheck)) {
			playerWon = true;
			break;
		}
	}

	return playerWon;
}

bool Board::boardFull(const short boardToCheck) const {
	return FULL_BOARD_MASK == (FULL_BOARD_MASK & boardToCheck);
}

bool Board::playableMiniBoard(const int miniBoardIdx) const {
	const short miniBoardMask = 1 << miniBoardIdx;
	const bool boardWon = (miniBoardMask & bigBoard[MY_PLAYER_IDX]) || (miniBoardMask & bigBoard[OPPONENT_PLAYER_IDX]);
	const bool boardDraw = miniBoardMask & bigBoardDraw;

	return !boardWon && !boardDraw;
}

BoardStatus Board::resolveDraw() const {
	int opponentMiniBoardsWon = 0;
	int mineMiniBoardsWon = 0;

	for (int miniBoardIdx = 0; miniBoardIdx < BOARD_DIM; ++miniBoardIdx) {
		if (bigBoard[OPPONENT_PLAYER_IDX] & (1 << miniBoardIdx)) {
			++opponentMiniBoardsWon;
		}
		else {
			++mineMiniBoardsWon;
		}
	}

	return (opponentMiniBoardsWon > mineMiniBoardsWon) ? BoardStatus::OPPONENT_WON : BoardStatus::I_WON;
}

bool Board::miniBoardPlayable(const int miniBoardIdx) const {
	const bool iWonMiniBoard = bigBoard[MY_PLAYER_IDX] & (1 << miniBoardIdx);
	const bool opponentWonMiniBoard = bigBoard[OPPONENT_PLAYER_IDX] & (1 << miniBoardIdx);
	const bool drawnMiniBoard = bigBoardDraw & (1 << miniBoardIdx);

	return !iWonMiniBoard && !opponentWonMiniBoard && !drawnMiniBoard;
}

ostream& operator<<(std::ostream& stream, const Board& board) {
	for (int rowIdx = 0; rowIdx < BOARD_DIM + 1; ++rowIdx) {
		if (rowIdx > 0 && 0 == rowIdx % TRIPLE) {
			stream << endl;
		}

		for (int colIdx = 0; colIdx < BOARD_DIM + 1; ++colIdx) {
			if (0 == colIdx % TRIPLE) {
				stream << SPACE << SPACE << SPACE;
			}

			if (BOARD_DIM == rowIdx) {
				stream << colIdx;
			}
			else if (BOARD_DIM == colIdx) {
				stream << rowIdx;
			}
			else {
				const int playerIdx = board.getPlayerIdx({ rowIdx, colIdx });

				switch (playerIdx) {
					case MY_PLAYER_IDX: { stream << MY_PLAYER_CHAR; break; }
					case OPPONENT_PLAYER_IDX: { stream << OPPONENT_PLAYER_CHAR; break; }
					default: { stream << EMPTY_CHAR; break; }
				}
			}
		}

		stream << endl;
	}

	return stream;
}

class State {
public:
	State(const Board& board, const int visits, const double winScore);

	void setBoard(const Board& board) { this->board = board; }
	void setVisits(const int visits) { this->visits = visits; }
	void setWinScore(const double winScore) { this->winScore = winScore; }

	const Board& getBoard() const { return board; }
	Board& getBoard() { return board; }
	int getVisits() const { return visits; }
	double getWinScore() const { return winScore; }

	/// Debug the State online
	void debug() const;

private:
	Board board; ///< The game board state, which this node represents
	int visits; ///< How many times this state is visited by the MCTS alogrithm
	double winScore; ///< Score of the state
};

State::State(const Board& board, const int visits, const double winScore) :
	board{ board },
	visits{ visits },
	winScore{ winScore }
{
}

void State::debug() const {
	cerr << "winScore: " << winScore << endl;
}

/// Represents a Node in the MCST
class Node {
public:
	Node(const State& state, const int parentIdx);

	const State& getState() const { return state; }
	State& getState() { return state; }
	//const vector<int>& getChildren() const { return children; }
	int getFirstChild() const { return firstChild; }
	int getParentIdx() const { return parentIdx; }

	/// Add child node wiht the given index
	void addChild(const int childIdxNode);

	/// Return the count of the children for this node
	int getChildrenCount() const;

	/// Debug the Node online
	void debug() const;

private:
	State state; ///< Game state information (wins/visits) including the board
	int firstChild; ///< Index of the first child in the global nodes array
	int parentIdx; ///< The index of the parent node
	char childrenCount; ///< Children count
};

Node::Node(const State& state, const int parentIdx) :
	state{ state },
	firstChild{ INVALID_IDX},
	childrenCount{ 0 },
	parentIdx{ parentIdx }
{
}

void Node::addChild(const int childIdxNode) {
	if (0 == childrenCount) {
		firstChild = childIdxNode;
	}

	++childrenCount;
}

int Node::getChildrenCount() const {
	return childrenCount;
}

void Node::debug() const {
	state.debug();
}

/// Represent the search tree
class Tree {
public:
	int getNodesCount() const { return static_cast<int>(nodes.size()); }

	/// Initialize the tree with single root node
	/// @param[in] initialBoard the starting board
	void init(const Board& initialBoard);

	/// Return the node with the given index
	const Node& getNode(const int nodeIdx) const { return nodes[nodeIdx]; }
	Node& getNode(const int nodeIdx) { return nodes[nodeIdx]; }

	/// Set the starting player for the game
	void setRootPlayer(const int playerIdx);

	/// Add the given node to the tree and return its index
	int addNode(const Node& node);

	/// Print the tree to file for easy debug
	void print() const;

	/// Debug the tree online
	void debug() const;

private:
	/// Use DFS to print the tree to file
	/// @param[in] depth the current depth of the tree
	/// @param[in] nodeToExplore the current Node to explore
	/// @param[in] lastChild true if the last child must be printed
	/// @param[out] treeString the string which is updated at each depth
	void dfsPrint(const int depth, const int nodeToExplore, const bool lastChild, string& treeString) const;

	vector<Node> nodes; ///< All nodes used in the tree
};

void Tree::init(const Board& initialBoard) {
	nodes.reserve(NODES_TO_RESERVE);

	State rootState{ initialBoard, 0, 0 };
	Node rootNode{ rootState, INVALID_IDX };
	nodes.push_back(rootNode);
}

void Tree::setRootPlayer(const int playerIdx) {
	nodes[0].getState().getBoard().setPlayer(playerIdx);
}

int Tree::addNode(const Node& node) {
	assert(nodes.capacity() <= NODES_TO_RESERVE);

	nodes.push_back(node);
	return static_cast<int>(nodes.size() - 1);
}

void Tree::print() const {
	string treeString = EMPTY_STRING;
	dfsPrint(0, 0, false, treeString);

	//cerr << treeString << endl;
	int debug = 0;
	++debug;
}

void Tree::debug() const {
	for (size_t nodeIdx = 0; nodeIdx < nodes.size(); ++nodeIdx) {
		cerr << "Node[" << nodeIdx << "]: " << endl;
		nodes[nodeIdx].debug();
	}
}

void Tree::dfsPrint(const int depth, const int nodeToExploreIdx, const bool lastChild, string& treeString) const {
	const Node& nodeToExplore = nodes[nodeToExploreIdx];

	printTabs(depth, treeString);
	treeString += "{\n";
	printTabs(depth + 1, treeString);
	treeString += R"("name": ")";
	treeString += to_string(nodeToExploreIdx);
	treeString += "[";
	treeString += to_string(nodeToExplore.getState().getBoard().getMove().getRowCoord());
	treeString += "; ";
	treeString += to_string(nodeToExplore.getState().getBoard().getMove().getColCoord());
	treeString += "]";
	treeString += to_string(static_cast<int>(nodeToExplore.getState().getWinScore()));
	treeString += R"(")";

	const int childrenCount = nodeToExplore.getChildrenCount();
	if (childrenCount > 0) {
		treeString += ",\n";
		printTabs(depth + 1, treeString);
		treeString += R"("children": [)";
		treeString += "\n";
		printTabs(depth + 1, treeString);

		const int nodesFirstChild = nodeToExplore.getFirstChild();
		for (int i = 0; i < nodeToExplore.getChildrenCount(); ++i) {
			dfsPrint(depth + 1, nodesFirstChild + i, i == (childrenCount - 1), treeString);
		}

		printTabs(depth + 1, treeString);
		treeString += "]\n";
	}
	else {
		treeString += "\n";
	}

	printTabs(depth, treeString);
	treeString += "}";
	if (!lastChild && !(0 == depth)) {
		treeString += ",";
	}
	treeString += "\n";
}

/// Run MonteCarlo tree search simulation to find the best move for the current state of the board
class MonteCarloTreeSearch {
public:
	MonteCarloTreeSearch(Board& initialBoard);

	void setOpponentMove(const Coords opponentMove) { this->opponentMove = opponentMove; }
	void setTimeLimit(long long timeLimit) { this->timeLimit = timeLimit; }

	Coords getBestMove() const { return bestMove; }
	long long getTimeLimit() const { return timeLimit; }
	int getNodesCount() const { return searchTree.getNodesCount(); }

	/// Find the best move
	/// @param[in] turnIdx the turn index
	void solve(const int turnIdx);

	/// Set the starting player for the game
	void setRootPlayer(const int playerIdx);

	/// Print the search tree to file for easy visual debug
	void printSearchTree() const;

	/// Debug the tree online
	void debug() const;

private:
	/// Starting form the current turn root, select most promising child node until a leaf node is reached
	/// @return the idx of the selected node
	int selectPromisingNode() const;

	/// Expand the search tree with adding all possible child nodes to the selected node
	/// @param[in] selectedNode the node to expand
	void expansion(const int selectedNode);

	/// Expand the search tree with adding all possible child nodes to the selected node
	/// @param[in] selectedNode the node to expand
	/// @param[in] allMoves the all moves array to reuse
	/// @param[in] allMovesCount allMovesCOunt to reuse
	void expansion(const int selectedNode, Coords(&allMoves)[ALL_SQUARES], int& allMovesCount);

	/// Simulate game with random moves until the end
	/// @pram[in] nodeToExploreIdx the node for which to simulate the game
	/// @param[in] allMoves the all moves array to reuse
	/// @param[in] allMovesCount allMovesCOunt to reuse
	/// @return the idx of the player who wins, -1 if draw
	int simulation(const int nodeToExploreIdx, Coords(&allMoves)[ALL_SQUARES], int& allMovesCount);

	/// Back propagate the simulation result through the parents until the root
	/// @param[in] nodeToExploreIdx the explored node
	/// @param[in] simulationResult the result form the simulation step
	void backPropagation(const int nodeToExploreIdx, const int simulationResult);

	/// Calculate the upper confidence bound for the given parmeters
	/// @param[in] nodeWinScore the score so far for the node
	/// @param[in] parentVisits the number of visits for the parent
	/// @param[in] nodeVisit the number of visits for the node
	/// @return the UCT score
	double uct(const double nodeWinScore, const int parentVisits, const int nodeVisit) const;

	/// Start the search
	/// @param[in] turnIdx the turn index
	void searchBegin(const int turnIdx);

	/// Conclude the search choosing the best move and updating the root
	/// @param[in] turnIdx the turn index
	void searchEnd(const int turnIdx);

	Tree searchTree; ///< The actual search tree for the algotrithm
	Coords opponentMove; ///< The last move for the opponent
	Coords bestMove; ///< The best move chosen from the simulation
	Board& initialBoard; ///< Current state of the board
	long long timeLimit; ///< How long to simulate
	double sqrtOf2; ///< Square root of tw, compute only once
	double maxDouble; ///< Infinity
	int turnRootNodeIdx; ///< The root node for the current turn, from which the simulations starts
};

MonteCarloTreeSearch::MonteCarloTreeSearch(Board& initialBoard) :
	initialBoard{ initialBoard },
	timeLimit{ 0 },
	turnRootNodeIdx{ 0 }
{
	sqrtOf2 = sqrt(2.0);
	maxDouble = numeric_limits<double>::max();
	searchTree.init(initialBoard);
}

void MonteCarloTreeSearch::solve(const int turnIdx) {
	searchBegin(turnIdx);

	Coords allMoves[ALL_SQUARES]; // Reuse array
	int allMovesCount;

	int iteration = 0;
	chrono::steady_clock::time_point start = std::chrono::steady_clock::now();
	const chrono::steady_clock::time_point loopEnd = start + chrono::milliseconds{ timeLimit };
	
	for (chrono::steady_clock::time_point now = start; now < loopEnd; now = std::chrono::steady_clock::now()) {
		int selectedNodeIdx = selectPromisingNode();
		const Node& selectedNode = searchTree.getNode(selectedNodeIdx);

		if (BoardStatus::IN_PROGRESS == selectedNode.getState().getBoard().getStatus()) {
			expansion(selectedNodeIdx, allMoves, allMovesCount);
			selectedNodeIdx = selectedNode.getFirstChild();
		}

		int victoriousPlayer = simulation(selectedNodeIdx, allMoves, allMovesCount);
		backPropagation(selectedNodeIdx, victoriousPlayer);

		++iteration;
	}

	cerr << "MCTS iterations: " << iteration << endl;
	cerr << "Nodes count: " << searchTree.getNodesCount() << endl;

	searchEnd(turnIdx);
}

void MonteCarloTreeSearch::setRootPlayer(const int playerIdx) {
	searchTree.setRootPlayer(playerIdx);
}

void MonteCarloTreeSearch::printSearchTree() const {
	searchTree.print();
}

void MonteCarloTreeSearch::debug() const {

}

int MonteCarloTreeSearch::selectPromisingNode() const {
	int currentNodeIdx = turnRootNodeIdx;

	while (searchTree.getNode(currentNodeIdx).getChildrenCount() > 0) {
		const Node& currentNode = searchTree.getNode(currentNodeIdx);
		const int parentVisits = currentNode.getState().getVisits();
		const int nodeFirstChild = currentNode.getFirstChild();

		double maxUCT = -1.0;
		for (int childIdx = 0; childIdx < currentNode.getChildrenCount(); ++childIdx) {
			const int childNodeIdx = nodeFirstChild + childIdx;
			const Node& childNode = searchTree.getNode(childNodeIdx);
			const State& childState = childNode.getState();
			const double childUCT = uct(childState.getWinScore(), parentVisits, childState.getVisits());

			if (childUCT > maxUCT) {
				maxUCT = childUCT;
				currentNodeIdx = childNodeIdx;
			}
		}
	}

	return currentNodeIdx;
}

void MonteCarloTreeSearch::expansion(const int selectedNode) {
	Node& parentNode = searchTree.getNode(selectedNode);
	const State& parentState = parentNode.getState();
	const Board& parentBoard = parentState.getBoard();
	vector<Coords> allMoves = parentBoard.getAllPossibleMoves();
	const int allMovesCount = static_cast<int>(allMoves.size());

	for (int moveIdx = 0; moveIdx < allMovesCount; ++moveIdx) {
		Board childBoard{ parentBoard };
		childBoard.playMove(allMoves[moveIdx]);

		State childState{ childBoard, 0, 0.0 };
		Node childNode{ childState, selectedNode };

		const int childNodeIdx = searchTree.addNode(childNode);
		parentNode.addChild(childNodeIdx);
	}
}

void MonteCarloTreeSearch::expansion(const int selectedNode, Coords(&allMoves)[ALL_SQUARES], int& allMovesCount) {
	Node& parentNode = searchTree.getNode(selectedNode);
	const State& parentState = parentNode.getState();
	const Board& parentBoard = parentState.getBoard();
	parentBoard.getAllPossibleMoves(allMoves, allMovesCount);

	for (int moveIdx = 0; moveIdx < allMovesCount; ++moveIdx) {
		Board childBoard{ parentBoard };
		childBoard.playMove(allMoves[moveIdx]);

		State childState{ childBoard, 0, 0.0 };
		Node childNode{ childState, selectedNode };

		const int childNodeIdx = searchTree.addNode(childNode);
		parentNode.addChild(childNodeIdx);
	}

}

int MonteCarloTreeSearch::simulation(const int nodeToExploreIdx, Coords(&allMoves)[ALL_SQUARES], int& allMovesCount) {
	// Copy board, so no need to reset afterwards
	Board boardToSimulate = searchTree.getNode(nodeToExploreIdx).getState().getBoard();

	return boardToSimulate.simulateRandomGame(allMoves, allMovesCount);
}

void MonteCarloTreeSearch::backPropagation(const int nodeToExploreIdx, const int victoriousPlayer) {
	//cerr << "backPropagation" << endl;
	int currentNodeIdx = nodeToExploreIdx;
	while (INVALID_IDX != currentNodeIdx) {
		Node& currentNode = searchTree.getNode(currentNodeIdx);
		State& currentNodeState = currentNode.getState();
		currentNodeState.setVisits(currentNodeState.getVisits() + 1);

		int ownerPlayer = currentNodeState.getBoard().getPlayer();
		ownerPlayer = currentNodeState.getBoard().togglePlayer(ownerPlayer);
		if (ownerPlayer == victoriousPlayer) {
			currentNodeState.setWinScore(currentNodeState.getWinScore() + WIN_VALUE);
		}

		currentNodeIdx = currentNode.getParentIdx();
	}
}

double MonteCarloTreeSearch::uct(const double nodeWinScore, const int parentVisits, const int nodeVisit) const {
	double uctValue{ maxDouble };

	if (nodeVisit > 0) {
		const double nodeVisitDouble = static_cast<double>(nodeVisit);
		const double totalVisitsDouble = static_cast<double>(parentVisits);
		const double winVisitsRatio = nodeWinScore / nodeVisitDouble;
		const double confidentRatio = sqrtOf2 * sqrt(log(totalVisitsDouble) / nodeVisitDouble); // sqrt and log may slow the program

		uctValue = winVisitsRatio + confidentRatio;
	}

	return uctValue;
}

void MonteCarloTreeSearch::searchBegin(const int turnIdx) {
	if (0 == turnIdx) {
		searchTree.getNode(turnRootNodeIdx).getState().setBoard(initialBoard);
	}
	else {
		const Node& currentRoot = searchTree.getNode(turnRootNodeIdx);
		const int currentRootFirstChild = currentRoot.getFirstChild();
		for (int childIdx = 0; childIdx < currentRoot.getChildrenCount(); ++childIdx) {
			const Node& child = searchTree.getNode(currentRootFirstChild + childIdx);
			const Coords childMove = child.getState().getBoard().getMove();

			if (opponentMove == child.getState().getBoard().getMove()) {
				turnRootNodeIdx = currentRootFirstChild + childIdx;
			}
		}
	}

	cerr << "turnRootNodeIdx: " << turnRootNodeIdx << endl;
}

void MonteCarloTreeSearch::searchEnd(const int turnIdx) {
	if (0 == turnIdx && !opponentMove.isValid()) {
		// If I'm fisrt the tree is build for a play in the middle
		bestMove = { BOARD_DIM / 2, BOARD_DIM / 2 };
	}
	else {
		const int rootFirstChild = searchTree.getNode(turnRootNodeIdx).getFirstChild();
		const int rootChildrenCount = searchTree.getNode(turnRootNodeIdx).getChildrenCount();

		if (rootChildrenCount > 0) {
			int bestChildIdx = rootFirstChild; // Score for all children may be 0.0
			double maxScore = 0.0;
			for (int childIdx = 0; childIdx < rootChildrenCount; ++childIdx) {
				const int childNodeIdx = rootFirstChild + childIdx;
				const double childScore = searchTree.getNode(childNodeIdx).getState().getWinScore();
				if (childScore > maxScore) {
					maxScore = childScore;
					bestChildIdx = childNodeIdx;
				}
			}

			bestMove = searchTree.getNode(bestChildIdx).getState().getBoard().getMove();
			turnRootNodeIdx = bestChildIdx;

			if (0 == searchTree.getNode(turnRootNodeIdx).getChildrenCount()) {
				expansion(turnRootNodeIdx);
			}
		}
	}

	//printSearchTree();
}

class Game {
public:
	Game();
	~Game();

	void initGame();
	void gameBegin();
	void gameEnd();
	void gameLoop();
	void getGameInput();
	void getTurnInput();
	void turnBegin();
	void makeTurn();
	void turnEnd();
	void play();

	void debug() const;

private:
	// Game specific members
	Board board; ///< The board on which the game is played
	MonteCarloTreeSearch monteCarloTreeSearch; ///< The AI algorithm
	Coords opponentMove; ///< The coordinates on which the opponent plays

	int turnsCount;
	int stopGame;
};

Game::Game() :
	board{},
	monteCarloTreeSearch{ board },
	opponentMove{},
	turnsCount{ 0 },
	stopGame{ false }
{

}

Game::~Game() {
}

void Game::initGame() {
	fast_srand(444);
}

void Game::gameBegin() {
}

void Game::gameEnd() {
}

void Game::gameLoop() {
	while (!stopGame) {
#ifdef TIME_MEASURERMENT
		chrono::steady_clock::time_point begin = chrono::steady_clock::now();
#endif // TIME_MEASURERMENT

		getTurnInput();
		turnBegin();
		makeTurn();
		turnEnd();

#ifdef TIME_MEASURERMENT
		chrono::steady_clock::time_point end = chrono::steady_clock::now();
		cerr << "Turn[" << turnsCount - 1 << "] execution time: " << chrono::duration_cast<std::chrono::milliseconds>(end - begin).count() << " [ms]" << std::endl;
#endif // TIME_MEASURERMENT

#ifdef DEBUG_ONE_TURN
		break;
#endif // DEBUG_ONE_TURN
	}
}

void Game::getGameInput() {
}

void Game::getTurnInput() {
	//cerr << "Turn: " << turnsCount << endl;

	int opponentRow;
	int opponentCol;
	cin >> opponentRow >> opponentCol; cin.ignore();

#ifdef REDIRECT_INPUT
	if (STOP_INPUT == opponentRow && STOP_INPUT == opponentCol) {
		exit(0);
	}
#endif // REDIRECT_INPUT

#ifdef OUTPUT_GAME_DATA
	cerr << opponentRow << SPACE << opponentCol << endl;
#endif // OUTPUT_GAME_DATA

	opponentMove.setRowCoord(opponentRow);
	opponentMove.setColCoord(opponentCol);
	monteCarloTreeSearch.setOpponentMove(opponentMove);

	int validActionCount;
	cin >> validActionCount; cin.ignore();

#ifdef OUTPUT_GAME_DATA
	cerr << validActionCount << endl;
#endif // OUTPUT_GAME_DATA

	for (int i = 0; i < validActionCount; i++) {
		int row;
		int col;
		cin >> row >> col; cin.ignore();

#ifdef OUTPUT_GAME_DATA
		cerr << row << SPACE << col << endl;
#endif // OUTPUT_GAME_DATA
	}
}

void Game::turnBegin() {
	if (0 == turnsCount && opponentMove.isValid()) {
		board.setPlayer(OPPONENT_PLAYER_IDX);
		board.playMove(opponentMove);
	}
	else if (0 == turnsCount) {
		board.setPlayer(MY_PLAYER_IDX);
		board.playMove({ BOARD_DIM / 2, BOARD_DIM / 2 }); // Play in the middle if I'm first
	}
	else {
		board.playMove(opponentMove);
	}

	//cerr << board << endl;

	if (0 == turnsCount) {
		monteCarloTreeSearch.setTimeLimit(FIRST_TURN_MS - BIAS_MS);
	}
	else {
		monteCarloTreeSearch.setTimeLimit(TURN_MS - BIAS_MS);
	}

	monteCarloTreeSearch.solve(turnsCount);
}

void Game::makeTurn() {
	const Coords bestMove = monteCarloTreeSearch.getBestMove();
	cout << bestMove << endl;

	if (opponentMove.isValid()) {
		board.playMove(bestMove);
	}
}

void Game::turnEnd() {
	++turnsCount;
}

void Game::play() {
	initGame();
	getGameInput();
	gameBegin();
	gameLoop();
	gameEnd();
}

void Game::debug() const {
}

#ifdef TESTS
#include "debug.h"
#endif // TESTS

int main(int argc, char** argv) {
#ifdef TESTS
	doctest::Context context;
	int res = context.run();
#else

#ifdef REDIRECT_INPUT
	cerr << endl << endl << endl << "!!! REDIRECT_INPUT !!!" << endl << endl << endl;
	ifstream in(INPUT_FILE_NAME);
	streambuf *cinbuf = cin.rdbuf();
	cin.rdbuf(in.rdbuf());

	ofstream out(OUTPUT_FILE_NAME);
	streambuf *coutbuf = cout.rdbuf();
	cout.rdbuf(out.rdbuf());
#endif // REDIRECT_INPUT

	Game game;
	game.play();

#endif // TESTS

	return 0;
}
