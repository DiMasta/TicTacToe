//#pragma GCC optimize("O3","unroll-loops","omit-frame-pointer","inline") //Optimization flags
//#pragma GCC option("arch=native","tune=native","no-zero-upper") //Enable AVX
//#pragma GCC target("avx")  //Enable AVX
//#include <x86intrin.h> //AVX/SSE Extensions
//#include <bits/stdc++.h> //All main STD libraries

#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <chrono>
#include <cmath>

using namespace std;

//#define REDIRECT_INPUT
//#define OUTPUT_GAME_DATA
//#define DEBUG_ONE_TURN

static const string INPUT_FILE_NAME = "input.txt";
static const string OUTPUT_FILE_NAME = "output.txt";
static const string EMPTY_STRING = "";
static constexpr char SPACE = ' ';
static constexpr char TAB = '\t';
static constexpr int INVALID_IDX = -1;
static constexpr int TRIPLE = 3;
static constexpr int STOP_INPUT = 10;
static constexpr int BOARD_DIM = 9;
static constexpr int ALL_SQUARES = BOARD_DIM * BOARD_DIM;
static constexpr int PLAYER_TOGGLE = 2;
static constexpr int MY_PLAYER_IDX = 0;
static constexpr int OPPONENT_PLAYER_IDX = 1;
static constexpr char MY_PLAYER_CHAR = 'X';
static constexpr char OPPONENT_PLAYER_CHAR = 'O';
static constexpr char EMPTY_CHAR = '_';
static constexpr size_t NODES_TO_RESERVE = 6'000'000;
static constexpr long long FIRST_TURN_MS = 1'000;
static constexpr long long TURN_MS = 100;
static constexpr long long BIAS_MS = 2;
static constexpr double WIN_VALUE = 10.0;
static constexpr unsigned short PLAYER_FLAG		= 0b0000'0000'0000'0001;
static constexpr unsigned short STATUS_MASK		= 0b0000'0000'0000'0110;
static constexpr unsigned short MOVE_ROW_MASK	= 0b0000'0000'0111'1000;
static constexpr unsigned short MOVE_COL_MASK	= 0b0000'0111'1000'0000;
static constexpr unsigned short STATUS_OFFSET = 1;
static constexpr unsigned short MOVE_ROW_OFFSET = 3;
static constexpr unsigned short MOVE_COL_OFFSET = 7;
static constexpr int SQUARE_TYPES = 2;
static constexpr short EMPTY_TICTACTOE_BOARD = 0;
static constexpr short FULL_BOARD_MASK = 0b0000'000'111'111'111;
static constexpr int WIN_MASKS_COUNT = 8;
static constexpr short WIN_MASKS[WIN_MASKS_COUNT] = {
	0b0000'000'000'000'111, // Top row win
	0b0000'000'000'111'000, // Middle row win
	0b0000'000'111'000'000, // Bottom row win
	0b0000'000'001'001'001, // Left column win
	0b0000'000'010'010'010, // Middle column win
	0b0000'000'100'100'100, // Right column win
	0b0000'000'100'010'001, // Main diagonal win
	0b0000'000'001'010'100, // Second diagonal win
};

enum class BoardStatus {
	INVALID = -1,
	IN_PROGRESS,
	DRAW,
	OPPONENT_WON,
	I_WON,
};

static void printTabs(const int tabsCount, string& str) {
	for (int tabIdx = 0; tabIdx < tabsCount; ++tabIdx) {
		str += TAB;
	}
}

static unsigned int g_seed;

inline void fast_srand(int seed) {
	g_seed = seed;
}

inline int fast_rand(void) {
	g_seed = (214013 * g_seed + 2531011);
	return (g_seed >> 16) & 0x7FFF;
}

typedef int Coord;
const Coord INVALID_COORD = -1;

class Coords {
public:
	Coords();
	Coords(const Coords& rhs);
	Coords(Coord rowCoord, Coord colCoord);
	Coord getRowCoord() const { return rowCoord; }
	Coord getColCoord() const { return colCoord; }
	void setRowCoord(Coord rowCoord) { this->rowCoord = rowCoord; }
	void setColCoord(Coord colCoord) { this->colCoord = colCoord; }
	Coords& operator=(const Coords& rhs);
	bool operator==(const Coords& rhs);
	bool isValid() const;
	friend ostream& operator<<(ostream& stream, const Coords& coords);
private:
	Coord rowCoord;
	Coord colCoord;
};

static const std::map<std::pair<short, short>, char> BEST_MOVES = {
{{0,0},0},{{1,0},4},{{1,2},3},{{1,4},3},{{1,8},1},{{1,16},1},{{1,32},2},{{1,64},1},{{1,128},2},{{1,256},2},{{2,0},0},{{2,1},3},{{2,4},4},{{2,8},0},{{2,16},0},{{2,32},2},{{2,64},0},{{2,128},0},{{2,256},2},{{3,4},5},{{3,8},2},{{3,12},4},{{3,16},2},{{3,20},6},{{3,24},2},{{3,32},2},{{3,36},3},{{3,40},2},{{3,48},2},{{3,64},2},{{3,68},4},{{3,72},2},{{3,80},2},{{3,96},2},{{3,128},2},{{3,132},6},{{3,136},2},{{3,144},2},{{3,160},2},{{3,192},2},{{3,256},2},{{3,260},3},{{3,264},2},{{3,272},2},{{3,288},2},{{3,320},2},{{3,384},2},{{4,0},4},{{4,1},5},{{4,2},4},{{4,8},0},{{4,16},0},{{4,32},0},{{4,64},0},{{4,128},0},{{4,256},0},{{5,2},4},{{5,8},1},{{5,10},4},{{5,16},1},{{5,18},7},{{5,24},1},{{5,32},1},{{5,34},4},{{5,40},1},{{5,48},1},{{5,64},1},{{5,66},8},{{5,72},1},{{5,80},1},{{5,96},1},{{5,128},1},{{5,130},4},{{5,136},1},{{5,144},1},{{5,160},1},{{5,192},1},{{5,256},1},{{5,258},6},{{5,264},1},{{5,272},1},{{5,288},1},{{5,320},1},{{5,384},1},{{6,1},3},{{6,8},0},{{6,9},4},{{6,16},0},{{6,17},8},{{6,24},0},{{6,32},0},{{6,33},4},{{6,40},0},{{6,48},0},{{6,64},0},{{6,65},3},{{6,72},0},{{6,80},0},{{6,96},0},{{6,128},0},{{6,129},6},
{{6,136},0},{{6,144},0},{{6,160},0},{{6,192},0},{{6,256},0},{{6,257},4},{{6,264},0},{{6,272},0},{{6,288},0},{{6,320},0},{{6,384},0},{{8,0},0},{{8,1},1},{{8,2},0},{{8,4},0},{{8,16},0},{{8,32},0},{{8,64},2},{{8,128},4},{{8,256},6},{{9,2},2},{{9,4},1},{{9,6},4},{{9,16},6},{{9,18},6},{{9,20},6},{{9,32},6},{{9,34},4},{{9,36},6},{{9,48},1},{{9,64},7},{{9,66},4},{{9,68},4},{{9,80},2},{{9,96},2},{{9,128},6},{{9,130},4},{{9,132},4},{{9,144},1},{{9,160},1},{{9,192},1},{{9,256},6},{{9,258},4},{{9,260},5},{{9,272},1},{{9,288},2},{{9,320},1},{{9,384},6},{{10,1},4},{{10,4},8},{{10,5},4},{{10,16},0},{{10,17},8},{{10,20},6},{{10,32},0},{{10,33},2},{{10,36},8},{{10,48},0},{{10,64},8},{{10,65},4},{{10,68},4},{{10,80},2},{{10,96},2},{{10,128},0},{{10,129},4},{{10,132},4},{{10,144},0},{{10,160},0},{{10,192},8},{{10,256},2},{{10,257},4},{{10,260},0},{{10,272},0},{{10,288},2},{{10,320},0},{{10,384},6},{{11,20},6},{{11,36},6},{{11,48},2},{{11,52},6},{{11,68},4},{{11,80},2},{{11,96},2},{{11,100},4},{{11,112},2},{{11,132},6},{{11,144},2},{{11,148},6},{{11,160},2},{{11,164},6},{{11,176},2},{{11,192},2},{{11,196},4},{{11,208},2},{{11,224},2},{{11,260},5},{{11,272},2},{{11,276},6},{{11,288},2},{{11,304},2},
{{11,320},2},{{11,324},4},{{11,336},2},{{11,352},2},{{11,384},6},{{11,388},6},{{11,400},2},{{11,416},2},{{12,1},4},{{12,2},4},{{12,3},4},{{12,16},0},{{12,17},8},{{12,18},7},{{12,32},0},{{12,33},1},{{12,34},6},{{12,48},0},{{12,64},4},{{12,65},5},{{12,66},5},{{12,80},0},{{12,96},0},{{12,128},4},{{12,129},4},{{12,130},4},{{12,144},1},{{12,160},0},{{12,192},8},{{12,256},6},{{12,257},4},{{12,258},4},{{12,272},0},{{12,288},0},{{12,320},7},{{12,384},6},{{13,18},7},{{13,34},6},{{13,48},1},{{13,50},6},{{13,66},7},{{13,80},1},{{13,82},7},{{13,96},1},{{13,98},4},{{13,112},1},{{13,130},4},{{13,144},1},{{13,160},1},{{13,162},4},{{13,176},1},{{13,192},1},{{13,194},4},{{13,208},1},{{13,224},1},{{13,258},6},{{13,272},1},{{13,274},6},{{13,288},1},{{13,290},6},{{13,304},1},{{13,320},7},{{13,322},7},{{13,336},1},{{13,352},1},{{13,384},6},{{13,386},6},{{13,400},1},{{13,416},1},{{14,17},8},{{14,33},4},{{14,48},0},{{14,49},8},{{14,65},8},{{14,80},0},{{14,81},8},{{14,96},0},{{14,97},4},{{14,112},0},{{14,129},8},{{14,144},0},{{14,145},8},{{14,160},0},{{14,161},4},{{14,176},0},{{14,192},8},{{14,193},8},{{14,208},0},{{14,224},0},{{14,257},4},{{14,272},0},{{14,288},0},{{14,289},4},{{14,304},0},{{14,320},0},{{14,321},4},{{14,336},0},{{14,352},0},{{14,384},0},{{14,385},4},
{{14,400},0},{{14,416},0},{{16,0},0},{{16,1},1},{{16,2},0},{{16,4},0},{{16,8},0},{{16,32},0},{{16,64},0},{{16,128},0},{{16,256},0},{{17,2},2},{{17,4},8},{{17,6},3},{{17,8},1},{{17,10},2},{{17,12},1},{{17,32},1},{{17,34},2},{{17,36},8},{{17,40},1},{{17,64},8},{{17,66},3},{{17,68},1},{{17,72},1},{{17,96},1},{{17,128},1},{{17,130},2},{{17,132},3},{{17,136},1},{{17,160},1},{{17,192},8},{{17,256},2},{{17,258},3},{{17,260},5},{{17,264},1},{{17,288},2},{{17,320},7},{{17,384},6},{{18,1},7},{{18,4},7},{{18,5},3},{{18,8},0},{{18,9},6},{{18,12},0},{{18,32},0},{{18,33},2},{{18,36},7},{{18,40},0},{{18,64},7},{{18,65},3},{{18,68},0},{{18,72},0},{{18,96},0},{{18,128},0},{{18,129},3},{{18,132},3},{{18,136},0},{{18,160},0},{{18,192},8},{{18,256},7},{{18,257},2},{{18,260},5},{{18,264},0},{{18,288},2},{{18,320},7},{{18,384},6},{{19,12},5},{{19,36},8},{{19,40},2},{{19,44},7},{{19,68},3},{{19,72},2},{{19,76},5},{{19,96},2},{{19,100},7},{{19,104},2},{{19,132},8},{{19,136},2},{{19,140},8},{{19,160},2},{{19,164},8},{{19,168},2},{{19,192},8},{{19,196},8},{{19,200},2},{{19,224},2},{{19,260},5},{{19,264},2},{{19,268},7},{{19,288},2},{{19,296},2},{{19,320},7},{{19,324},7},{{19,328},2},{{19,352},2},{{19,384},2},{{19,388},3},{{19,392},2},{{19,416},2},
{{20,1},6},{{20,2},0},{{20,3},3},{{20,8},0},{{20,9},6},{{20,10},0},{{20,32},0},{{20,33},1},{{20,34},0},{{20,40},0},{{20,64},0},{{20,65},3},{{20,66},5},{{20,72},0},{{20,96},0},{{20,128},0},{{20,129},3},{{20,130},0},{{20,136},0},{{20,160},0},{{20,192},8},{{20,256},6},{{20,257},1},{{20,258},3},{{20,264},0},{{20,288},0},{{20,320},7},{{20,384},6},{{21,10},5},{{21,34},3},{{21,40},1},{{21,42},6},{{21,66},8},{{21,72},1},{{21,74},8},{{21,96},1},{{21,98},8},{{21,104},1},{{21,130},3},{{21,136},1},{{21,138},5},{{21,160},1},{{21,162},3},{{21,168},1},{{21,192},8},{{21,194},8},{{21,200},1},{{21,224},1},{{21,258},6},{{21,264},1},{{21,266},6},{{21,288},1},{{21,290},6},{{21,296},1},{{21,320},7},{{21,322},7},{{21,328},1},{{21,352},1},{{21,384},6},{{21,386},6},{{21,392},1},{{21,416},1},{{22,9},6},{{22,33},3},{{22,40},0},{{22,41},6},{{22,65},3},{{22,72},0},{{22,96},0},{{22,97},7},{{22,104},0},{{22,129},6},{{22,136},0},{{22,137},6},{{22,160},0},{{22,161},6},{{22,168},0},{{22,192},0},{{22,193},3},{{22,200},0},{{22,224},0},{{22,257},3},{{22,264},0},{{22,265},6},{{22,288},0},{{22,289},3},{{22,296},0},{{22,320},7},{{22,321},7},{{22,328},0},{{22,352},0},{{22,384},6},{{22,385},6},{{22,392},0},{{22,416},0},{{24,1},5},{{24,2},0},{{24,3},2},{{24,4},5},{{24,5},1},
{{24,6},0},{{24,32},0},{{24,33},1},{{24,34},0},{{24,36},8},{{24,64},5},{{24,65},1},{{24,66},0},{{24,68},0},{{24,96},1},{{24,128},0},{{24,129},2},{{24,130},0},{{24,132},0},{{24,160},0},{{24,192},5},{{24,256},5},{{24,257},1},{{24,258},0},{{24,260},5},{{24,288},2},{{24,320},5},{{24,384},5},{{25,6},5},{{25,34},2},{{25,36},8},{{25,38},6},{{25,66},2},{{25,68},1},{{25,70},5},{{25,96},8},{{25,98},8},{{25,100},8},{{25,130},2},{{25,132},1},{{25,134},5},{{25,160},1},{{25,162},2},{{25,164},6},{{25,192},8},{{25,194},5},{{25,196},5},{{25,224},8},{{25,258},2},{{25,260},5},{{25,262},5},{{25,288},2},{{25,290},6},{{25,320},5},{{25,322},5},{{25,324},5},{{25,352},1},{{25,384},6},{{25,386},5},{{25,388},5},{{25,416},6},{{26,5},5},{{26,33},7},{{26,36},8},{{26,37},7},{{26,65},2},{{26,68},0},{{26,69},5},{{26,96},7},{{26,97},7},{{26,100},7},{{26,129},5},{{26,132},5},{{26,133},5},{{26,160},8},{{26,161},2},{{26,164},8},{{26,192},8},{{26,193},5},{{26,196},5},{{26,224},8},{{26,257},2},{{26,260},5},{{26,261},5},{{26,288},2},{{26,289},2},{{26,320},7},{{26,321},5},{{26,324},5},{{26,352},7},{{26,384},5},{{26,385},5},{{26,388},5},{{26,416},0},{{27,100},8},{{27,164},8},{{27,196},8},{{27,224},8},{{27,228},8},{{27,324},5},{{27,352},2},{{27,388},5},{{27,416},2},{{28,3},5},{{28,33},6},
{{28,34},6},{{28,35},6},{{28,65},5},{{28,66},5},{{28,67},5},{{28,96},0},{{28,97},1},{{28,98},0},{{28,129},1},{{28,130},0},{{28,131},5},{{28,160},6},{{28,161},6},{{28,162},0},{{28,192},8},{{28,193},5},{{28,194},5},{{28,224},8},{{28,257},1},{{28,258},0},{{28,259},5},{{28,288},6},{{28,289},1},{{28,290},6},{{28,320},7},{{28,321},5},{{28,322},5},{{28,352},7},{{28,384},6},{{28,385},5},{{28,386},5},{{28,416},6},{{29,98},8},{{29,162},6},{{29,194},8},{{29,224},8},{{29,226},8},{{29,290},6},{{29,322},7},{{29,352},7},{{29,354},7},{{29,386},6},{{29,416},6},{{29,418},6},{{30,97},7},{{30,161},6},{{30,193},8},{{30,224},8},{{30,225},8},{{30,289},6},{{30,321},7},{{30,352},7},{{30,353},7},{{30,385},6},{{30,416},6},{{30,417},6},{{32,0},2},{{32,1},2},{{32,2},2},{{32,4},0},{{32,8},0},{{32,16},0},{{32,64},8},{{32,128},4},{{32,256},0},{{33,2},4},{{33,4},3},{{33,6},3},{{33,8},2},{{33,10},8},{{33,12},1},{{33,16},1},{{33,18},7},{{33,20},6},{{33,24},2},{{33,64},8},{{33,66},4},{{33,68},4},{{33,72},1},{{33,80},2},{{33,128},4},{{33,130},4},{{33,132},3},{{33,136},2},{{33,144},1},{{33,192},8},{{33,256},3},{{33,258},3},{{33,260},3},{{33,264},1},{{33,272},1},{{33,320},7},{{33,384},6},{{34,1},6},{{34,4},3},{{34,5},4},{{34,8},2},{{34,9},6},{{34,12},0},{{34,16},0},
{{34,17},8},{{34,20},6},{{34,24},2},{{34,64},0},{{34,65},2},{{34,68},4},{{34,72},0},{{34,80},2},{{34,128},0},{{34,129},3},{{34,132},3},{{34,136},2},{{34,144},2},{{34,192},8},{{34,256},6},{{34,257},4},{{34,260},4},{{34,264},0},{{34,272},0},{{34,320},0},{{34,384},6},{{35,12},4},{{35,20},6},{{35,24},2},{{35,28},6},{{35,68},4},{{35,72},2},{{35,76},4},{{35,80},2},{{35,88},2},{{35,132},6},{{35,136},2},{{35,140},4},{{35,144},2},{{35,148},6},{{35,152},2},{{35,192},2},{{35,196},3},{{35,200},2},{{35,208},2},{{35,260},6},{{35,264},2},{{35,268},4},{{35,272},2},{{35,276},6},{{35,280},2},{{35,320},2},{{35,324},3},{{35,328},2},{{35,336},2},{{35,384},6},{{35,388},6},{{35,392},2},{{35,400},2},{{36,1},1},{{36,2},0},{{36,3},3},{{36,8},8},{{36,9},6},{{36,10},4},{{36,16},8},{{36,17},8},{{36,18},8},{{36,24},0},{{36,64},8},{{36,65},3},{{36,66},3},{{36,72},0},{{36,80},0},{{36,128},8},{{36,129},3},{{36,130},4},{{36,136},0},{{36,144},1},{{36,192},8},{{36,256},6},{{36,257},4},{{36,258},4},{{36,264},0},{{36,272},0},{{36,320},0},{{36,384},0},{{37,10},8},{{37,18},7},{{37,24},1},{{37,26},8},{{37,66},8},{{37,72},1},{{37,74},8},{{37,80},1},{{37,82},8},{{37,88},1},{{37,130},4},{{37,136},1},{{37,138},4},{{37,144},1},{{37,152},1},{{37,192},8},{{37,194},8},{{37,200},1},
{{37,208},1},{{37,258},7},{{37,264},1},{{37,266},4},{{37,272},1},{{37,274},7},{{37,280},1},{{37,320},7},{{37,322},7},{{37,328},1},{{37,336},1},{{37,384},1},{{37,386},3},{{37,392},1},{{37,400},1},{{38,9},6},{{38,17},8},{{38,24},0},{{38,25},8},{{38,65},3},{{38,72},0},{{38,80},0},{{38,81},8},{{38,88},0},{{38,129},8},{{38,136},0},{{38,137},6},{{38,144},0},{{38,145},8},{{38,152},0},{{38,192},8},{{38,193},8},{{38,200},0},{{38,208},0},{{38,257},3},{{38,264},0},{{38,265},4},{{38,272},0},{{38,280},0},{{38,320},0},{{38,321},3},{{38,328},0},{{38,336},0},{{38,384},0},{{38,385},3},{{38,392},0},{{38,400},0},{{40,1},4},{{40,2},4},{{40,3},2},{{40,4},4},{{40,5},4},{{40,6},0},{{40,16},0},{{40,17},1},{{40,18},0},{{40,20},0},{{40,64},4},{{40,65},2},{{40,66},2},{{40,68},4},{{40,80},0},{{40,128},4},{{40,129},2},{{40,130},4},{{40,132},0},{{40,144},0},{{40,192},4},{{40,256},4},{{40,257},4},{{40,258},0},{{40,260},0},{{40,272},0},{{40,320},4},{{40,384},4},{{41,6},4},{{41,18},6},{{41,20},6},{{41,22},6},{{41,66},4},{{41,68},4},{{41,70},4},{{41,80},1},{{41,82},2},{{41,130},4},{{41,132},1},{{41,134},4},{{41,144},1},{{41,148},6},{{41,192},4},{{41,194},4},{{41,196},4},{{41,208},1},{{41,258},2},{{41,260},1},{{41,262},4},{{41,272},6},{{41,274},6},{{41,276},6},{{41,320},4},
{{41,322},4},{{41,324},4},{{41,336},1},{{41,384},6},{{41,386},4},{{41,388},4},{{41,400},6},{{42,5},4},{{42,17},2},{{42,20},0},{{42,21},6},{{42,65},4},{{42,68},4},{{42,69},4},{{42,80},0},{{42,81},2},{{42,129},4},{{42,132},4},{{42,133},4},{{42,144},6},{{42,145},8},{{42,148},6},{{42,192},4},{{42,193},4},{{42,196},4},{{42,208},0},{{42,257},4},{{42,260},4},{{42,261},4},{{42,272},0},{{42,276},0},{{42,320},4},{{42,321},4},{{42,324},4},{{42,336},0},{{42,384},4},{{42,385},4},{{42,388},4},{{42,400},0},{{43,148},6},{{43,196},4},{{43,208},2},{{43,276},6},{{43,324},4},{{43,336},2},{{43,388},6},{{43,400},6},{{43,404},6},{{44,3},4},{{44,17},8},{{44,18},7},{{44,19},8},{{44,65},1},{{44,66},0},{{44,67},4},{{44,80},8},{{44,81},8},{{44,82},8},{{44,129},1},{{44,130},4},{{44,131},4},{{44,144},1},{{44,145},8},{{44,192},8},{{44,193},4},{{44,194},4},{{44,208},8},{{44,257},4},{{44,258},4},{{44,259},4},{{44,272},0},{{44,274},0},{{44,320},4},{{44,321},4},{{44,322},4},{{44,336},0},{{44,384},4},{{44,385},4},{{44,386},4},{{44,400},0},{{45,82},7},{{45,194},4},{{45,208},1},{{45,274},7},{{45,322},7},{{45,336},7},{{45,338},7},{{45,386},4},{{45,400},1},{{46,81},8},{{46,145},8},{{46,193},8},{{46,208},8},{{46,209},8},{{46,321},4},{{46,336},0},{{46,385},4},{{46,400},0},{{48,1},3},{{48,2},0},
{{48,3},2},{{48,4},3},{{48,5},1},{{48,6},0},{{48,8},0},{{48,9},6},{{48,10},2},{{48,12},0},{{48,64},3},{{48,65},3},{{48,66},0},{{48,68},0},{{48,72},0},{{48,128},0},{{48,129},2},{{48,130},0},{{48,132},0},{{48,136},2},{{48,192},3},{{48,256},3},{{48,257},1},{{48,258},2},{{48,260},1},{{48,264},0},{{48,320},3},{{48,384},3},{{49,6},3},{{49,10},8},{{49,12},8},{{49,14},8},{{49,66},2},{{49,68},1},{{49,70},3},{{49,72},8},{{49,74},8},{{49,76},1},{{49,130},2},{{49,132},1},{{49,134},3},{{49,136},8},{{49,138},2},{{49,140},8},{{49,192},8},{{49,194},3},{{49,196},3},{{49,200},8},{{49,258},3},{{49,260},3},{{49,262},3},{{49,264},1},{{49,266},2},{{49,268},1},{{49,320},7},{{49,322},3},{{49,324},3},{{49,328},7},{{49,384},6},{{49,386},3},{{49,388},3},{{49,392},6},{{50,5},3},{{50,9},6},{{50,12},7},{{50,13},7},{{50,65},3},{{50,68},0},{{50,69},3},{{50,72},0},{{50,76},0},{{50,129},3},{{50,132},3},{{50,133},3},{{50,136},6},{{50,137},6},{{50,140},0},{{50,192},3},{{50,193},3},{{50,196},3},{{50,200},0},{{50,257},2},{{50,260},0},{{50,261},3},{{50,264},7},{{50,265},6},{{50,268},7},{{50,320},7},{{50,321},3},{{50,324},3},{{50,328},7},{{50,384},6},{{50,385},3},{{50,388},3},{{50,392},6},{{51,76},7},{{51,140},8},{{51,196},8},{{51,200},8},{{51,204},8},{{51,268},7},{{51,324},7},
{{51,328},7},{{51,332},7},{{51,388},6},{{51,392},6},{{51,396},6},{{52,3},3},{{52,9},6},{{52,10},0},{{52,11},6},{{52,65},3},{{52,66},0},{{52,67},3},{{52,72},0},{{52,74},8},{{52,129},1},{{52,130},0},{{52,131},3},{{52,136},0},{{52,137},6},{{52,138},0},{{52,192},8},{{52,193},3},{{52,194},3},{{52,200},8},{{52,257},1},{{52,258},0},{{52,259},3},{{52,264},6},{{52,265},6},{{52,266},6},{{52,320},3},{{52,321},3},{{52,322},3},{{52,328},0},{{52,384},6},{{52,385},3},{{52,386},3},{{52,392},6},{{53,74},8},{{53,138},6},{{53,194},8},{{53,200},8},{{53,202},8},{{53,266},6},{{53,322},7},{{53,328},7},{{53,330},7},{{53,386},6},{{53,392},6},{{53,394},6},{{54,137},6},{{54,193},3},{{54,200},0},{{54,265},6},{{54,321},3},{{54,328},0},{{54,385},6},{{54,392},6},{{54,393},6},{{64,0},4},{{64,1},2},{{64,2},0},{{64,4},0},{{64,8},4},{{64,16},0},{{64,32},0},{{64,128},0},{{64,256},0},{{65,2},2},{{65,4},1},{{65,6},3},{{65,8},4},{{65,10},4},{{65,12},8},{{65,16},3},{{65,18},3},{{65,20},3},{{65,24},5},{{65,32},1},{{65,34},2},{{65,36},3},{{65,40},4},{{65,48},3},{{65,128},1},{{65,130},3},{{65,132},3},{{65,136},2},{{65,144},1},{{65,160},1},{{65,256},1},{{65,258},2},{{65,260},3},{{65,264},2},{{65,272},1},{{65,288},2},{{65,384},1},{{66,1},4},{{66,4},4},{{66,5},7},{{66,8},4},
{{66,9},4},{{66,12},7},{{66,16},0},{{66,17},8},{{66,20},0},{{66,24},5},{{66,32},4},{{66,33},4},{{66,36},8},{{66,40},4},{{66,48},3},{{66,128},0},{{66,129},2},{{66,132},0},{{66,136},2},{{66,144},0},{{66,160},0},{{66,256},2},{{66,257},4},{{66,260},5},{{66,264},2},{{66,272},0},{{66,288},2},{{66,384},0},{{67,12},5},{{67,20},3},{{67,24},5},{{67,28},5},{{67,36},3},{{67,40},2},{{67,44},4},{{67,48},3},{{67,52},3},{{67,132},3},{{67,136},2},{{67,140},4},{{67,144},2},{{67,148},3},{{67,152},2},{{67,160},2},{{67,164},3},{{67,168},2},{{67,176},2},{{67,260},5},{{67,264},2},{{67,268},5},{{67,272},2},{{67,276},3},{{67,280},2},{{67,288},2},{{67,296},2},{{67,304},2},{{67,384},2},{{67,388},3},{{67,392},2},{{67,400},2},{{67,416},2},{{68,1},1},{{68,2},4},{{68,3},4},{{68,8},4},{{68,9},4},{{68,10},4},{{68,16},1},{{68,17},8},{{68,18},7},{{68,24},5},{{68,32},4},{{68,33},4},{{68,34},0},{{68,40},4},{{68,48},3},{{68,128},4},{{68,129},4},{{68,130},4},{{68,136},0},{{68,144},1},{{68,160},0},{{68,256},0},{{68,257},4},{{68,258},0},{{68,264},0},{{68,272},0},{{68,288},0},{{68,384},0},{{69,10},4},{{69,18},3},{{69,24},1},{{69,26},5},{{69,34},3},{{69,40},4},{{69,42},4},{{69,48},3},{{69,50},3},{{69,130},4},{{69,136},1},{{69,138},4},{{69,144},1},{{69,152},1},{{69,160},1},
{{69,162},3},{{69,168},1},{{69,176},1},{{69,258},3},{{69,264},1},{{69,266},4},{{69,272},1},{{69,274},3},{{69,280},1},{{69,288},1},{{69,290},3},{{69,296},1},{{69,304},1},{{69,384},1},{{69,386},3},{{69,392},1},{{69,400},1},{{69,416},1},{{70,9},4},{{70,17},3},{{70,24},0},{{70,25},5},{{70,33},4},{{70,40},4},{{70,41},4},{{70,48},0},{{70,49},3},{{70,129},4},{{70,136},0},{{70,137},4},{{70,144},0},{{70,145},8},{{70,152},0},{{70,160},0},{{70,161},4},{{70,168},0},{{70,176},0},{{70,257},4},{{70,264},0},{{70,265},4},{{70,272},0},{{70,280},0},{{70,288},0},{{70,289},4},{{70,296},0},{{70,304},0},{{70,384},0},{{70,385},4},{{70,392},0},{{70,400},0},{{70,416},0},{{72,1},1},{{72,2},0},{{72,3},2},{{72,4},0},{{72,5},1},{{72,6},0},{{72,16},0},{{72,17},8},{{72,18},0},{{72,20},0},{{72,32},0},{{72,33},2},{{72,34},0},{{72,36},0},{{72,48},0},{{72,128},0},{{72,129},4},{{72,130},0},{{72,132},0},{{72,144},0},{{72,160},0},{{72,256},0},{{72,257},4},{{72,258},0},{{72,260},0},{{72,272},0},{{72,288},0},{{72,384},0},{{74,5},8},{{74,17},8},{{74,20},0},{{74,21},8},{{74,33},8},{{74,36},8},{{74,37},8},{{74,48},0},{{74,49},8},{{74,52},0},{{74,129},2},{{74,132},0},{{74,133},4},{{74,144},0},{{74,145},8},{{74,148},0},{{74,160},0},{{74,161},2},{{74,164},0},{{74,176},0},{{74,257},2},
{{74,260},0},{{74,261},4},{{74,272},0},{{74,276},0},{{74,288},0},{{74,289},2},{{74,304},0},{{74,384},0},{{74,385},4},{{74,388},0},{{74,400},0},{{74,416},0},{{76,3},4},{{76,17},1},{{76,18},0},{{76,19},5},{{76,33},4},{{76,34},0},{{76,35},4},{{76,48},0},{{76,49},8},{{76,50},0},{{76,129},4},{{76,130},4},{{76,131},4},{{76,144},0},{{76,145},1},{{76,160},0},{{76,161},4},{{76,162},0},{{76,176},0},{{76,257},4},{{76,258},0},{{76,259},4},{{76,272},0},{{76,274},0},{{76,288},0},{{76,289},4},{{76,290},0},{{76,304},0},{{76,384},0},{{76,385},4},{{76,386},0},{{76,400},0},{{76,416},0},{{78,49},8},{{78,145},8},{{78,161},4},{{78,176},0},{{78,177},8},{{78,289},4},{{78,304},0},{{78,385},4},{{78,400},0},{{78,416},0},{{78,417},4},{{78,432},0},{{80,1},2},{{80,2},0},{{80,3},2},{{80,4},0},{{80,5},1},{{80,6},0},{{80,8},0},{{80,9},1},{{80,10},0},{{80,12},7},{{80,32},0},{{80,33},1},{{80,34},0},{{80,36},8},{{80,40},0},{{80,128},0},{{80,129},2},{{80,130},0},{{80,132},0},{{80,136},0},{{80,160},0},{{80,256},2},{{80,257},1},{{80,258},0},{{80,260},5},{{80,264},1},{{80,288},2},{{80,384},0},{{81,6},3},{{81,10},2},{{81,12},8},{{81,14},8},{{81,34},2},{{81,36},8},{{81,38},3},{{81,40},1},{{81,42},2},{{81,44},8},{{81,130},2},{{81,132},1},{{81,134},3},{{81,136},1},{{81,138},2},
{{81,140},8},{{81,160},1},{{81,162},2},{{81,164},3},{{81,168},1},{{81,258},2},{{81,260},5},{{81,262},3},{{81,264},2},{{81,266},2},{{81,268},5},{{81,288},2},{{81,290},2},{{81,296},2},{{81,384},1},{{81,386},2},{{81,388},3},{{81,392},2},{{81,416},2},{{82,5},7},{{82,9},2},{{82,12},7},{{82,13},7},{{82,33},2},{{82,36},8},{{82,37},7},{{82,40},0},{{82,41},2},{{82,44},7},{{82,129},2},{{82,132},0},{{82,133},3},{{82,136},2},{{82,137},2},{{82,140},0},{{82,160},2},{{82,161},2},{{82,164},8},{{82,168},0},{{82,257},2},{{82,260},5},{{82,261},5},{{82,264},0},{{82,265},2},{{82,268},7},{{82,288},2},{{82,289},2},{{82,296},2},{{82,384},2},{{82,385},2},{{82,388},5},{{82,392},2},{{82,416},2},{{83,44},8},{{83,140},8},{{83,164},8},{{83,168},2},{{83,172},8},{{83,268},5},{{83,296},2},{{83,388},5},{{83,392},2},{{83,396},5},{{83,416},2},{{83,424},2},{{88,3},2},{{88,5},1},{{88,6},0},{{88,33},2},{{88,34},0},{{88,35},2},{{88,36},0},{{88,37},1},{{88,38},0},{{88,129},1},{{88,130},0},{{88,131},2},{{88,132},0},{{88,133},5},{{88,134},0},{{88,160},0},{{88,161},2},{{88,162},0},{{88,164},0},{{88,257},1},{{88,258},0},{{88,259},2},{{88,260},5},{{88,261},5},{{88,262},0},{{88,288},2},{{88,289},2},{{88,290},0},{{88,384},0},{{88,385},1},{{88,386},0},{{88,388},0},{{88,416},0},{{90,37},8},{{90,133},5},
{{90,161},2},{{90,164},8},{{90,165},8},{{90,261},5},{{90,289},2},{{90,385},2},{{90,388},5},{{90,389},5},{{90,416},2},{{90,417},2},{{96,1},2},{{96,2},4},{{96,3},2},{{96,4},0},{{96,5},1},{{96,6},0},{{96,8},2},{{96,9},1},{{96,10},2},{{96,12},0},{{96,16},1},{{96,17},8},{{96,18},7},{{96,20},0},{{96,24},8},{{96,128},4},{{96,129},2},{{96,130},4},{{96,132},3},{{96,136},2},{{96,144},1},{{96,256},3},{{96,257},4},{{96,258},3},{{96,260},3},{{96,264},0},{{96,272},0},{{96,384},0},{{97,6},3},{{97,10},4},{{97,12},4},{{97,14},8},{{97,18},7},{{97,20},3},{{97,22},3},{{97,24},1},{{97,26},7},{{97,28},1},{{97,130},4},{{97,132},3},{{97,134},3},{{97,136},2},{{97,138},4},{{97,140},1},{{97,144},1},{{97,148},3},{{97,152},1},{{97,258},3},{{97,260},3},{{97,262},3},{{97,264},1},{{97,266},2},{{97,268},1},{{97,272},3},{{97,274},3},{{97,276},3},{{97,280},1},{{97,384},1},{{97,386},3},{{97,388},3},{{97,392},2},{{97,400},1},{{98,5},4},{{98,9},2},{{98,12},4},{{98,13},7},{{98,17},8},{{98,20},0},{{98,21},8},{{98,24},2},{{98,25},8},{{98,28},0},{{98,129},2},{{98,132},0},{{98,133},3},{{98,136},2},{{98,137},2},{{98,140},0},{{98,144},0},{{98,145},8},{{98,148},0},{{98,152},2},{{98,257},4},{{98,260},3},{{98,261},4},{{98,264},2},{{98,265},4},{{98,268},0},{{98,272},0},{{98,276},0},
{{98,280},0},{{98,384},0},{{98,385},4},{{98,388},3},{{98,392},2},{{98,400},0},{{99,28},7},{{99,140},4},{{99,148},3},{{99,152},2},{{99,156},8},{{99,268},4},{{99,276},3},{{99,280},2},{{99,284},7},{{99,388},3},{{99,392},2},{{99,396},4},{{99,400},2},{{99,404},3},{{99,408},2},{{100,3},3},{{100,9},1},{{100,10},0},{{100,11},4},{{100,17},8},{{100,18},7},{{100,19},8},{{100,24},8},{{100,25},8},{{100,26},8},{{100,129},1},{{100,130},4},{{100,131},4},{{100,136},0},{{100,137},1},{{100,138},4},{{100,144},1},{{100,145},8},{{100,152},1},{{100,257},4},{{100,258},4},{{100,259},4},{{100,264},4},{{100,265},4},{{100,266},4},{{100,272},0},{{100,274},0},{{100,280},0},{{100,384},4},{{100,385},4},{{100,386},4},{{100,392},0},{{100,400},0},{{101,26},7},{{101,138},4},{{101,152},1},{{101,266},4},{{101,274},7},{{101,280},1},{{101,282},7},{{101,386},4},{{101,392},1},{{101,394},4},{{101,400},1},{{101,408},1},{{102,25},8},{{102,137},4},{{102,145},8},{{102,152},0},{{102,153},8},{{102,265},4},{{102,280},0},{{102,385},4},{{102,392},0},{{102,393},4},{{102,400},0},{{102,408},0},{{104,3},2},{{104,5},1},{{104,6},0},{{104,17},1},{{104,18},0},{{104,19},2},{{104,20},0},{{104,21},1},{{104,22},0},{{104,129},4},{{104,130},4},{{104,131},4},{{104,132},0},{{104,133},4},{{104,134},0},{{104,144},0},{{104,145},1},{{104,148},0},{{104,257},4},{{104,258},0},{{104,259},4},{{104,260},0},
{{104,261},4},{{104,262},0},{{104,272},0},{{104,274},0},{{104,276},0},{{104,384},0},{{104,385},4},{{104,386},0},{{104,388},0},{{104,400},0},{{106,21},8},{{106,133},4},{{106,145},8},{{106,148},0},{{106,149},8},{{106,261},4},{{106,276},0},{{106,385},4},{{106,388},0},{{106,389},4},{{106,400},0},{{106,404},0},{{108,19},7},{{108,131},4},{{108,145},1},{{108,259},4},{{108,274},0},{{108,385},4},{{108,386},4},{{108,387},4},{{108,400},0},{{112,3},2},{{112,5},1},{{112,6},0},{{112,9},2},{{112,10},2},{{112,11},2},{{112,12},0},{{112,13},1},{{112,14},0},{{112,129},1},{{112,130},0},{{112,131},2},{{112,132},3},{{112,133},3},{{112,134},0},{{112,136},2},{{112,137},2},{{112,138},0},{{112,140},0},{{112,257},1},{{112,258},0},{{112,259},2},{{112,260},3},{{112,261},1},{{112,262},3},{{112,264},2},{{112,265},1},{{112,266},2},{{112,268},0},{{112,384},0},{{112,385},1},{{112,386},0},{{112,388},3},{{112,392},2},{{113,14},8},{{113,134},3},{{113,138},2},{{113,140},8},{{113,142},8},{{113,262},3},{{113,266},2},{{113,268},1},{{113,270},7},{{113,386},2},{{113,388},3},{{113,390},3},{{113,392},2},{{113,394},2},{{113,396},1},{{114,13},7},{{114,133},3},{{114,137},2},{{114,140},0},{{114,141},8},{{114,261},3},{{114,265},2},{{114,268},7},{{114,269},7},{{114,385},2},{{114,388},3},{{114,389},3},{{114,392},2},{{114,393},2},{{114,396},0},{{128,0},1},{{128,1},6},{{128,2},0},{{128,4},8},{{128,8},4},
{{128,16},0},{{128,32},4},{{128,64},0},{{128,256},0},{{129,2},6},{{129,4},8},{{129,6},3},{{129,8},4},{{129,10},8},{{129,12},4},{{129,16},3},{{129,18},6},{{129,20},6},{{129,24},5},{{129,32},4},{{129,34},6},{{129,36},8},{{129,40},4},{{129,48},3},{{129,64},1},{{129,66},2},{{129,68},4},{{129,72},1},{{129,80},2},{{129,96},1},{{129,256},1},{{129,258},2},{{129,260},5},{{129,264},1},{{129,272},2},{{129,288},2},{{129,320},1},{{130,1},4},{{130,4},4},{{130,5},4},{{130,8},4},{{130,9},4},{{130,12},4},{{130,16},0},{{130,17},2},{{130,20},0},{{130,24},0},{{130,32},4},{{130,33},4},{{130,36},4},{{130,40},4},{{130,48},0},{{130,64},4},{{130,65},4},{{130,68},4},{{130,72},0},{{130,80},0},{{130,96},0},{{130,256},4},{{130,257},4},{{130,260},4},{{130,264},0},{{130,272},0},{{130,288},2},{{130,320},0},{{131,12},4},{{131,20},3},{{131,24},2},{{131,28},5},{{131,36},4},{{131,40},4},{{131,44},4},{{131,48},2},{{131,52},3},{{131,68},4},{{131,72},2},{{131,76},4},{{131,80},2},{{131,88},2},{{131,96},2},{{131,100},4},{{131,104},2},{{131,112},2},{{131,260},4},{{131,264},2},{{131,268},4},{{131,272},2},{{131,276},3},{{131,280},2},{{131,288},2},{{131,296},2},{{131,304},2},{{131,320},2},{{131,324},4},{{131,328},2},{{131,336},2},{{131,352},2},{{132,1},6},{{132,2},6},{{132,3},3},{{132,8},4},{{132,9},6},{{132,10},6},{{132,16},3},{{132,17},8},
{{132,18},8},{{132,24},5},{{132,32},4},{{132,33},4},{{132,34},6},{{132,40},4},{{132,48},3},{{132,64},0},{{132,65},3},{{132,66},0},{{132,72},0},{{132,80},0},{{132,96},1},{{132,256},1},{{132,257},4},{{132,258},0},{{132,264},1},{{132,272},0},{{132,288},0},{{132,320},1},{{133,10},4},{{133,18},3},{{133,24},5},{{133,26},5},{{133,34},4},{{133,40},4},{{133,42},4},{{133,48},3},{{133,50},3},{{133,66},4},{{133,72},1},{{133,74},8},{{133,80},1},{{133,82},3},{{133,88},1},{{133,96},1},{{133,98},3},{{133,104},1},{{133,112},1},{{133,258},3},{{133,264},1},{{133,266},4},{{133,272},1},{{133,274},3},{{133,280},1},{{133,288},1},{{133,290},6},{{133,296},1},{{133,304},1},{{133,320},1},{{133,322},3},{{133,328},1},{{133,336},1},{{133,352},1},{{134,9},4},{{134,17},3},{{134,24},0},{{134,25},5},{{134,33},4},{{134,40},4},{{134,41},4},{{134,48},0},{{134,49},3},{{134,65},3},{{134,72},0},{{134,80},0},{{134,81},3},{{134,88},0},{{134,96},0},{{134,97},4},{{134,104},0},{{134,112},0},{{134,257},4},{{134,264},0},{{134,265},4},{{134,272},0},{{134,280},0},{{134,288},0},{{134,289},4},{{134,296},0},{{134,304},0},{{134,320},0},{{134,321},4},{{134,328},0},{{134,336},0},{{134,352},0},{{136,1},2},{{136,2},6},{{136,3},2},{{136,4},0},{{136,5},1},{{136,6},0},{{136,16},0},{{136,17},8},{{136,18},6},{{136,20},6},{{136,32},0},{{136,33},1},{{136,34},6},{{136,36},8},
{{136,48},6},{{136,64},1},{{136,65},4},{{136,66},0},{{136,68},4},{{136,80},2},{{136,96},1},{{136,256},2},{{136,257},4},{{136,258},0},{{136,260},0},{{136,272},0},{{136,288},2},{{136,320},4},{{137,6},4},{{137,18},6},{{137,20},6},{{137,22},6},{{137,34},6},{{137,36},6},{{137,38},6},{{137,48},6},{{137,50},6},{{137,52},6},{{137,66},4},{{137,68},4},{{137,70},4},{{137,80},2},{{137,82},2},{{137,96},2},{{137,98},2},{{137,100},1},{{137,112},2},{{137,258},6},{{137,260},5},{{137,262},5},{{137,272},6},{{137,274},6},{{137,276},6},{{137,288},2},{{137,290},6},{{137,304},2},{{137,320},2},{{137,322},2},{{137,324},1},{{137,336},2},{{137,352},2},{{138,5},4},{{138,17},2},{{138,20},0},{{138,21},5},{{138,33},4},{{138,36},4},{{138,37},4},{{138,48},2},{{138,49},8},{{138,52},0},{{138,65},4},{{138,68},4},{{138,69},4},{{138,80},0},{{138,81},2},{{138,96},4},{{138,97},4},{{138,100},4},{{138,112},2},{{138,257},4},{{138,260},4},{{138,261},4},{{138,272},0},{{138,276},0},{{138,288},2},{{138,289},4},{{138,304},0},{{138,320},4},{{138,321},4},{{138,324},4},{{138,336},0},{{138,352},2},{{139,52},6},{{139,100},4},{{139,112},2},{{139,276},5},{{139,304},2},{{139,324},4},{{139,336},2},{{139,352},2},{{139,368},2},{{140,3},4},{{140,17},8},{{140,18},6},{{140,19},8},{{140,33},4},{{140,34},6},{{140,35},6},{{140,48},0},{{140,49},8},{{140,50},6},{{140,65},4},{{140,66},4},
{{140,67},5},{{140,80},0},{{140,81},8},{{140,82},0},{{140,96},0},{{140,97},1},{{140,98},0},{{140,112},0},{{140,257},4},{{140,258},4},{{140,259},4},{{140,272},0},{{140,274},0},{{140,288},0},{{140,289},4},{{140,290},6},{{140,304},0},{{140,320},1},{{140,321},4},{{140,322},0},{{140,336},0},{{140,352},1},{{141,50},6},{{141,82},5},{{141,98},4},{{141,112},1},{{141,114},8},{{141,274},6},{{141,290},6},{{141,304},1},{{141,306},6},{{141,322},4},{{141,336},1},{{141,338},5},{{141,352},1},{{141,354},4},{{141,368},1},{{142,49},8},{{142,81},8},{{142,97},4},{{142,112},0},{{142,113},8},{{142,289},4},{{142,304},0},{{142,321},4},{{142,336},0},{{142,352},0},{{142,353},4},{{142,368},0},{{144,1},1},{{144,2},0},{{144,3},2},{{144,4},1},{{144,5},1},{{144,6},0},{{144,8},0},{{144,9},1},{{144,10},6},{{144,12},0},{{144,32},0},{{144,33},1},{{144,34},6},{{144,36},1},{{144,40},0},{{144,64},1},{{144,65},1},{{144,66},0},{{144,68},0},{{144,72},0},{{144,96},0},{{144,256},1},{{144,257},1},{{144,258},0},{{144,260},1},{{144,264},1},{{144,288},1},{{144,320},1},{{145,6},8},{{145,10},8},{{145,12},1},{{145,14},8},{{145,34},8},{{145,36},8},{{145,38},8},{{145,40},1},{{145,42},2},{{145,44},1},{{145,66},8},{{145,68},1},{{145,70},3},{{145,72},1},{{145,74},8},{{145,76},1},{{145,96},1},{{145,98},8},{{145,100},1},{{145,104},1},{{145,258},2},{{145,260},5},{{145,262},5},
{{145,264},1},{{145,266},2},{{145,268},1},{{145,288},2},{{145,290},2},{{145,296},1},{{145,320},1},{{145,322},2},{{145,324},1},{{145,328},1},{{145,352},1},{{148,3},6},{{148,9},6},{{148,10},6},{{148,11},6},{{148,33},1},{{148,34},6},{{148,35},6},{{148,40},0},{{148,41},1},{{148,42},0},{{148,65},3},{{148,66},0},{{148,67},3},{{148,72},0},{{148,74},0},{{148,96},1},{{148,97},1},{{148,98},0},{{148,104},0},{{148,257},1},{{148,258},6},{{148,259},3},{{148,264},0},{{148,265},1},{{148,266},6},{{148,288},0},{{148,289},1},{{148,290},6},{{148,296},0},{{148,320},1},{{148,321},1},{{148,322},0},{{148,328},1},{{148,352},1},{{149,42},6},{{149,74},8},{{149,98},8},{{149,104},1},{{149,106},8},{{149,266},6},{{149,290},6},{{149,296},1},{{149,298},6},{{149,322},3},{{149,328},1},{{149,330},5},{{149,352},1},{{149,354},3},{{149,360},1},{{152,3},2},{{152,5},1},{{152,6},0},{{152,33},1},{{152,34},2},{{152,35},2},{{152,36},1},{{152,37},1},{{152,38},0},{{152,65},1},{{152,66},5},{{152,67},5},{{152,68},0},{{152,69},1},{{152,70},0},{{152,96},1},{{152,97},1},{{152,98},0},{{152,100},1},{{152,257},1},{{152,258},5},{{152,259},2},{{152,260},5},{{152,261},1},{{152,262},5},{{152,288},2},{{152,289},1},{{152,290},2},{{152,320},0},{{152,321},1},{{152,322},5},{{152,324},1},{{152,352},1},{{153,38},8},{{153,70},5},{{153,98},8},{{153,100},8},{{153,102},8},{{153,262},5},{{153,290},2},
{{153,322},5},{{153,324},5},{{153,326},5},{{153,352},2},{{153,354},2},{{156,35},6},{{156,67},5},{{156,97},1},{{156,98},0},{{156,99},8},{{156,259},5},{{156,289},1},{{156,290},6},{{156,291},6},{{156,321},1},{{156,322},5},{{156,323},5},{{156,352},1},{{156,353},1},{{156,354},0},{{160,1},2},{{160,2},6},{{160,3},2},{{160,4},0},{{160,5},1},{{160,6},0},{{160,8},2},{{160,9},6},{{160,10},8},{{160,12},0},{{160,16},2},{{160,17},8},{{160,18},8},{{160,20},6},{{160,24},8},{{160,64},0},{{160,65},1},{{160,66},0},{{160,68},4},{{160,72},0},{{160,80},2},{{160,256},1},{{160,257},4},{{160,258},0},{{160,260},4},{{160,264},0},{{160,272},0},{{160,320},4},{{161,6},3},{{161,10},8},{{161,12},4},{{161,14},8},{{161,18},6},{{161,20},6},{{161,22},6},{{161,24},2},{{161,26},8},{{161,28},6},{{161,66},4},{{161,68},4},{{161,70},4},{{161,72},1},{{161,74},8},{{161,76},4},{{161,80},2},{{161,82},2},{{161,88},2},{{161,258},3},{{161,260},3},{{161,262},3},{{161,264},1},{{161,266},2},{{161,268},1},{{161,272},1},{{161,274},2},{{161,276},6},{{161,280},1},{{161,320},1},{{161,322},2},{{161,324},4},{{161,328},1},{{161,336},2},{{162,5},4},{{162,9},4},{{162,12},4},{{162,13},4},{{162,17},2},{{162,20},0},{{162,21},3},{{162,24},0},{{162,25},2},{{162,28},6},{{162,65},3},{{162,68},4},{{162,69},4},{{162,72},0},{{162,76},4},{{162,80},0},{{162,81},2},{{162,88},0},
{{162,257},4},{{162,260},4},{{162,261},4},{{162,264},4},{{162,265},4},{{162,268},4},{{162,272},0},{{162,276},0},{{162,280},0},{{162,320},4},{{162,321},4},{{162,324},4},{{162,328},0},{{162,336},0},{{163,28},6},{{163,76},4},{{163,88},2},{{163,268},4},{{163,276},6},{{163,280},2},{{163,284},6},{{163,324},4},{{163,328},2},{{163,332},4},{{163,336},2},{{163,344},2},{{164,3},3},{{164,9},6},{{164,10},8},{{164,11},6},{{164,17},8},{{164,18},8},{{164,19},8},{{164,24},8},{{164,25},8},{{164,26},8},{{164,65},3},{{164,66},8},{{164,67},3},{{164,72},0},{{164,74},8},{{164,80},8},{{164,81},8},{{164,82},8},{{164,88},0},{{164,257},3},{{164,258},3},{{164,259},4},{{164,264},0},{{164,265},1},{{164,266},0},{{164,272},0},{{164,274},0},{{164,280},0},{{164,320},0},{{164,321},1},{{164,322},0},{{164,328},0},{{164,336},0},{{165,26},8},{{165,74},8},{{165,82},8},{{165,88},1},{{165,90},8},{{165,266},4},{{165,274},3},{{165,280},1},{{165,282},6},{{165,322},3},{{165,328},1},{{165,330},4},{{165,336},1},{{165,338},3},{{165,344},1},{{166,25},6},{{166,81},3},{{166,88},0},{{166,265},4},{{166,280},0},{{166,321},3},{{166,328},0},{{166,336},0},{{166,344},0},{{168,3},2},{{168,5},1},{{168,6},0},{{168,17},1},{{168,18},0},{{168,19},2},{{168,20},0},{{168,21},1},{{168,22},0},{{168,65},4},{{168,66},4},{{168,67},2},{{168,68},4},{{168,69},4},{{168,70},4},{{168,80},0},{{168,81},1},
{{168,82},2},{{168,257},4},{{168,258},4},{{168,259},4},{{168,260},4},{{168,261},4},{{168,262},0},{{168,272},0},{{168,274},0},{{168,276},0},{{168,320},4},{{168,321},4},{{168,322},4},{{168,324},4},{{168,336},0},{{169,22},6},{{169,70},4},{{169,82},2},{{169,262},4},{{169,274},6},{{169,276},6},{{169,278},6},{{169,322},4},{{169,324},4},{{169,326},4},{{169,336},2},{{169,338},2},{{170,21},6},{{170,69},4},{{170,81},2},{{170,261},4},{{170,276},0},{{170,321},4},{{170,324},4},{{170,325},4},{{170,336},0},{{172,19},8},{{172,67},4},{{172,81},8},{{172,82},8},{{172,83},8},{{172,259},4},{{172,274},0},{{172,321},4},{{172,322},4},{{172,323},4},{{172,336},0},{{172,338},0},{{176,3},2},{{176,5},1},{{176,6},0},{{176,9},1},{{176,10},0},{{176,11},2},{{176,12},1},{{176,13},1},{{176,14},0},{{176,65},3},{{176,66},3},{{176,67},3},{{176,68},0},{{176,69},1},{{176,70},0},{{176,72},0},{{176,74},0},{{176,76},0},{{176,257},1},{{176,258},3},{{176,259},2},{{176,260},0},{{176,261},1},{{176,262},3},{{176,264},1},{{176,265},1},{{176,266},0},{{176,268},1},{{176,320},0},{{176,321},1},{{176,322},3},{{176,324},0},{{176,328},1},{{177,14},8},{{177,70},3},{{177,74},8},{{177,76},1},{{177,78},8},{{177,262},3},{{177,266},2},{{177,268},1},{{177,270},6},{{177,322},3},{{177,324},1},{{177,326},3},{{177,328},1},{{177,330},2},{{177,332},1},{{180,11},6},{{180,67},3},{{180,74},0},{{180,259},3},
{{180,265},6},{{180,266},6},{{180,267},6},{{180,321},3},{{180,322},3},{{180,323},3},{{180,328},0},{{180,330},0},{{192,1},1},{{192,2},8},{{192,3},2},{{192,4},8},{{192,5},1},{{192,6},0},{{192,8},0},{{192,9},1},{{192,10},2},{{192,12},1},{{192,16},8},{{192,17},8},{{192,18},0},{{192,20},0},{{192,24},8},{{192,32},8},{{192,33},1},{{192,34},0},{{192,36},8},{{192,40},4},{{192,48},3},{{192,256},2},{{192,257},4},{{192,258},0},{{192,260},0},{{192,264},4},{{192,272},0},{{192,288},0},{{193,6},3},{{193,10},8},{{193,12},8},{{193,14},8},{{193,18},2},{{193,20},1},{{193,22},3},{{193,24},5},{{193,26},8},{{193,28},8},{{193,34},2},{{193,36},8},{{193,38},3},{{193,40},4},{{193,42},4},{{193,44},8},{{193,48},3},{{193,50},3},{{193,52},3},{{193,258},3},{{193,260},5},{{193,262},3},{{193,264},5},{{193,266},2},{{193,268},5},{{193,272},3},{{193,274},3},{{193,276},3},{{193,280},5},{{193,288},2},{{193,290},2},{{193,296},1},{{193,304},3},{{194,5},3},{{194,9},2},{{194,12},0},{{194,13},4},{{194,17},8},{{194,20},8},{{194,21},8},{{194,24},5},{{194,25},8},{{194,28},8},{{194,33},2},{{194,36},8},{{194,37},4},{{194,40},4},{{194,41},4},{{194,44},4},{{194,48},3},{{194,49},8},{{194,52},8},{{194,257},4},{{194,260},4},{{194,261},4},{{194,264},4},{{194,265},4},{{194,268},4},{{194,272},0},{{194,276},0},{{194,280},0},{{194,288},2},{{194,289},4},{{194,296},4},
{{194,304},0},{{195,28},5},{{195,44},4},{{195,52},3},{{195,268},5},{{195,276},5},{{195,280},5},{{195,284},5},{{195,296},2},{{195,304},2},{{196,3},3},{{196,9},1},{{196,10},0},{{196,11},4},{{196,17},8},{{196,18},8},{{196,19},8},{{196,24},5},{{196,25},8},{{196,26},8},{{196,33},1},{{196,34},0},{{196,35},3},{{196,40},4},{{196,41},4},{{196,42},4},{{196,48},3},{{196,49},8},{{196,50},3},{{196,257},4},{{196,258},4},{{196,259},4},{{196,264},4},{{196,265},4},{{196,266},4},{{196,272},0},{{196,274},0},{{196,280},0},{{196,288},4},{{196,289},4},{{196,290},0},{{196,296},4},{{196,304},0},{{197,26},5},{{197,42},4},{{197,50},3},{{197,266},4},{{197,274},3},{{197,280},5},{{197,282},5},{{197,290},3},{{197,296},4},{{197,298},4},{{197,304},3},{{197,306},3},{{198,25},5},{{198,41},4},{{198,49},3},{{198,265},4},{{198,280},0},{{198,289},4},{{198,296},4},{{198,297},4},{{198,304},0},{{200,3},2},{{200,5},1},{{200,6},0},{{200,17},8},{{200,18},0},{{200,19},8},{{200,20},0},{{200,21},8},{{200,22},0},{{200,33},8},{{200,34},0},{{200,35},2},{{200,36},8},{{200,37},8},{{200,38},0},{{200,48},0},{{200,49},8},{{200,50},0},{{200,52},0},{{200,257},1},{{200,258},0},{{200,259},2},{{200,260},0},{{200,261},1},{{200,262},0},{{200,272},0},{{200,274},0},{{200,276},0},{{200,288},0},{{200,289},1},{{200,290},0},{{200,304},0},{{202,21},8},{{202,37},8},{{202,49},8},{{202,52},8},
{{202,53},8},{{202,261},4},{{202,276},0},{{202,289},2},{{202,304},0},{{204,19},8},{{204,35},4},{{204,49},8},{{204,50},0},{{204,51},8},{{204,259},4},{{204,274},0},{{204,289},4},{{204,290},0},{{204,291},4},{{204,304},0},{{204,306},0},{{208,3},2},{{208,5},1},{{208,6},0},{{208,9},1},{{208,10},0},{{208,11},2},{{208,12},0},{{208,13},1},{{208,14},8},{{208,33},1},{{208,34},0},{{208,35},2},{{208,36},8},{{208,37},1},{{208,38},8},{{208,40},0},{{208,41},1},{{208,42},0},{{208,44},1},{{208,257},1},{{208,258},2},{{208,259},2},{{208,260},1},{{208,261},1},{{208,262},0},{{208,264},0},{{208,265},1},{{208,266},2},{{208,268},1},{{208,288},2},{{208,289},1},{{208,290},2},{{208,296},1},{{209,14},8},{{209,38},8},{{209,42},2},{{209,44},8},{{209,46},8},{{209,262},5},{{209,266},2},{{209,268},5},{{209,270},5},{{209,290},2},{{209,296},2},{{209,298},2},{{216,35},2},{{216,37},1},{{216,38},0},{{216,259},2},{{216,261},1},{{216,262},0},{{216,289},2},{{216,290},2},{{216,291},2},{{224,3},2},{{224,5},1},{{224,6},0},{{224,9},1},{{224,10},8},{{224,11},2},{{224,12},8},{{224,13},1},{{224,14},8},{{224,17},8},{{224,18},8},{{224,19},8},{{224,20},8},{{224,21},8},{{224,22},0},{{224,24},8},{{224,25},8},{{224,26},8},{{224,28},8},{{224,257},1},{{224,258},0},{{224,259},2},{{224,260},0},{{224,261},1},{{224,262},0},{{224,264},1},{{224,265},4},{{224,266},0},{{224,268},0},
{{224,272},0},{{224,274},0},{{224,276},0},{{224,280},0},{{225,14},8},{{225,22},3},{{225,26},8},{{225,28},8},{{225,30},8},{{225,262},3},{{225,266},2},{{225,268},1},{{225,270},4},{{225,274},3},{{225,276},3},{{225,278},3},{{225,280},1},{{225,282},2},{{225,284},1},{{226,13},4},{{226,21},8},{{226,25},8},{{226,28},8},{{226,29},8},{{226,261},4},{{226,265},4},{{226,268},4},{{226,269},4},{{226,276},0},{{226,280},0},{{226,284},0},{{228,11},4},{{228,19},8},{{228,25},8},{{228,26},8},{{228,27},8},{{228,259},4},{{228,265},4},{{228,266},4},{{228,267},4},{{228,274},0},{{228,280},0},{{228,282},0},{{232,19},2},{{232,21},1},{{232,22},0},{{232,259},2},{{232,261},1},{{232,262},0},{{232,274},0},{{232,276},0},{{232,278},0},{{240,11},2},{{240,13},1},{{240,14},0},{{240,259},2},{{240,261},1},{{240,262},0},{{240,265},1},{{240,266},2},{{240,267},2},{{240,268},1},{{240,269},1},{{240,270},0},{{256,0},4},{{256,1},2},{{256,2},2},{{256,4},0},{{256,8},2},{{256,16},0},{{256,32},4},{{256,64},0},{{256,128},2},{{257,2},4},{{257,4},1},{{257,6},3},{{257,8},4},{{257,10},2},{{257,12},4},{{257,16},1},{{257,18},7},{{257,20},6},{{257,24},5},{{257,32},4},{{257,34},3},{{257,36},3},{{257,40},4},{{257,48},3},{{257,64},1},{{257,66},2},{{257,68},4},{{257,72},1},{{257,80},2},{{257,96},1},{{257,128},4},{{257,130},4},{{257,132},3},{{257,136},1},{{257,144},1},{{257,160},1},
{{257,192},1},{{258,1},4},{{258,4},4},{{258,5},7},{{258,8},4},{{258,9},6},{{258,12},4},{{258,16},0},{{258,17},2},{{258,20},6},{{258,24},5},{{258,32},4},{{258,33},7},{{258,36},3},{{258,40},4},{{258,48},3},{{258,64},0},{{258,65},3},{{258,68},4},{{258,72},0},{{258,80},2},{{258,96},0},{{258,128},0},{{258,129},2},{{258,132},0},{{258,136},0},{{258,144},2},{{258,160},0},{{258,192},0},{{259,12},4},{{259,20},3},{{259,24},2},{{259,28},5},{{259,36},4},{{259,40},4},{{259,44},4},{{259,48},2},{{259,52},3},{{259,68},4},{{259,72},2},{{259,76},4},{{259,80},2},{{259,88},2},{{259,96},2},{{259,100},4},{{259,104},2},{{259,112},2},{{259,132},4},{{259,136},2},{{259,140},4},{{259,144},2},{{259,148},6},{{259,152},2},{{259,160},2},{{259,164},3},{{259,168},2},{{259,176},2},{{259,192},2},{{259,196},4},{{259,200},2},{{259,208},2},{{259,224},2},{{260,1},1},{{260,2},0},{{260,3},3},{{260,8},0},{{260,9},5},{{260,10},0},{{260,16},5},{{260,17},5},{{260,18},5},{{260,24},5},{{260,32},4},{{260,33},6},{{260,34},4},{{260,40},4},{{260,48},3},{{260,64},0},{{260,65},5},{{260,66},0},{{260,72},0},{{260,80},0},{{260,96},0},{{260,128},0},{{260,129},4},{{260,130},4},{{260,136},0},{{260,144},1},{{260,160},0},{{260,192},0},{{261,10},4},{{261,18},5},{{261,24},5},{{261,26},5},{{261,34},4},{{261,40},4},{{261,42},4},{{261,48},1},{{261,50},3},{{261,66},3},
{{261,72},1},{{261,74},4},{{261,80},1},{{261,82},5},{{261,88},1},{{261,96},1},{{261,98},4},{{261,104},1},{{261,112},1},{{261,130},4},{{261,136},1},{{261,138},4},{{261,144},1},{{261,152},1},{{261,160},1},{{261,162},4},{{261,168},1},{{261,176},1},{{261,192},1},{{261,194},4},{{261,200},1},{{261,208},1},{{261,224},1},{{262,9},5},{{262,17},5},{{262,24},5},{{262,25},5},{{262,33},3},{{262,40},0},{{262,41},4},{{262,48},3},{{262,49},3},{{262,65},3},{{262,72},0},{{262,80},0},{{262,81},5},{{262,88},0},{{262,96},0},{{262,97},3},{{262,104},0},{{262,112},0},{{262,129},5},{{262,136},0},{{262,137},5},{{262,144},0},{{262,145},5},{{262,152},0},{{262,160},0},{{262,161},3},{{262,168},0},{{262,176},0},{{262,192},0},{{262,193},5},{{262,200},0},{{262,208},0},{{262,224},0},{{264,1},2},{{264,2},4},{{264,3},2},{{264,4},0},{{264,5},1},{{264,6},0},{{264,16},0},{{264,17},1},{{264,18},7},{{264,20},6},{{264,32},0},{{264,33},1},{{264,34},0},{{264,36},0},{{264,48},6},{{264,64},4},{{264,65},5},{{264,66},4},{{264,68},4},{{264,80},2},{{264,96},0},{{264,128},4},{{264,129},5},{{264,130},4},{{264,132},0},{{264,144},1},{{264,160},0},{{264,192},1},{{265,6},4},{{265,18},6},{{265,20},6},{{265,22},6},{{265,34},2},{{265,36},1},{{265,38},4},{{265,48},6},{{265,50},6},{{265,52},6},{{265,66},4},{{265,68},4},{{265,70},4},{{265,80},1},{{265,82},2},{{265,96},4},
{{265,98},4},{{265,100},4},{{265,112},2},{{265,130},4},{{265,132},1},{{265,134},4},{{265,144},1},{{265,148},6},{{265,160},1},{{265,162},4},{{265,164},1},{{265,176},1},{{265,192},4},{{265,194},4},{{265,196},4},{{265,208},1},{{265,224},1},{{266,5},4},{{266,17},2},{{266,20},6},{{266,21},6},{{266,33},4},{{266,36},0},{{266,37},7},{{266,48},0},{{266,49},2},{{266,52},6},{{266,65},4},{{266,68},4},{{266,69},4},{{266,80},2},{{266,81},2},{{266,96},0},{{266,97},2},{{266,100},4},{{266,112},2},{{266,129},2},{{266,132},0},{{266,133},4},{{266,144},0},{{266,145},2},{{266,148},6},{{266,160},0},{{266,161},2},{{266,164},0},{{266,176},0},{{266,192},0},{{266,193},5},{{266,196},4},{{266,208},2},{{266,224},0},{{267,52},6},{{267,100},4},{{267,112},2},{{267,148},6},{{267,164},4},{{267,176},2},{{267,180},6},{{267,196},4},{{267,208},2},{{267,224},2},{{267,228},4},{{267,240},2},{{268,3},4},{{268,17},5},{{268,18},7},{{268,19},5},{{268,33},4},{{268,34},4},{{268,35},6},{{268,48},0},{{268,49},1},{{268,50},7},{{268,65},5},{{268,66},5},{{268,67},5},{{268,80},5},{{268,81},5},{{268,82},5},{{268,96},0},{{268,97},1},{{268,98},0},{{268,112},0},{{268,129},5},{{268,130},4},{{268,131},4},{{268,144},1},{{268,145},5},{{268,160},0},{{268,161},1},{{268,162},4},{{268,176},1},{{268,192},0},{{268,193},5},{{268,194},4},{{268,208},1},{{268,224},0},{{269,50},7},{{269,82},7},{{269,98},4},
{{269,112},1},{{269,114},7},{{269,162},4},{{269,176},1},{{269,194},4},{{269,208},1},{{269,224},1},{{269,226},4},{{269,240},1},{{270,49},6},{{270,81},5},{{270,97},4},{{270,112},0},{{270,113},7},{{270,145},5},{{270,161},4},{{270,176},0},{{270,177},6},{{270,193},5},{{270,208},0},{{270,209},5},{{270,224},0},{{270,225},4},{{270,240},0},{{272,1},2},{{272,2},0},{{272,3},2},{{272,4},0},{{272,5},1},{{272,6},0},{{272,8},0},{{272,9},6},{{272,10},0},{{272,12},0},{{272,32},0},{{272,33},6},{{272,34},0},{{272,36},0},{{272,40},0},{{272,64},0},{{272,65},3},{{272,66},0},{{272,68},0},{{272,72},0},{{272,96},0},{{272,128},0},{{272,129},2},{{272,130},0},{{272,132},0},{{272,136},0},{{272,160},0},{{272,192},0},{{274,5},7},{{274,9},6},{{274,12},0},{{274,13},7},{{274,33},7},{{274,36},0},{{274,37},7},{{274,40},0},{{274,41},6},{{274,44},0},{{274,65},3},{{274,68},0},{{274,69},3},{{274,72},0},{{274,76},0},{{274,96},0},{{274,97},7},{{274,100},0},{{274,104},0},{{274,129},2},{{274,132},0},{{274,133},3},{{274,136},0},{{274,137},6},{{274,140},0},{{274,160},0},{{274,161},2},{{274,164},0},{{274,168},0},{{274,192},0},{{274,193},3},{{274,196},0},{{274,200},0},{{274,224},0},{{276,3},3},{{276,9},6},{{276,10},0},{{276,11},5},{{276,33},6},{{276,34},0},{{276,35},6},{{276,40},0},{{276,41},6},{{276,42},0},{{276,65},3},{{276,66},0},{{276,67},5},{{276,72},0},
{{276,74},0},{{276,96},0},{{276,97},3},{{276,98},0},{{276,104},0},{{276,129},1},{{276,130},0},{{276,131},3},{{276,136},0},{{276,137},5},{{276,138},0},{{276,160},0},{{276,161},6},{{276,162},0},{{276,168},0},{{276,192},0},{{276,193},5},{{276,194},0},{{276,200},0},{{276,224},0},{{278,41},6},{{278,97},3},{{278,104},0},{{278,137},6},{{278,161},6},{{278,168},0},{{278,169},6},{{278,193},3},{{278,200},0},{{278,224},0},{{278,225},3},{{278,232},0},{{280,3},2},{{280,5},1},{{280,6},0},{{280,33},1},{{280,34},0},{{280,35},2},{{280,36},0},{{280,37},1},{{280,38},0},{{280,65},5},{{280,66},0},{{280,67},5},{{280,68},0},{{280,69},1},{{280,70},0},{{280,96},0},{{280,97},1},{{280,98},0},{{280,100},0},{{280,129},5},{{280,130},0},{{280,131},2},{{280,132},0},{{280,133},5},{{280,134},0},{{280,160},0},{{280,161},1},{{280,162},0},{{280,164},0},{{280,192},0},{{280,193},5},{{280,194},0},{{280,196},0},{{280,224},0},{{282,37},7},{{282,69},5},{{282,97},7},{{282,100},0},{{282,101},7},{{282,133},5},{{282,161},2},{{282,164},0},{{282,165},6},{{282,193},5},{{282,196},0},{{282,197},5},{{282,224},0},{{282,225},2},{{282,228},0},{{284,35},6},{{284,67},5},{{284,97},1},{{284,98},0},{{284,99},7},{{284,131},5},{{284,161},6},{{284,162},0},{{284,163},6},{{284,193},5},{{284,194},0},{{284,195},5},{{284,224},0},{{284,225},1},{{284,226},0},{{288,1},2},{{288,2},2},{{288,3},2},{{288,4},0},
{{288,5},1},{{288,6},0},{{288,8},2},{{288,9},2},{{288,10},0},{{288,12},0},{{288,16},2},{{288,17},2},{{288,18},2},{{288,20},6},{{288,24},2},{{288,64},0},{{288,65},2},{{288,66},0},{{288,68},4},{{288,72},0},{{288,80},2},{{288,128},0},{{288,129},2},{{288,130},2},{{288,132},4},{{288,136},0},{{288,144},2},{{288,192},0},{{289,6},4},{{289,10},2},{{289,12},4},{{289,14},4},{{289,18},2},{{289,20},1},{{289,22},3},{{289,24},2},{{289,26},2},{{289,28},6},{{289,66},2},{{289,68},4},{{289,70},4},{{289,72},1},{{289,74},2},{{289,76},4},{{289,80},2},{{289,82},2},{{289,88},2},{{289,130},4},{{289,132},4},{{289,134},4},{{289,136},1},{{289,138},2},{{289,140},4},{{289,144},1},{{289,148},1},{{289,152},2},{{289,192},1},{{289,194},2},{{289,196},4},{{289,200},1},{{289,208},2},{{290,5},6},{{290,9},6},{{290,12},6},{{290,13},6},{{290,17},2},{{290,20},6},{{290,21},6},{{290,24},2},{{290,25},2},{{290,28},6},{{290,65},2},{{290,68},0},{{290,69},3},{{290,72},0},{{290,76},0},{{290,80},2},{{290,81},2},{{290,88},2},{{290,129},2},{{290,132},0},{{290,133},3},{{290,136},2},{{290,137},2},{{290,140},0},{{290,144},2},{{290,145},2},{{290,148},6},{{290,152},2},{{290,192},0},{{290,193},2},{{290,196},4},{{290,200},0},{{290,208},2},{{291,28},6},{{291,76},4},{{291,88},2},{{291,140},4},{{291,148},6},{{291,152},2},{{291,156},6},{{291,196},4},{{291,200},2},{{291,204},4},
{{291,208},2},{{291,216},2},{{296,3},2},{{296,5},1},{{296,6},0},{{296,17},2},{{296,18},2},{{296,19},2},{{296,20},0},{{296,21},1},{{296,22},0},{{296,65},1},{{296,66},0},{{296,67},2},{{296,68},4},{{296,69},4},{{296,70},4},{{296,80},2},{{296,81},2},{{296,82},2},{{296,129},1},{{296,130},4},{{296,131},2},{{296,132},4},{{296,133},4},{{296,134},4},{{296,144},1},{{296,145},2},{{296,148},0},{{296,192},0},{{296,193},1},{{296,194},2},{{296,196},4},{{296,208},2},{{297,22},6},{{297,70},4},{{297,82},2},{{297,134},4},{{297,148},1},{{297,194},4},{{297,196},4},{{297,198},4},{{297,208},1},{{298,21},6},{{298,69},4},{{298,81},2},{{298,133},4},{{298,145},2},{{298,148},6},{{298,149},6},{{298,193},2},{{298,196},4},{{298,197},4},{{298,208},2},{{298,209},2},{{304,3},2},{{304,5},1},{{304,6},0},{{304,9},2},{{304,10},0},{{304,11},2},{{304,12},0},{{304,13},1},{{304,14},0},{{304,65},3},{{304,66},0},{{304,67},2},{{304,68},0},{{304,69},3},{{304,70},0},{{304,72},0},{{304,74},0},{{304,76},0},{{304,129},1},{{304,130},0},{{304,131},2},{{304,132},0},{{304,133},3},{{304,134},0},{{304,136},0},{{304,137},2},{{304,138},0},{{304,140},0},{{304,192},0},{{304,193},2},{{304,194},0},{{304,196},0},{{304,200},0},{{306,13},6},{{306,69},3},{{306,76},0},{{306,133},3},{{306,137},6},{{306,140},0},{{306,141},6},{{306,193},3},{{306,196},0},{{306,197},3},{{306,200},0},{{306,204},0},
{{320,1},1},{{320,2},0},{{320,3},2},{{320,4},0},{{320,5},7},{{320,6},0},{{320,8},0},{{320,9},1},{{320,10},0},{{320,12},0},{{320,16},7},{{320,17},2},{{320,18},7},{{320,20},0},{{320,24},5},{{320,32},0},{{320,33},2},{{320,34},0},{{320,36},0},{{320,40},4},{{320,48},3},{{320,128},4},{{320,129},2},{{320,130},4},{{320,132},0},{{320,136},2},{{320,144},1},{{320,160},0},{{321,6},3},{{321,10},2},{{321,12},1},{{321,14},4},{{321,18},7},{{321,20},1},{{321,22},3},{{321,24},5},{{321,26},7},{{321,28},7},{{321,34},2},{{321,36},1},{{321,38},3},{{321,40},4},{{321,42},4},{{321,44},4},{{321,48},3},{{321,50},3},{{321,52},3},{{321,130},4},{{321,132},1},{{321,134},3},{{321,136},4},{{321,138},4},{{321,140},4},{{321,144},1},{{321,148},3},{{321,152},1},{{321,160},1},{{321,162},3},{{321,164},1},{{321,168},4},{{321,176},3},{{322,5},7},{{322,9},2},{{322,12},7},{{322,13},7},{{322,17},7},{{322,20},7},{{322,21},7},{{322,24},5},{{322,25},5},{{322,28},7},{{322,33},7},{{322,36},0},{{322,37},7},{{322,40},4},{{322,41},4},{{322,44},4},{{322,48},3},{{322,49},7},{{322,52},3},{{322,129},2},{{322,132},0},{{322,133},3},{{322,136},2},{{322,137},2},{{322,140},0},{{322,144},0},{{322,145},2},{{322,148},0},{{322,152},5},{{322,160},0},{{322,161},2},{{322,164},0},{{322,168},4},{{322,176},3},{{323,28},5},{{323,44},4},{{323,52},3},{{323,140},4},{{323,148},3},
{{323,152},5},{{323,156},5},{{323,164},3},{{323,168},4},{{323,172},4},{{323,176},3},{{323,180},3},{{324,3},3},{{324,9},1},{{324,10},0},{{324,11},4},{{324,17},1},{{324,18},7},{{324,19},5},{{324,24},5},{{324,25},5},{{324,26},5},{{324,33},1},{{324,34},0},{{324,35},3},{{324,40},4},{{324,41},4},{{324,42},4},{{324,48},3},{{324,49},7},{{324,50},7},{{324,129},1},{{324,130},4},{{324,131},4},{{324,136},0},{{324,137},1},{{324,138},4},{{324,144},1},{{324,145},5},{{324,152},5},{{324,160},4},{{324,161},4},{{324,162},4},{{324,168},4},{{324,176},0},{{325,26},5},{{325,42},4},{{325,50},3},{{325,138},4},{{325,152},1},{{325,162},4},{{325,168},4},{{325,170},4},{{325,176},1},{{326,25},5},{{326,41},4},{{326,49},3},{{326,137},4},{{326,145},5},{{326,152},5},{{326,153},5},{{326,161},4},{{326,168},4},{{326,169},4},{{326,176},3},{{326,177},3},{{328,3},2},{{328,5},1},{{328,6},0},{{328,17},7},{{328,18},7},{{328,19},7},{{328,20},0},{{328,21},7},{{328,22},0},{{328,33},7},{{328,34},0},{{328,35},2},{{328,36},0},{{328,37},7},{{328,38},0},{{328,48},0},{{328,49},7},{{328,50},0},{{328,52},0},{{328,129},1},{{328,130},0},{{328,131},2},{{328,132},0},{{328,133},1},{{328,134},0},{{328,144},1},{{328,145},1},{{328,148},0},{{328,160},0},{{328,161},1},{{328,162},0},{{328,164},0},{{328,176},0},{{330,21},7},{{330,37},7},{{330,49},7},{{330,52},0},{{330,53},7},{{330,133},4},
{{330,145},2},{{330,148},0},{{330,149},5},{{330,161},2},{{330,164},0},{{330,165},4},{{330,176},0},{{330,177},2},{{330,180},0},{{332,19},7},{{332,35},4},{{332,49},7},{{332,50},7},{{332,51},7},{{332,131},4},{{332,145},1},{{332,161},4},{{332,162},4},{{332,163},4},{{332,176},1},{{332,177},1},{{336,3},2},{{336,5},1},{{336,6},0},{{336,9},1},{{336,10},0},{{336,11},2},{{336,12},0},{{336,13},7},{{336,14},0},{{336,33},1},{{336,34},0},{{336,35},2},{{336,36},0},{{336,37},7},{{336,38},0},{{336,40},0},{{336,41},1},{{336,42},0},{{336,44},0},{{336,129},2},{{336,130},0},{{336,131},2},{{336,132},0},{{336,133},1},{{336,134},0},{{336,136},0},{{336,137},2},{{336,138},0},{{336,140},0},{{336,160},0},{{336,161},2},{{336,162},0},{{336,164},0},{{336,168},0},{{338,13},7},{{338,37},7},{{338,41},2},{{338,44},0},{{338,45},7},{{338,133},3},{{338,137},2},{{338,140},0},{{338,141},5},{{338,161},2},{{338,164},0},{{338,165},3},{{338,168},0},{{338,169},2},{{338,172},0},{{344,35},2},{{344,37},1},{{344,38},0},{{344,131},2},{{344,133},1},{{344,134},0},{{344,161},2},{{344,162},0},{{344,163},2},{{344,164},0},{{344,165},1},{{344,166},0},{{352,3},2},{{352,5},1},{{352,6},0},{{352,9},1},{{352,10},0},{{352,11},2},{{352,12},7},{{352,13},7},{{352,14},0},{{352,17},1},{{352,18},7},{{352,19},2},{{352,20},7},{{352,21},7},{{352,22},7},{{352,24},0},{{352,25},1},{{352,26},2},
{{352,28},7},{{352,129},2},{{352,130},2},{{352,131},2},{{352,132},1},{{352,133},1},{{352,134},0},{{352,136},2},{{352,137},2},{{352,138},2},{{352,140},0},{{352,144},1},{{352,145},2},{{352,148},1},{{352,152},2},{{353,14},4},{{353,22},7},{{353,26},7},{{353,28},7},{{353,30},7},{{353,134},4},{{353,138},4},{{353,140},4},{{353,142},4},{{353,148},1},{{353,152},1},{{353,156},1},{{354,13},7},{{354,21},7},{{354,25},2},{{354,28},7},{{354,29},7},{{354,133},3},{{354,137},2},{{354,140},0},{{354,141},4},{{354,145},2},{{354,148},0},{{354,149},3},{{354,152},2},{{354,153},2},{{354,156},0},{{360,19},2},{{360,21},1},{{360,22},0},{{360,131},2},{{360,133},1},{{360,134},0},{{360,145},1},{{360,148},1},{{360,149},1},{{368,11},2},{{368,13},1},{{368,14},0},{{368,131},2},{{368,133},1},{{368,134},0},{{368,137},2},{{368,138},0},{{368,139},2},{{368,140},0},{{368,141},1},{{368,142},0},{{384,1},6},{{384,2},6},{{384,3},2},{{384,4},0},{{384,5},1},{{384,6},0},{{384,8},6},{{384,9},6},{{384,10},0},{{384,12},0},{{384,16},6},{{384,17},2},{{384,18},2},{{384,20},6},{{384,24},5},{{384,32},0},{{384,33},1},{{384,34},0},{{384,36},0},{{384,40},4},{{384,48},6},{{384,64},0},{{384,65},1},{{384,66},0},{{384,68},4},{{384,72},0},{{384,80},2},{{384,96},4},{{385,6},3},{{385,10},2},{{385,12},1},{{385,14},4},{{385,18},6},{{385,20},6},{{385,22},6},{{385,24},5},{{385,26},5},
{{385,28},6},{{385,34},2},{{385,36},1},{{385,38},3},{{385,40},4},{{385,42},4},{{385,44},4},{{385,48},3},{{385,50},6},{{385,52},6},{{385,66},4},{{385,68},4},{{385,70},4},{{385,72},4},{{385,74},2},{{385,76},4},{{385,80},2},{{385,82},2},{{385,88},1},{{385,96},4},{{385,98},4},{{385,100},4},{{385,104},4},{{385,112},1},{{386,5},3},{{386,9},6},{{386,12},0},{{386,13},4},{{386,17},6},{{386,20},6},{{386,21},6},{{386,24},5},{{386,25},6},{{386,28},6},{{386,33},2},{{386,36},0},{{386,37},3},{{386,40},4},{{386,41},4},{{386,44},4},{{386,48},3},{{386,49},6},{{386,52},6},{{386,65},3},{{386,68},4},{{386,69},4},{{386,72},0},{{386,76},4},{{386,80},0},{{386,81},2},{{386,88},0},{{386,96},4},{{386,97},4},{{386,100},4},{{386,104},4},{{386,112},0},{{387,28},5},{{387,44},4},{{387,52},3},{{387,76},4},{{387,88},2},{{387,100},4},{{387,104},4},{{387,108},4},{{387,112},2},{{388,3},3},{{388,9},6},{{388,10},0},{{388,11},5},{{388,17},1},{{388,18},0},{{388,19},3},{{388,24},5},{{388,25},5},{{388,26},5},{{388,33},6},{{388,34},6},{{388,35},6},{{388,40},4},{{388,41},6},{{388,42},4},{{388,48},3},{{388,49},6},{{388,50},6},{{388,65},3},{{388,66},5},{{388,67},5},{{388,72},0},{{388,74},0},{{388,80},5},{{388,81},5},{{388,82},5},{{388,88},5},{{388,96},3},{{388,97},3},{{388,98},0},{{388,104},0},{{388,112},3},{{389,26},5},{{389,42},4},
{{389,50},3},{{389,74},4},{{389,82},5},{{389,88},5},{{389,90},5},{{389,98},4},{{389,104},4},{{389,106},4},{{389,112},3},{{389,114},3},{{390,25},5},{{390,41},4},{{390,49},3},{{390,81},3},{{390,88},0},{{390,97},3},{{390,104},0},{{390,112},3},{{390,113},3},{{392,3},2},{{392,5},1},{{392,6},0},{{392,17},6},{{392,18},6},{{392,19},2},{{392,20},6},{{392,21},6},{{392,22},6},{{392,33},6},{{392,34},6},{{392,35},6},{{392,36},0},{{392,37},1},{{392,38},0},{{392,48},6},{{392,49},6},{{392,50},6},{{392,52},6},{{392,65},2},{{392,66},2},{{392,67},2},{{392,68},0},{{392,69},1},{{392,70},0},{{392,80},2},{{392,81},2},{{392,82},2},{{392,96},0},{{392,97},1},{{392,98},0},{{392,100},4},{{392,112},2},{{393,22},6},{{393,38},4},{{393,50},6},{{393,52},6},{{393,54},6},{{393,70},4},{{393,82},2},{{393,98},4},{{393,100},4},{{393,102},4},{{393,112},2},{{393,114},2},{{394,21},6},{{394,37},4},{{394,49},6},{{394,52},6},{{394,53},6},{{394,69},4},{{394,81},2},{{394,97},4},{{394,100},4},{{394,101},4},{{394,112},2},{{394,113},2},{{396,19},5},{{396,35},6},{{396,49},6},{{396,50},6},{{396,51},6},{{396,67},5},{{396,81},5},{{396,82},5},{{396,83},5},{{396,97},1},{{396,98},0},{{396,99},4},{{396,112},0},{{396,113},1},{{396,114},0},{{400,3},2},{{400,5},1},{{400,6},0},{{400,9},6},{{400,10},0},{{400,11},6},{{400,12},0},{{400,13},1},{{400,14},0},
{{400,33},1},{{400,34},0},{{400,35},6},{{400,36},0},{{400,37},1},{{400,38},0},{{400,40},0},{{400,41},1},{{400,42},0},{{400,44},0},{{400,65},1},{{400,66},0},{{400,67},2},{{400,68},0},{{400,69},1},{{400,70},0},{{400,72},0},{{400,74},0},{{400,76},0},{{400,96},0},{{400,97},1},{{400,98},0},{{400,100},0},{{400,104},0},{{404,11},6},{{404,35},6},{{404,41},6},{{404,42},0},{{404,43},6},{{404,67},3},{{404,74},0},{{404,97},3},{{404,98},0},{{404,99},3},{{404,104},0},{{404,106},0},{{408,35},2},{{408,37},1},{{408,38},0},{{408,67},2},{{408,69},1},{{408,70},0},{{408,97},1},{{408,98},0},{{408,99},2},{{408,100},0},{{408,101},1},{{408,102},0},{{416,3},2},{{416,5},1},{{416,6},0},{{416,9},6},{{416,10},0},{{416,11},2},{{416,12},6},{{416,13},6},{{416,14},0},{{416,17},1},{{416,18},0},{{416,19},2},{{416,20},6},{{416,21},6},{{416,22},6},{{416,24},0},{{416,25},2},{{416,26},0},{{416,28},6},{{416,65},2},{{416,66},2},{{416,67},2},{{416,68},0},{{416,69},1},{{416,70},0},{{416,72},0},{{416,74},0},{{416,76},0},{{416,80},2},{{416,81},2},{{416,82},2},{{416,88},2},{{417,14},4},{{417,22},6},{{417,26},2},{{417,28},6},{{417,30},6},{{417,70},4},{{417,74},2},{{417,76},4},{{417,78},4},{{417,82},2},{{417,88},2},{{417,90},2},{{418,13},6},{{418,21},6},{{418,25},6},{{418,28},6},{{418,29},6},{{418,69},3},{{418,76},0},{{418,81},2},
{{418,88},0},{{424,19},2},{{424,21},1},{{424,22},0},{{424,67},2},{{424,69},1},{{424,70},0},{{424,81},2},{{424,82},2},{{424,83},2},{{432,11},2},{{432,13},1},{{432,14},0},{{432,67},2},{{432,69},1},{{432,70},0},{{432,74},0},{{432,76},0},{{432,78},0}
};

Coords::Coords() :
	rowCoord{ INVALID_COORD },
	colCoord{ INVALID_COORD }
{}

Coords::Coords(const Coords& rhs) :
	rowCoord{ rhs.rowCoord },
	colCoord{ rhs.colCoord }
{}

Coords::Coords(
	Coord rowCoord,
	Coord colCoord
) :
	rowCoord{ rowCoord },
	colCoord{ colCoord }
{}

Coords& Coords::operator=(const Coords& rhs) {
	rowCoord = rhs.rowCoord;
	colCoord = rhs.colCoord;
	return *this;
}

bool Coords::operator==(const Coords& rhs) {
	return (rowCoord == rhs.rowCoord) && (colCoord == rhs.colCoord);
}

bool Coords::isValid() const {
	return INVALID_COORD != rowCoord && INVALID_COORD != colCoord;
}

ostream& operator<<(ostream& stream, const Coords& coords) {
	stream << coords.rowCoord << SPACE << coords.colCoord;
	return stream;
}

class Board {
public:
	Board();
	Board(const Board& rhs);
	void setStatus(const BoardStatus status);
	void setPlayer(const int player);
	void setMove(const Coords move);
	BoardStatus getStatus() const;
	int getPlayer() const;
	Coords getMove() const;
	void init();
	void copy(const Board& rhs);
	int getMiniBoardIdx(const Coords pos) const;
	short getMiniBoardInnerIdx(const Coords pos) const;
	Coords getBigBoardPosition(const int miniBoardIdx, const int miniBoardInnerIdx) const;
	int getPlayerIdx(const Coords pos) const;
	void setPlayerIdx(const Coords pos, const int playerIdx);
	bool validMove(const Coords move, const Coords previousMove); //!
	bool playMove(const Coords move);
	Coords getBestMove() const;
	vector<Coords> getAllPossibleMoves() const;
	void getAllPossibleMoves(Coords (&allMoves)[ALL_SQUARES], int& allMovesCount) const;
	int togglePlayer(const int playerToToggle) const;
	int simulateRandomGame(Coords(&allMoves)[ALL_SQUARES], int& allMovesCount);
	Board& operator=(const Board& board);
	friend ostream& operator<<(std::ostream& stream, const Board& board);
private:
	vector<Coords> getAllPossibleMovesForMiniBoard(const int miniBoardIdx) const;
	void getAllPossibleMovesForMiniBoard(const int miniBoardIdx, Coords(&allMoves)[ALL_SQUARES], int& allMovesCount) const;
	vector<Coords> getAllPossibleMovesForAllMiniBoards() const;
	void getAllPossibleMovesForAllMiniBoards(Coords(&allMoves)[ALL_SQUARES], int& allMovesCount) const;
	bool checkForWin(const short boardToCheck) const;
	bool boardFull(const short boardToCheck) const;
	bool playableMiniBoard(const int miniBoardIdx) const;
	BoardStatus resolveDraw() const;
	bool miniBoardPlayable(const int miniBoardIdx) const;
	short board[SQUARE_TYPES][BOARD_DIM];
	short bigBoard[SQUARE_TYPES];
	unsigned short flags;
	short bigBoardDraw;
};

Board::Board() {
	init();
}

Board::Board(const Board& rhs) {
	copy(rhs);
}

void Board::setStatus(const BoardStatus status) {
	unsigned statusToSet = static_cast<unsigned>(status);
	statusToSet <<= STATUS_OFFSET;

	flags &= ~STATUS_MASK; // First zero out the current status
	flags |= statusToSet;
}

void Board::setPlayer(const int player) {
	flags &= ~PLAYER_FLAG; // First zero out the player flag
	flags |= player;
}

void Board::setMove(Coords move) {
	unsigned rowToSet = static_cast<unsigned>(move.getRowCoord());
	unsigned colToSet = static_cast<unsigned>(move.getColCoord());

	rowToSet <<= MOVE_ROW_OFFSET;
	colToSet <<= MOVE_COL_OFFSET;

	flags &= ~MOVE_ROW_MASK; // Zero out the row
	flags &= ~MOVE_COL_MASK; // Zero out the col

	flags |= rowToSet;
	flags |= colToSet;
}

BoardStatus Board::getStatus() const {
	return static_cast<BoardStatus>((STATUS_MASK & flags) >> STATUS_OFFSET);
}

int Board::getPlayer() const {
	return static_cast<int>(PLAYER_FLAG & flags);
}

Coords Board::getMove() const {
	Coords res;
	res.setRowCoord((flags & MOVE_ROW_MASK) >> MOVE_ROW_OFFSET);
	res.setColCoord((flags & MOVE_COL_MASK) >> MOVE_COL_OFFSET);
	return res;
}

void Board::init() {
	for (int sqType = 0; sqType < SQUARE_TYPES; ++sqType) {
		for (int miniBoardIdx = 0; miniBoardIdx < BOARD_DIM; ++miniBoardIdx) {
			board[sqType][miniBoardIdx] = EMPTY_TICTACTOE_BOARD;
		}
	}

	for (int miniBoardIdx = 0; miniBoardIdx < BOARD_DIM; ++miniBoardIdx) {
		bigBoard[miniBoardIdx] = EMPTY_TICTACTOE_BOARD;
	}

	flags = 0;
	setStatus(BoardStatus::IN_PROGRESS);
	bigBoardDraw = EMPTY_TICTACTOE_BOARD;
}

void Board::copy(const Board& rhs) {
	this->flags = rhs.flags;
	this->bigBoardDraw = rhs.bigBoardDraw;

	for (int sqTypeIdx = 0; sqTypeIdx < SQUARE_TYPES; ++sqTypeIdx) {
		for (int miniBoardIdx = 0; miniBoardIdx < BOARD_DIM; ++miniBoardIdx) {
			this->board[sqTypeIdx][miniBoardIdx] = rhs.board[sqTypeIdx][miniBoardIdx];
		}

		this->bigBoard[sqTypeIdx] = rhs.bigBoard[sqTypeIdx];
	}
}

int Board::getMiniBoardIdx(const Coords pos) const {
	const int bigBoardRowIdx = pos.getRowCoord() / TRIPLE;
	const int bigBoardColIdx = pos.getColCoord() / TRIPLE;
	const int miniBoardIdx = (bigBoardRowIdx * TRIPLE) + bigBoardColIdx;
	return miniBoardIdx;
}

short Board::getMiniBoardInnerIdx(const Coords pos) const {
	const int miniBoardRowIdx = pos.getRowCoord() % TRIPLE;
	const int miniBoardColIdx = pos.getColCoord() % TRIPLE;
	const short miniBoardInnerIdx = (miniBoardRowIdx * TRIPLE) + miniBoardColIdx;
	return miniBoardInnerIdx;
}

Coords Board::getBigBoardPosition(const int miniBoardIdx, const int miniBoardInnerIdx) const {
	const int miniBoardRowIdx = miniBoardIdx / TRIPLE;
	const int miniBoardColIdx = miniBoardIdx % TRIPLE;
	const int miniBoardInnerRowIdx = miniBoardInnerIdx / TRIPLE;
	const int miniBoardInnerColIdx = miniBoardInnerIdx % TRIPLE;
	const int gloabalRowIdx = miniBoardInnerRowIdx + (miniBoardRowIdx * TRIPLE);
	const int gloabalColIdx = miniBoardInnerColIdx + (miniBoardColIdx * TRIPLE);
	return { gloabalRowIdx, gloabalColIdx };
}

int Board::getPlayerIdx(const Coords pos) const {
	int playerIdx = INVALID_IDX;
	const int miniBoardIdx = getMiniBoardIdx(pos);
	const short miniBoardInnerIdx = getMiniBoardInnerIdx(pos);
	const short miniBoardXes = board[0][miniBoardIdx];
	const short miniBoardOs = board[1][miniBoardIdx];
	if (miniBoardXes & (1 << miniBoardInnerIdx)) {
		playerIdx = MY_PLAYER_IDX;
	}
	else if (miniBoardOs & (1 << miniBoardInnerIdx)) {
		playerIdx = OPPONENT_PLAYER_IDX;
	}

	return playerIdx;
}

void Board::setPlayerIdx(const Coords pos, const int playerIdx) {
	const int miniBoardIdx = getMiniBoardIdx(pos);
	const short miniBoardInnerIdx = getMiniBoardInnerIdx(pos);
	board[playerIdx][miniBoardIdx] |= 1 << miniBoardInnerIdx;
}

bool Board::validMove(const Coords move, const Coords previousMove) {
	bool valid = true;
	const short miniBoardIdx = static_cast<short>(getMiniBoardIdx(move));
	const short miniBoardIdxFromPrevMove = getMiniBoardInnerIdx(previousMove);
	if (!miniBoardPlayable(miniBoardIdxFromPrevMove) || miniBoardIdx == miniBoardIdxFromPrevMove) {
		if (miniBoardPlayable(miniBoardIdx)) {
			const short miniBoardInnerIdx = getMiniBoardInnerIdx(move);
			const bool iPlayedOnSquare = board[MY_PLAYER_IDX][miniBoardIdx] & (1 << miniBoardInnerIdx);
			const bool opponentPlayedOnSquare = board[OPPONENT_PLAYER_IDX][miniBoardIdx] & (1 << miniBoardInnerIdx);
			valid = !iPlayedOnSquare && !opponentPlayedOnSquare;
		}
		else {
			valid = false;
		}
	}
	else {
		valid = false;
	}
	return valid;
}

bool Board::playMove(const Coords move) {
	bool movePlayed = false;
	const int player = getPlayer();

	setMove(move);
	setPlayerIdx(move, player);
	const int miniBoardIdx = getMiniBoardIdx(move);
	const short miniBoard = board[player][miniBoardIdx];
	if (checkForWin(miniBoard)) {
		bigBoard[player] |= (1 << miniBoardIdx);
	}
	else if (boardFull(board[MY_PLAYER_IDX][miniBoardIdx] | board[OPPONENT_PLAYER_IDX][miniBoardIdx])) {
		bigBoardDraw |= (1 << miniBoardIdx);
	}

	if (checkForWin(bigBoard[player])) {
		setStatus((MY_PLAYER_IDX == player) ? BoardStatus::I_WON : BoardStatus::OPPONENT_WON);
	}
	else if (boardFull(bigBoard[MY_PLAYER_IDX] | bigBoard[OPPONENT_PLAYER_IDX] | bigBoardDraw)) {
		setStatus(resolveDraw());
	}

	setPlayer(togglePlayer(player));
	movePlayed = true;

	return movePlayed;
}

Coords Board::getBestMove() const {
	const int activeMiniBoardIdx = getMiniBoardInnerIdx(getMove());

	// Check if the mini board is active
	// If so get the best move for it
	// If not get the best move for the best mini board based on the big board

	return Coords();
}

vector<Coords> Board::getAllPossibleMoves() const {
	const int activeMiniBoardIdx = getMiniBoardInnerIdx(getMove()); // Current moves detemine the next mini board
	vector<Coords> miniBoardEmptyPositions = getAllPossibleMovesForMiniBoard(activeMiniBoardIdx);

	if (0 == miniBoardEmptyPositions.size()) {
		miniBoardEmptyPositions = getAllPossibleMovesForAllMiniBoards();
	}

	return miniBoardEmptyPositions;
}

int Board::simulateRandomGame(Coords(&allMoves)[ALL_SQUARES], int& allMovesCount) {
	while (BoardStatus::IN_PROGRESS == getStatus()) {
		//getAllPossibleMoves(allMoves, allMovesCount);
		//playMove(allMoves[fast_rand() % allMovesCount]);
		playMove(getBestMove());
	}
	return BoardStatus::I_WON == getStatus() ? MY_PLAYER_IDX : OPPONENT_PLAYER_IDX;
}

Board& Board::operator=(const Board& rhs) {
	copy(rhs);
	return *this;
}

void Board::getAllPossibleMoves(Coords (&allMoves)[ALL_SQUARES], int& allMovesCount) const {
	allMovesCount = 0;

	const int activeMiniBoardIdx = getMiniBoardInnerIdx(getMove()); // Current moves detemine the next mini board
	getAllPossibleMovesForMiniBoard(activeMiniBoardIdx, allMoves, allMovesCount);

	if (0 == allMovesCount) {
		getAllPossibleMovesForAllMiniBoards(allMoves, allMovesCount);
	}
}

int Board::togglePlayer(const int playerToToggle) const {
	return PLAYER_TOGGLE - (playerToToggle + 1);
}

vector<Coords> Board::getAllPossibleMovesForMiniBoard(const int miniBoardIdx) const {
	vector<Coords> moves;
	moves.reserve(BOARD_DIM);

	if (playableMiniBoard(miniBoardIdx)) {
		const short opponentBoard = board[OPPONENT_PLAYER_IDX][miniBoardIdx];
		const short myBoard = board[MY_PLAYER_IDX][miniBoardIdx];

		for (int sqIdx = 0; sqIdx < BOARD_DIM; ++sqIdx) {
			const short squareMask = 1 << sqIdx;
			if (!(opponentBoard & squareMask) && !(myBoard & squareMask)) {
				Coords squarePosition = getBigBoardPosition(miniBoardIdx, sqIdx);
				moves.push_back(squarePosition);
			}
		}
	}
	return moves;
}

void Board::getAllPossibleMovesForMiniBoard(const int miniBoardIdx, Coords(&allMoves)[ALL_SQUARES], int& allMovesCount) const {
	if (playableMiniBoard(miniBoardIdx)) {
		const short opponentBoard = board[OPPONENT_PLAYER_IDX][miniBoardIdx];
		const short myBoard = board[MY_PLAYER_IDX][miniBoardIdx];

		for (int sqIdx = 0; sqIdx < BOARD_DIM; ++sqIdx) {
			const short squareMask = 1 << sqIdx;
			if (!(opponentBoard & squareMask) && !(myBoard & squareMask)) {
				allMoves[allMovesCount] = getBigBoardPosition(miniBoardIdx, sqIdx);
				++allMovesCount;
			}
		}
	}
}

vector<Coords> Board::getAllPossibleMovesForAllMiniBoards() const {
	vector<Coords> allMoves;
	allMoves.reserve(BOARD_DIM * BOARD_DIM);
	
	for (int miniBoardIdx = 0; miniBoardIdx < BOARD_DIM; ++miniBoardIdx) {
		vector<Coords> miniBoardMoves = getAllPossibleMovesForMiniBoard(miniBoardIdx);
		allMoves.insert(allMoves.end(), miniBoardMoves.begin(), miniBoardMoves.end());
	}
	return allMoves;
}

void Board::getAllPossibleMovesForAllMiniBoards(Coords (&allMoves)[ALL_SQUARES], int& allMovesCount) const {
	for (int miniBoardIdx = 0; miniBoardIdx < BOARD_DIM; ++miniBoardIdx) {
		getAllPossibleMovesForMiniBoard(miniBoardIdx, allMoves, allMovesCount);
	}
}

bool Board::checkForWin(const short boardToCheck) const {
	bool playerWon = false;

	for (int winMaskIdx = 0; winMaskIdx < WIN_MASKS_COUNT; ++winMaskIdx) {
		if (WIN_MASKS[winMaskIdx] == (WIN_MASKS[winMaskIdx] & boardToCheck)) {
			playerWon = true;
			break;
		}
	}
	return playerWon;
}

bool Board::boardFull(const short boardToCheck) const {
	return FULL_BOARD_MASK == (FULL_BOARD_MASK & boardToCheck);
}

bool Board::playableMiniBoard(const int miniBoardIdx) const {
	const short miniBoardMask = 1 << miniBoardIdx;
	const bool boardWon = (miniBoardMask & bigBoard[MY_PLAYER_IDX]) || (miniBoardMask & bigBoard[OPPONENT_PLAYER_IDX]);
	const bool boardDraw = miniBoardMask & bigBoardDraw;
	return !boardWon && !boardDraw;
}

BoardStatus Board::resolveDraw() const {
	int opponentMiniBoardsWon = 0;
	int mineMiniBoardsWon = 0;

	for (int miniBoardIdx = 0; miniBoardIdx < BOARD_DIM; ++miniBoardIdx) {
		if (bigBoard[OPPONENT_PLAYER_IDX] & (1 << miniBoardIdx)) {
			++opponentMiniBoardsWon;
		}
		else {
			++mineMiniBoardsWon;
		}
	}
	return (opponentMiniBoardsWon > mineMiniBoardsWon) ? BoardStatus::OPPONENT_WON : BoardStatus::I_WON;
}

bool Board::miniBoardPlayable(const int miniBoardIdx) const {
	const bool iWonMiniBoard = bigBoard[MY_PLAYER_IDX] & (1 << miniBoardIdx);
	const bool opponentWonMiniBoard = bigBoard[OPPONENT_PLAYER_IDX] & (1 << miniBoardIdx);
	const bool drawnMiniBoard = bigBoardDraw & (1 << miniBoardIdx);
	return !iWonMiniBoard && !opponentWonMiniBoard && !drawnMiniBoard;
}

ostream& operator<<(std::ostream& stream, const Board& board) {
	for (int rowIdx = 0; rowIdx < BOARD_DIM + 1; ++rowIdx) {
		if (rowIdx > 0 && 0 == rowIdx % TRIPLE) {
			stream << endl;
		}

		for (int colIdx = 0; colIdx < BOARD_DIM + 1; ++colIdx) {
			if (0 == colIdx % TRIPLE) {
				stream << SPACE << SPACE << SPACE;
			}

			if (BOARD_DIM == rowIdx) {
				stream << colIdx;
			}
			else if (BOARD_DIM == colIdx) {
				stream << rowIdx;
			}
			else {
				const int playerIdx = board.getPlayerIdx({ rowIdx, colIdx });

				switch (playerIdx) {
					case MY_PLAYER_IDX: { stream << MY_PLAYER_CHAR; break; }
					case OPPONENT_PLAYER_IDX: { stream << OPPONENT_PLAYER_CHAR; break; }
					default: { stream << EMPTY_CHAR; break; }
				}
			}
		}

		stream << endl;
	}
	return stream;
}

class State {
public:
	State(const Board& board, const int visits, const double winScore);
	void setBoard(const Board& board) { this->board = board; }
	void setVisits(const int visits) { this->visits = visits; }
	void setWinScore(const double winScore) { this->winScore = winScore; }
	const Board& getBoard() const { return board; }
	Board& getBoard() { return board; }
	int getVisits() const { return visits; }
	double getWinScore() const { return winScore; }
private:
	Board board;
	int visits;
	double winScore;
};

State::State(const Board& board, const int visits, const double winScore) :
	board{ board },
	visits{ visits },
	winScore{ winScore }
{}

class Node {
public:
	Node(const State& state, const int parentIdx);
	const State& getState() const { return state; }
	State& getState() { return state; }
	int getFirstChild() const { return firstChild; }
	int getParentIdx() const { return parentIdx; }
	void addChild(const int childIdxNode);
	int getChildrenCount() const;
private:
	State state;
	int firstChild;
	int parentIdx;
	char childrenCount;
};

Node::Node(const State& state, const int parentIdx) :
	state{ state },
	firstChild{ INVALID_IDX},
	childrenCount{ 0 },
	parentIdx{ parentIdx }
{}

void Node::addChild(const int childIdxNode) {
	if (0 == childrenCount) {
		firstChild = childIdxNode;
	}
	++childrenCount;
}

int Node::getChildrenCount() const {
	return childrenCount;
}

class Tree {
public:
	int getNodesCount() const { return static_cast<int>(nodes.size()); }
	void init(const Board& initialBoard);
	const Node& getNode(const int nodeIdx) const { return nodes[nodeIdx]; }
	Node& getNode(const int nodeIdx) { return nodes[nodeIdx]; }
	void setRootPlayer(const int playerIdx);
	int addNode(const Node& node);
	void print() const;
private:
	void dfsPrint(const int depth, const int nodeToExplore, const bool lastChild, string& treeString) const;
	vector<Node> nodes;
};

void Tree::init(const Board& initialBoard) {
	nodes.reserve(NODES_TO_RESERVE);
	State rootState{ initialBoard, 0, 0 };
	Node rootNode{ rootState, INVALID_IDX };
	nodes.push_back(rootNode);
}

void Tree::setRootPlayer(const int playerIdx) {
	nodes[0].getState().getBoard().setPlayer(playerIdx);
}

int Tree::addNode(const Node& node) {
	nodes.push_back(node);
	return static_cast<int>(nodes.size() - 1);
}

void Tree::print() const {
	string treeString = EMPTY_STRING;
	dfsPrint(0, 0, false, treeString);

	//cerr << treeString << endl;
	int debug = 0;
	++debug;
}

void Tree::dfsPrint(const int depth, const int nodeToExploreIdx, const bool lastChild, string& treeString) const {
	const Node& nodeToExplore = nodes[nodeToExploreIdx];

	printTabs(depth, treeString);
	treeString += "{\n";
	printTabs(depth + 1, treeString);
	treeString += R"("name": ")";
	treeString += to_string(nodeToExploreIdx);
	treeString += "[";
	treeString += to_string(nodeToExplore.getState().getBoard().getMove().getRowCoord());
	treeString += "; ";
	treeString += to_string(nodeToExplore.getState().getBoard().getMove().getColCoord());
	treeString += "]";
	treeString += to_string(static_cast<int>(nodeToExplore.getState().getWinScore()));
	treeString += R"(")";

	const int childrenCount = nodeToExplore.getChildrenCount();
	if (childrenCount > 0) {
		treeString += ",\n";
		printTabs(depth + 1, treeString);
		treeString += R"("children": [)";
		treeString += "\n";
		printTabs(depth + 1, treeString);

		const int nodesFirstChild = nodeToExplore.getFirstChild();
		for (int i = 0; i < nodeToExplore.getChildrenCount(); ++i) {
			dfsPrint(depth + 1, nodesFirstChild + i, i == (childrenCount - 1), treeString);
		}

		printTabs(depth + 1, treeString);
		treeString += "]\n";
	}
	else {
		treeString += "\n";
	}

	printTabs(depth, treeString);
	treeString += "}";
	if (!lastChild && !(0 == depth)) {
		treeString += ",";
	}
	treeString += "\n";
}

class MonteCarloTreeSearch {
public:
	MonteCarloTreeSearch(Board& initialBoard);
	void setOpponentMove(const Coords opponentMove) { this->opponentMove = opponentMove; }
	void setTimeLimit(long long timeLimit) { this->timeLimit = timeLimit; }
	Coords getBestMove() const { return bestMove; }
	int getNodesCount() const { return searchTree.getNodesCount(); }
	void solve(const int turnIdx);
	void setRootPlayer(const int playerIdx);
	void printSearchTree() const;
private:
	int selectPromisingNode() const;
	void expansion(const int selectedNode);
	void expansion(const int selectedNode, Coords(&allMoves)[ALL_SQUARES], int& allMovesCount);
	int simulation(const int nodeToExploreIdx, Coords(&allMoves)[ALL_SQUARES], int& allMovesCount);
	void backPropagation(const int nodeToExploreIdx, const int simulationResult);
	double uct(const double nodeWinScore, const int parentVisits, const int nodeVisit) const;
	void searchBegin(const int turnIdx);
	void searchEnd(const int turnIdx);
private:
	Tree searchTree;
	Coords opponentMove;
	Coords bestMove;
	Board& initialBoard;
	long long timeLimit;
	double sqrtOf2;
	double maxDouble;
	int turnRootNodeIdx;
};

MonteCarloTreeSearch::MonteCarloTreeSearch(Board& initialBoard) :
	initialBoard{ initialBoard },
	timeLimit{ 0 },
	turnRootNodeIdx{ 0 }
{
	sqrtOf2 = sqrt(2.0);
	maxDouble = numeric_limits<double>::max();
	searchTree.init(initialBoard);
}

void MonteCarloTreeSearch::solve(const int turnIdx) {
	searchBegin(turnIdx);

	Coords allMoves[ALL_SQUARES]; // Reuse array
	int allMovesCount;

	int iteration = 0;
	chrono::steady_clock::time_point start = std::chrono::steady_clock::now();
	const chrono::steady_clock::time_point loopEnd = start + chrono::milliseconds{ timeLimit };
	
	for (chrono::steady_clock::time_point now = start; now < loopEnd; now = std::chrono::steady_clock::now()) {
		int selectedNodeIdx = selectPromisingNode();
		const Node& selectedNode = searchTree.getNode(selectedNodeIdx);

		if (BoardStatus::IN_PROGRESS == selectedNode.getState().getBoard().getStatus()) {
			expansion(selectedNodeIdx, allMoves, allMovesCount);
			selectedNodeIdx = selectedNode.getFirstChild();
		}

		int victoriousPlayer = simulation(selectedNodeIdx, allMoves, allMovesCount);
		backPropagation(selectedNodeIdx, victoriousPlayer);

		++iteration;
	}

	cerr << "MCTS iterations: " << iteration << endl;
	cerr << "Nodes count: " << searchTree.getNodesCount() << endl;

	searchEnd(turnIdx);
}

void MonteCarloTreeSearch::setRootPlayer(const int playerIdx) {
	searchTree.setRootPlayer(playerIdx);
}

void MonteCarloTreeSearch::printSearchTree() const {
	searchTree.print();
}

int MonteCarloTreeSearch::selectPromisingNode() const {
	int currentNodeIdx = turnRootNodeIdx;

	while (searchTree.getNode(currentNodeIdx).getChildrenCount() > 0) {
		const Node& currentNode = searchTree.getNode(currentNodeIdx);
		const int parentVisits = currentNode.getState().getVisits();
		const int nodeFirstChild = currentNode.getFirstChild();

		double maxUCT = -1.0;
		for (int childIdx = 0; childIdx < currentNode.getChildrenCount(); ++childIdx) {
			const int childNodeIdx = nodeFirstChild + childIdx;
			const Node& childNode = searchTree.getNode(childNodeIdx);
			const State& childState = childNode.getState();
			const double childUCT = uct(childState.getWinScore(), parentVisits, childState.getVisits());

			if (childUCT > maxUCT) {
				maxUCT = childUCT;
				currentNodeIdx = childNodeIdx;
			}
		}
	}

	return currentNodeIdx;
}

void MonteCarloTreeSearch::expansion(const int selectedNode) {
	Node& parentNode = searchTree.getNode(selectedNode);
	const State& parentState = parentNode.getState();
	const Board& parentBoard = parentState.getBoard();
	vector<Coords> allMoves = parentBoard.getAllPossibleMoves();
	const int allMovesCount = static_cast<int>(allMoves.size());

	for (int moveIdx = 0; moveIdx < allMovesCount; ++moveIdx) {
		Board childBoard{ parentBoard };
		childBoard.playMove(allMoves[moveIdx]);

		State childState{ childBoard, 0, 0.0 };
		Node childNode{ childState, selectedNode };

		const int childNodeIdx = searchTree.addNode(childNode);
		parentNode.addChild(childNodeIdx);
	}
}

void MonteCarloTreeSearch::expansion(const int selectedNode, Coords(&allMoves)[ALL_SQUARES], int& allMovesCount) {
	Node& parentNode = searchTree.getNode(selectedNode);
	const State& parentState = parentNode.getState();
	const Board& parentBoard = parentState.getBoard();
	parentBoard.getAllPossibleMoves(allMoves, allMovesCount);

	for (int moveIdx = 0; moveIdx < allMovesCount; ++moveIdx) {
		Board childBoard{ parentBoard };
		childBoard.playMove(allMoves[moveIdx]);

		State childState{ childBoard, 0, 0.0 };
		Node childNode{ childState, selectedNode };

		const int childNodeIdx = searchTree.addNode(childNode);
		parentNode.addChild(childNodeIdx);
	}
}

int MonteCarloTreeSearch::simulation(const int nodeToExploreIdx, Coords(&allMoves)[ALL_SQUARES], int& allMovesCount) {
	Board boardToSimulate = searchTree.getNode(nodeToExploreIdx).getState().getBoard();
	return boardToSimulate.simulateRandomGame(allMoves, allMovesCount);
}

void MonteCarloTreeSearch::backPropagation(const int nodeToExploreIdx, const int victoriousPlayer) {
	int currentNodeIdx = nodeToExploreIdx;
	while (INVALID_IDX != currentNodeIdx) {
		Node& currentNode = searchTree.getNode(currentNodeIdx);
		State& currentNodeState = currentNode.getState();
		currentNodeState.setVisits(currentNodeState.getVisits() + 1);

		int ownerPlayer = currentNodeState.getBoard().getPlayer();
		ownerPlayer = currentNodeState.getBoard().togglePlayer(ownerPlayer);
		if (ownerPlayer == victoriousPlayer) {
			currentNodeState.setWinScore(currentNodeState.getWinScore() + WIN_VALUE);
		}

		currentNodeIdx = currentNode.getParentIdx();
	}
}

double MonteCarloTreeSearch::uct(const double nodeWinScore, const int parentVisits, const int nodeVisit) const {
	double uctValue{ maxDouble };

	if (nodeVisit > 0) {
		const double nodeVisitDouble = static_cast<double>(nodeVisit);
		const double totalVisitsDouble = static_cast<double>(parentVisits);
		const double winVisitsRatio = nodeWinScore / nodeVisitDouble;
		const double confidentRatio = sqrtOf2 * sqrt(log(totalVisitsDouble) / nodeVisitDouble);

		uctValue = winVisitsRatio + confidentRatio;
	}
	return uctValue;
}

void MonteCarloTreeSearch::searchBegin(const int turnIdx) {
	if (0 == turnIdx) {
		searchTree.getNode(turnRootNodeIdx).getState().setBoard(initialBoard);
	}
	else {
		const Node& currentRoot = searchTree.getNode(turnRootNodeIdx);
		const int currentRootFirstChild = currentRoot.getFirstChild();
		for (int childIdx = 0; childIdx < currentRoot.getChildrenCount(); ++childIdx) {
			const Node& child = searchTree.getNode(currentRootFirstChild + childIdx);
			const Coords childMove = child.getState().getBoard().getMove();

			if (opponentMove == child.getState().getBoard().getMove()) {
				turnRootNodeIdx = currentRootFirstChild + childIdx;
			}
		}
	}
}

void MonteCarloTreeSearch::searchEnd(const int turnIdx) {
	if (0 == turnIdx && !opponentMove.isValid()) {
		bestMove = { BOARD_DIM / 2, BOARD_DIM / 2 };
	}
	else {
		const int rootFirstChild = searchTree.getNode(turnRootNodeIdx).getFirstChild();
		const int rootChildrenCount = searchTree.getNode(turnRootNodeIdx).getChildrenCount();

		if (rootChildrenCount > 0) {
			int bestChildIdx = rootFirstChild; // Score for all children may be 0.0
			double maxScore = 0.0;
			for (int childIdx = 0; childIdx < rootChildrenCount; ++childIdx) {
				const int childNodeIdx = rootFirstChild + childIdx;
				const double childScore = searchTree.getNode(childNodeIdx).getState().getWinScore();
				if (childScore > maxScore) {
					maxScore = childScore;
					bestChildIdx = childNodeIdx;
				}
			}

			bestMove = searchTree.getNode(bestChildIdx).getState().getBoard().getMove();
			turnRootNodeIdx = bestChildIdx;

			if (0 == searchTree.getNode(turnRootNodeIdx).getChildrenCount()) {
				expansion(turnRootNodeIdx);
			}
		}
	}
	//printSearchTree();
}

class Game {
public:
	Game();
	void initGame();
	void gameLoop();
	void getTurnInput();
	void turnBegin();
	void makeTurn();
	void turnEnd();
	void play();
private:
	Board board;
	MonteCarloTreeSearch monteCarloTreeSearch;
	Coords opponentMove;
	int turnsCount;
	int stopGame;
};

Game::Game() :
	board{},
	monteCarloTreeSearch{ board },
	opponentMove{},
	turnsCount{ 0 },
	stopGame{ false }
{}

void Game::initGame() {
	fast_srand(444);
}

void Game::gameLoop() {
	while (!stopGame) {
		getTurnInput();
		turnBegin();
		makeTurn();
		turnEnd();

#ifdef DEBUG_ONE_TURN
		break;
#endif // DEBUG_ONE_TURN
	}
}

void Game::getTurnInput() {
	int opponentRow;
	int opponentCol;
	cin >> opponentRow >> opponentCol; cin.ignore();

#ifdef REDIRECT_INPUT
	if (STOP_INPUT == opponentRow && STOP_INPUT == opponentCol) {
		exit(0);
	}
#endif // REDIRECT_INPUT

#ifdef OUTPUT_GAME_DATA
	cerr << opponentRow << SPACE << opponentCol << endl;
#endif // OUTPUT_GAME_DATA

	opponentMove.setRowCoord(opponentRow);
	opponentMove.setColCoord(opponentCol);
	monteCarloTreeSearch.setOpponentMove(opponentMove);

	int validActionCount;
	cin >> validActionCount; cin.ignore();

#ifdef OUTPUT_GAME_DATA
	cerr << validActionCount << endl;
#endif // OUTPUT_GAME_DATA

	for (int i = 0; i < validActionCount; i++) {
		int row;
		int col;
		cin >> row >> col; cin.ignore();

#ifdef OUTPUT_GAME_DATA
		cerr << row << SPACE << col << endl;
#endif // OUTPUT_GAME_DATA
	}
}

void Game::turnBegin() {
	if (0 == turnsCount && opponentMove.isValid()) {
		board.setPlayer(OPPONENT_PLAYER_IDX);
		board.playMove(opponentMove);
	}
	else if (0 == turnsCount) {
		board.setPlayer(MY_PLAYER_IDX);
		board.playMove({ BOARD_DIM / 2, BOARD_DIM / 2 });
	}
	else {
		board.playMove(opponentMove);
	}

	if (0 == turnsCount) {
		monteCarloTreeSearch.setTimeLimit(FIRST_TURN_MS - BIAS_MS);
	}
	else {
		monteCarloTreeSearch.setTimeLimit(TURN_MS - BIAS_MS);
	}

	monteCarloTreeSearch.solve(turnsCount);
}

void Game::makeTurn() {
	const Coords bestMove = monteCarloTreeSearch.getBestMove();
	cout << bestMove << endl;

	if (opponentMove.isValid()) {
		board.playMove(bestMove);
	}
}

void Game::turnEnd() {
	++turnsCount;
}

void Game::play() {
	initGame();
	gameLoop();
}

int main() {
#ifdef REDIRECT_INPUT
	ifstream in(INPUT_FILE_NAME);
	streambuf *cinbuf = cin.rdbuf();
	cin.rdbuf(in.rdbuf());

	ofstream out(OUTPUT_FILE_NAME);
	streambuf *coutbuf = cout.rdbuf();
	cout.rdbuf(out.rdbuf());
#endif // REDIRECT_INPUT

	Game game;
	game.play();
	return 0;
}